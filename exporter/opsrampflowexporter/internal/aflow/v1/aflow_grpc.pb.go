//
// This computer program is the confidential information and proprietary trade
// secret of OpsRamp, Inc. Possessions and use of this program must  conform
// strictly to the license agreement between the user and OpsRamp, Inc., and
// receipt or possession does not convey any rights to divulge, reproduce,  or
// allow others to use this program without specific written authorization  of
// OpsRamp, Inc.
//
// Copyright (c) 2022 OpsRamp, Inc. All rights reserved.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: aflow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetflowLogs_AddNetflowDetails_FullMethodName = "/NetflowLogs/AddNetflowDetails"
)

// NetflowLogsClient is the client API for NetflowLogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetflowLogsClient interface {
	AddNetflowDetails(ctx context.Context, in *AggregatedFlows, opts ...grpc.CallOption) (*NetflowResponse, error)
}

type netflowLogsClient struct {
	cc grpc.ClientConnInterface
}

func NewNetflowLogsClient(cc grpc.ClientConnInterface) NetflowLogsClient {
	return &netflowLogsClient{cc}
}

func (c *netflowLogsClient) AddNetflowDetails(ctx context.Context, in *AggregatedFlows, opts ...grpc.CallOption) (*NetflowResponse, error) {
	out := new(NetflowResponse)
	err := c.cc.Invoke(ctx, NetflowLogs_AddNetflowDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetflowLogsServer is the server API for NetflowLogs service.
// All implementations must embed UnimplementedNetflowLogsServer
// for forward compatibility
type NetflowLogsServer interface {
	AddNetflowDetails(context.Context, *AggregatedFlows) (*NetflowResponse, error)
	mustEmbedUnimplementedNetflowLogsServer()
}

// UnimplementedNetflowLogsServer must be embedded to have forward compatible implementations.
type UnimplementedNetflowLogsServer struct {
}

func (UnimplementedNetflowLogsServer) AddNetflowDetails(context.Context, *AggregatedFlows) (*NetflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetflowDetails not implemented")
}
func (UnimplementedNetflowLogsServer) mustEmbedUnimplementedNetflowLogsServer() {}

// UnsafeNetflowLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetflowLogsServer will
// result in compilation errors.
type UnsafeNetflowLogsServer interface {
	mustEmbedUnimplementedNetflowLogsServer()
}

func RegisterNetflowLogsServer(s grpc.ServiceRegistrar, srv NetflowLogsServer) {
	s.RegisterService(&NetflowLogs_ServiceDesc, srv)
}

func _NetflowLogs_AddNetflowDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedFlows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetflowLogsServer).AddNetflowDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetflowLogs_AddNetflowDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetflowLogsServer).AddNetflowDetails(ctx, req.(*AggregatedFlows))
	}
	return interceptor(ctx, in, info, handler)
}

// NetflowLogs_ServiceDesc is the grpc.ServiceDesc for NetflowLogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetflowLogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NetflowLogs",
	HandlerType: (*NetflowLogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetflowDetails",
			Handler:    _NetflowLogs_AddNetflowDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aflow.proto",
}

// Code generated from Sql.g4 by ANTLR 4.10.1. DO NOT EDIT.

package parser // Sql

import (
	"fmt"
	"strconv"
  "sync"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}


type SqlParser struct {
	*antlr.BaseParser
}

var sqlParserStaticData struct {
  once                   sync.Once
  serializedATN          []int32
  literalNames           []string
  symbolicNames          []string
  ruleNames              []string
  predictionContextCache *antlr.PredictionContextCache
  atn                    *antlr.ATN
  decisionToDFA          []*antlr.DFA
}

func sqlParserInit() {
  staticData := &sqlParserStaticData
  staticData.literalNames = []string{
    "", "'::'", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", 
    "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", 
    "'<='", "'>'", "'>='", "'=='", "'!='", "'<>'",
  }
  staticData.symbolicNames = []string{
    "", "", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
    "PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
    "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", 
    "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", 
    "K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
    "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", 
    "K_COLUMN", "K_COMMIT", "K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", 
    "K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
    "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", 
    "K_DISTINCT", "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ENABLE", "K_ESCAPE", 
    "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", 
    "K_FOREIGN", "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", 
    "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", "K_INITIALLY", 
    "K_INNER", "K_INSERT", "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", 
    "K_ISNULL", "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", "K_MATCH", 
    "K_NATURAL", "K_NEXTVAL", "K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", 
    "K_OFFSET", "K_ON", "K_ONLY", "K_OR", "K_ORDER", "K_OUTER", "K_PLAN", 
    "K_PRAGMA", "K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", "K_REFERENCES", 
    "K_REGEXP", "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", "K_RESTRICT", 
    "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", "K_SET", 
    "K_TABLE", "K_TEMP", "K_TEMPORARY", "K_THEN", "K_TO", "K_TRANSACTION", 
    "K_TRIGGER", "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", 
    "K_VALUES", "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", 
    "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
    "BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
    "UNEXPECTED_CHAR",
  }
  staticData.ruleNames = []string{
    "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "alter_table_add_constraint", 
    "alter_table_add", "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
    "compound_select_stmt", "create_index_stmt", "create_table_stmt", "create_trigger_stmt", 
    "create_view_stmt", "create_virtual_table_stmt", "delete_stmt", "delete_stmt_limited", 
    "detach_stmt", "drop_index_stmt", "drop_table_stmt", "drop_trigger_stmt", 
    "drop_view_stmt", "factored_select_stmt", "insert_stmt", "pragma_stmt", 
    "reindex_stmt", "release_stmt", "rollback_stmt", "savepoint_stmt", "simple_select_stmt", 
    "select_stmt", "select_or_values", "update_stmt", "update_stmt_limited", 
    "vacuum_stmt", "column_def", "type_name", "column_constraint", "column_constraint_primary_key", 
    "column_constraint_foreign_key", "column_constraint_not_null", "column_constraint_null", 
    "column_default", "column_default_value", "conflict_clause", "expr", 
    "foreign_key_clause", "fk_target_column_name", "raise_function", "indexed_column", 
    "table_constraint", "table_constraint_primary_key", "table_constraint_foreign_key", 
    "table_constraint_unique", "table_constraint_key", "fk_origin_column_name", 
    "with_clause", "qualified_table_name", "ordering_term", "pragma_value", 
    "common_table_expression", "result_column", "table_or_subquery", "join_clause", 
    "join_operator", "join_constraint", "select_core", "compound_operator", 
    "cte_table_name", "signed_number", "literal_value", "unary_operator", 
    "error_message", "module_argument", "column_alias", "keyword", "unknown", 
    "name", "function_name", "database_name", "source_table_name", "table_name", 
    "table_or_index_name", "new_table_name", "column_name", "collation_name", 
    "foreign_table", "index_name", "trigger_name", "view_name", "module_name", 
    "pragma_name", "savepoint_name", "table_alias", "transaction_name", 
    "any_name",
  }
  staticData.predictionContextCache = antlr.NewPredictionContextCache()
  staticData.serializedATN = []int32{
	4, 1, 161, 1866, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 
	7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 
	7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 
	15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 
	2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 
	26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 
	7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 
	36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 
	2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 
	47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 
	7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 
	57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 
	2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 
	68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 
	7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 
	78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 
	2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 
	89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 
	7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 1, 0, 1, 0, 5, 0, 199, 
	8, 0, 10, 0, 12, 0, 202, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 5, 2, 
	210, 8, 2, 10, 2, 12, 2, 213, 9, 2, 1, 2, 1, 2, 4, 2, 217, 8, 2, 11, 2, 
	12, 2, 218, 1, 2, 5, 2, 222, 8, 2, 10, 2, 12, 2, 225, 9, 2, 1, 2, 5, 2, 
	228, 8, 2, 10, 2, 12, 2, 231, 9, 2, 1, 3, 1, 3, 1, 3, 3, 3, 236, 8, 3, 
	3, 3, 238, 8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 270, 8, 3, 
	1, 4, 1, 4, 1, 4, 3, 4, 275, 8, 4, 1, 4, 1, 4, 1, 4, 3, 4, 280, 8, 4, 1, 
	4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 290, 8, 4, 1, 4, 3, 
	4, 293, 8, 4, 1, 4, 3, 4, 296, 8, 4, 1, 4, 3, 4, 299, 8, 4, 1, 5, 1, 5, 
	1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 
	1, 7, 3, 7, 316, 8, 7, 1, 8, 1, 8, 3, 8, 320, 8, 8, 1, 8, 1, 8, 1, 8, 1, 
	8, 1, 9, 1, 9, 3, 9, 328, 8, 9, 1, 9, 1, 9, 3, 9, 332, 8, 9, 3, 9, 334, 
	8, 9, 1, 10, 1, 10, 1, 10, 3, 10, 339, 8, 10, 3, 10, 341, 8, 10, 1, 11, 
	1, 11, 3, 11, 345, 8, 11, 1, 11, 1, 11, 1, 11, 5, 11, 350, 8, 11, 10, 11, 
	12, 11, 353, 9, 11, 3, 11, 355, 8, 11, 1, 11, 1, 11, 1, 11, 3, 11, 360, 
	8, 11, 1, 11, 1, 11, 3, 11, 364, 8, 11, 1, 11, 4, 11, 367, 8, 11, 11, 11, 
	12, 11, 368, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 376, 8, 11, 10, 
	11, 12, 11, 379, 9, 11, 3, 11, 381, 8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 
	3, 11, 387, 8, 11, 3, 11, 389, 8, 11, 1, 12, 1, 12, 3, 12, 393, 8, 12, 
	1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 399, 8, 12, 1, 12, 1, 12, 1, 12, 3, 
	12, 404, 8, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 5, 12, 
	413, 8, 12, 10, 12, 12, 12, 416, 9, 12, 1, 12, 1, 12, 1, 12, 3, 12, 421, 
	8, 12, 1, 13, 1, 13, 3, 13, 425, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 
	13, 431, 8, 13, 1, 13, 1, 13, 1, 13, 3, 13, 436, 8, 13, 1, 13, 1, 13, 1, 
	13, 1, 13, 1, 13, 1, 13, 1, 13, 5, 13, 445, 8, 13, 10, 13, 12, 13, 448, 
	9, 13, 1, 13, 1, 13, 1, 13, 3, 13, 453, 8, 13, 1, 13, 1, 13, 3, 13, 457, 
	8, 13, 1, 13, 3, 13, 460, 8, 13, 1, 14, 1, 14, 3, 14, 464, 8, 14, 1, 14, 
	1, 14, 1, 14, 1, 14, 3, 14, 470, 8, 14, 1, 14, 1, 14, 1, 14, 3, 14, 475, 
	8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 482, 8, 14, 1, 14, 1, 
	14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 491, 8, 14, 10, 14, 12, 14, 
	494, 9, 14, 3, 14, 496, 8, 14, 3, 14, 498, 8, 14, 1, 14, 1, 14, 1, 14, 
	1, 14, 3, 14, 504, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 510, 8, 14, 
	1, 14, 1, 14, 3, 14, 514, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 
	14, 521, 8, 14, 1, 14, 1, 14, 4, 14, 525, 8, 14, 11, 14, 12, 14, 526, 1, 
	14, 1, 14, 1, 15, 1, 15, 3, 15, 533, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 
	3, 15, 539, 8, 15, 1, 15, 1, 15, 1, 15, 3, 15, 544, 8, 15, 1, 15, 1, 15, 
	1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 556, 8, 
	16, 1, 16, 1, 16, 1, 16, 3, 16, 561, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 
	1, 16, 1, 16, 1, 16, 5, 16, 570, 8, 16, 10, 16, 12, 16, 573, 9, 16, 1, 
	16, 1, 16, 3, 16, 577, 8, 16, 1, 17, 3, 17, 580, 8, 17, 1, 17, 1, 17, 1, 
	17, 1, 17, 1, 17, 3, 17, 587, 8, 17, 1, 18, 3, 18, 590, 8, 18, 1, 18, 1, 
	18, 1, 18, 1, 18, 1, 18, 3, 18, 597, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 
	1, 18, 5, 18, 604, 8, 18, 10, 18, 12, 18, 607, 9, 18, 3, 18, 609, 8, 18, 
	1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 615, 8, 18, 3, 18, 617, 8, 18, 1, 19, 
	1, 19, 3, 19, 621, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 3, 
	20, 629, 8, 20, 1, 20, 1, 20, 1, 20, 3, 20, 634, 8, 20, 1, 20, 1, 20, 1, 
	21, 1, 21, 1, 21, 1, 21, 3, 21, 642, 8, 21, 1, 21, 1, 21, 1, 21, 3, 21, 
	647, 8, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 655, 8, 22, 
	1, 22, 1, 22, 1, 22, 3, 22, 660, 8, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 
	23, 1, 23, 3, 23, 668, 8, 23, 1, 23, 1, 23, 1, 23, 3, 23, 673, 8, 23, 1, 
	23, 1, 23, 1, 24, 1, 24, 3, 24, 679, 8, 24, 1, 24, 1, 24, 1, 24, 5, 24, 
	684, 8, 24, 10, 24, 12, 24, 687, 9, 24, 3, 24, 689, 8, 24, 1, 24, 1, 24, 
	1, 24, 1, 24, 5, 24, 695, 8, 24, 10, 24, 12, 24, 698, 9, 24, 1, 24, 1, 
	24, 1, 24, 1, 24, 1, 24, 5, 24, 705, 8, 24, 10, 24, 12, 24, 708, 9, 24, 
	3, 24, 710, 8, 24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 716, 8, 24, 3, 24, 
	718, 8, 24, 1, 25, 3, 25, 721, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 
	1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 
	25, 1, 25, 3, 25, 740, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 746, 8, 
	25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 5, 25, 753, 8, 25, 10, 25, 12, 25, 
	756, 9, 25, 1, 25, 1, 25, 3, 25, 760, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 
	1, 25, 5, 25, 767, 8, 25, 10, 25, 12, 25, 770, 9, 25, 1, 25, 1, 25, 1, 
	25, 1, 25, 1, 25, 1, 25, 5, 25, 778, 8, 25, 10, 25, 12, 25, 781, 9, 25, 
	1, 25, 1, 25, 5, 25, 785, 8, 25, 10, 25, 12, 25, 788, 9, 25, 1, 25, 1, 
	25, 1, 25, 3, 25, 793, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 799, 8, 
	26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 808, 8, 26, 
	1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 815, 8, 27, 1, 27, 1, 27, 3, 
	27, 819, 8, 27, 3, 27, 821, 8, 27, 1, 28, 1, 28, 3, 28, 825, 8, 28, 1, 
	28, 1, 28, 1, 29, 1, 29, 1, 29, 3, 29, 832, 8, 29, 3, 29, 834, 8, 29, 1, 
	29, 1, 29, 3, 29, 838, 8, 29, 1, 29, 3, 29, 841, 8, 29, 1, 30, 1, 30, 1, 
	30, 1, 31, 1, 31, 3, 31, 848, 8, 31, 1, 31, 1, 31, 1, 31, 5, 31, 853, 8, 
	31, 10, 31, 12, 31, 856, 9, 31, 3, 31, 858, 8, 31, 1, 31, 1, 31, 1, 31, 
	1, 31, 1, 31, 1, 31, 5, 31, 866, 8, 31, 10, 31, 12, 31, 869, 9, 31, 3, 
	31, 871, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 877, 8, 31, 3, 31, 879, 
	8, 31, 1, 32, 1, 32, 3, 32, 883, 8, 32, 1, 32, 1, 32, 1, 32, 5, 32, 888, 
	8, 32, 10, 32, 12, 32, 891, 9, 32, 3, 32, 893, 8, 32, 1, 32, 1, 32, 1, 
	32, 1, 32, 5, 32, 899, 8, 32, 10, 32, 12, 32, 902, 9, 32, 1, 32, 1, 32, 
	1, 32, 1, 32, 1, 32, 5, 32, 909, 8, 32, 10, 32, 12, 32, 912, 9, 32, 3, 
	32, 914, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 920, 8, 32, 3, 32, 922, 
	8, 32, 1, 33, 1, 33, 3, 33, 926, 8, 33, 1, 33, 1, 33, 1, 33, 5, 33, 931, 
	8, 33, 10, 33, 12, 33, 934, 9, 33, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 940, 
	8, 33, 10, 33, 12, 33, 943, 9, 33, 1, 33, 3, 33, 946, 8, 33, 3, 33, 948, 
	8, 33, 1, 33, 1, 33, 3, 33, 952, 8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 
	33, 5, 33, 959, 8, 33, 10, 33, 12, 33, 962, 9, 33, 1, 33, 1, 33, 3, 33, 
	966, 8, 33, 3, 33, 968, 8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 
	975, 8, 33, 10, 33, 12, 33, 978, 9, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 
	33, 1, 33, 5, 33, 986, 8, 33, 10, 33, 12, 33, 989, 9, 33, 1, 33, 1, 33, 
	5, 33, 993, 8, 33, 10, 33, 12, 33, 996, 9, 33, 3, 33, 998, 8, 33, 1, 34, 
	3, 34, 1001, 8, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 
	34, 1, 34, 1, 34, 1, 34, 3, 34, 1014, 8, 34, 1, 34, 1, 34, 1, 34, 1, 34, 
	1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 1026, 8, 34, 10, 34, 12, 
	34, 1029, 9, 34, 1, 34, 1, 34, 3, 34, 1033, 8, 34, 1, 35, 3, 35, 1036, 
	8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 
	35, 1, 35, 3, 35, 1049, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 
	1, 35, 1, 35, 1, 35, 1, 35, 5, 35, 1061, 8, 35, 10, 35, 12, 35, 1064, 9, 
	35, 1, 35, 1, 35, 3, 35, 1068, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 
	5, 35, 1075, 8, 35, 10, 35, 12, 35, 1078, 9, 35, 3, 35, 1080, 8, 35, 1, 
	35, 1, 35, 1, 35, 1, 35, 3, 35, 1086, 8, 35, 3, 35, 1088, 8, 35, 1, 36, 
	1, 36, 1, 37, 1, 37, 1, 37, 5, 37, 1095, 8, 37, 10, 37, 12, 37, 1098, 9, 
	37, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1104, 8, 38, 1, 38, 1, 38, 1, 38, 
	1, 38, 1, 38, 3, 38, 1111, 8, 38, 1, 38, 1, 38, 1, 38, 3, 38, 1116, 8, 
	38, 1, 38, 1, 38, 3, 38, 1120, 8, 38, 1, 39, 1, 39, 3, 39, 1124, 8, 39, 
	1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 
	39, 1, 39, 1, 39, 1, 39, 3, 39, 1140, 8, 39, 1, 40, 1, 40, 1, 40, 3, 40, 
	1145, 8, 40, 1, 40, 1, 40, 3, 40, 1149, 8, 40, 1, 41, 1, 41, 1, 42, 1, 
	42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 
	1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 1172, 8, 44, 1, 
	44, 1, 44, 4, 44, 1176, 8, 44, 11, 44, 12, 44, 1177, 3, 44, 1180, 8, 44, 
	1, 45, 1, 45, 3, 45, 1184, 8, 45, 1, 46, 1, 46, 1, 46, 3, 46, 1189, 8, 
	46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1197, 8, 47, 1, 47, 
	1, 47, 1, 47, 3, 47, 1202, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 3, 47, 1211, 8, 47, 1, 47, 1, 47, 1, 47, 5, 47, 1216, 8, 47, 
	10, 47, 12, 47, 1219, 9, 47, 1, 47, 3, 47, 1222, 8, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
	1, 47, 3, 47, 1238, 8, 47, 1, 47, 3, 47, 1241, 8, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 1, 47, 1, 47, 3, 47, 1249, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
	1, 47, 4, 47, 1256, 8, 47, 11, 47, 12, 47, 1257, 1, 47, 1, 47, 3, 47, 1262, 
	8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1267, 8, 47, 1, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
	1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 1, 47, 1, 47, 3, 47, 1297, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
	1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1309, 8, 47, 1, 47, 1, 
	47, 1, 47, 3, 47, 1314, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 
	1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1326, 8, 47, 1, 47, 1, 47, 1, 47, 1, 
	47, 3, 47, 1332, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1339, 
	8, 47, 1, 47, 1, 47, 3, 47, 1343, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 
	47, 1, 47, 5, 47, 1351, 8, 47, 10, 47, 12, 47, 1354, 9, 47, 3, 47, 1356, 
	8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1362, 8, 47, 1, 47, 3, 47, 1365, 
	8, 47, 5, 47, 1367, 8, 47, 10, 47, 12, 47, 1370, 9, 47, 1, 48, 1, 48, 1, 
	48, 1, 48, 3, 48, 1376, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 5, 48, 
	1383, 8, 48, 10, 48, 12, 48, 1386, 9, 48, 1, 48, 1, 48, 3, 48, 1390, 8, 
	48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 
	3, 48, 1402, 8, 48, 1, 48, 1, 48, 3, 48, 1406, 8, 48, 5, 48, 1408, 8, 48, 
	10, 48, 12, 48, 1411, 9, 48, 1, 48, 3, 48, 1414, 8, 48, 1, 48, 1, 48, 1, 
	48, 1, 48, 1, 48, 3, 48, 1421, 8, 48, 1, 48, 3, 48, 1424, 8, 48, 3, 48, 
	1426, 8, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 
	50, 1436, 8, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 3, 51, 1443, 8, 51, 
	1, 51, 3, 51, 1446, 8, 51, 1, 52, 1, 52, 3, 52, 1450, 8, 52, 1, 52, 1, 
	52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1461, 8, 52, 
	1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 5, 53, 1469, 8, 53, 10, 53, 12, 
	53, 1472, 9, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 
	1, 54, 5, 54, 1483, 8, 54, 10, 54, 12, 54, 1486, 9, 54, 1, 54, 1, 54, 1, 
	54, 1, 55, 1, 55, 3, 55, 1493, 8, 55, 1, 55, 3, 55, 1496, 8, 55, 1, 55, 
	1, 55, 1, 55, 1, 55, 5, 55, 1502, 8, 55, 10, 55, 12, 55, 1505, 9, 55, 1, 
	55, 1, 55, 1, 55, 1, 56, 1, 56, 3, 56, 1512, 8, 56, 1, 56, 1, 56, 1, 56, 
	1, 56, 5, 56, 1518, 8, 56, 10, 56, 12, 56, 1521, 9, 56, 1, 56, 1, 56, 1, 
	56, 1, 57, 1, 57, 1, 58, 1, 58, 3, 58, 1530, 8, 58, 1, 58, 1, 58, 1, 58, 
	1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 5, 58, 1544, 
	8, 58, 10, 58, 12, 58, 1547, 9, 58, 1, 59, 1, 59, 1, 59, 3, 59, 1552, 8, 
	59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1560, 8, 59, 1, 60, 
	1, 60, 1, 60, 3, 60, 1565, 8, 60, 1, 60, 3, 60, 1568, 8, 60, 1, 61, 1, 
	61, 1, 61, 3, 61, 1573, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 
	1580, 8, 62, 10, 62, 12, 62, 1583, 9, 62, 1, 62, 1, 62, 3, 62, 1587, 8, 
	62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 
	1, 63, 1, 63, 3, 63, 1601, 8, 63, 1, 63, 3, 63, 1604, 8, 63, 3, 63, 1606, 
	8, 63, 1, 64, 1, 64, 1, 64, 3, 64, 1611, 8, 64, 1, 64, 1, 64, 3, 64, 1615, 
	8, 64, 1, 64, 3, 64, 1618, 8, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 3, 
	64, 1625, 8, 64, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 1631, 8, 64, 10, 64, 
	12, 64, 1634, 9, 64, 1, 64, 3, 64, 1637, 8, 64, 1, 64, 1, 64, 3, 64, 1641, 
	8, 64, 1, 64, 3, 64, 1644, 8, 64, 1, 64, 1, 64, 1, 64, 1, 64, 3, 64, 1650, 
	8, 64, 1, 64, 3, 64, 1653, 8, 64, 3, 64, 1655, 8, 64, 1, 65, 1, 65, 1, 
	65, 1, 65, 1, 65, 5, 65, 1662, 8, 65, 10, 65, 12, 65, 1665, 9, 65, 1, 66, 
	1, 66, 3, 66, 1669, 8, 66, 1, 66, 1, 66, 3, 66, 1673, 8, 66, 1, 66, 1, 
	66, 3, 66, 1677, 8, 66, 1, 66, 3, 66, 1680, 8, 66, 1, 67, 1, 67, 1, 67, 
	1, 67, 1, 67, 1, 67, 1, 67, 5, 67, 1689, 8, 67, 10, 67, 12, 67, 1692, 9, 
	67, 1, 67, 1, 67, 3, 67, 1696, 8, 67, 1, 68, 1, 68, 3, 68, 1700, 8, 68, 
	1, 68, 1, 68, 1, 68, 5, 68, 1705, 8, 68, 10, 68, 12, 68, 1708, 9, 68, 1, 
	68, 1, 68, 1, 68, 1, 68, 5, 68, 1714, 8, 68, 10, 68, 12, 68, 1717, 9, 68, 
	1, 68, 3, 68, 1720, 8, 68, 3, 68, 1722, 8, 68, 1, 68, 1, 68, 3, 68, 1726, 
	8, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 1733, 8, 68, 10, 68, 12, 
	68, 1736, 9, 68, 1, 68, 1, 68, 3, 68, 1740, 8, 68, 3, 68, 1742, 8, 68, 
	1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 1749, 8, 68, 10, 68, 12, 68, 
	1752, 9, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 1760, 8, 
	68, 10, 68, 12, 68, 1763, 9, 68, 1, 68, 1, 68, 5, 68, 1767, 8, 68, 10, 
	68, 12, 68, 1770, 9, 68, 3, 68, 1772, 8, 68, 1, 69, 1, 69, 1, 69, 1, 69, 
	1, 69, 3, 69, 1779, 8, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 5, 70, 1786, 
	8, 70, 10, 70, 12, 70, 1789, 9, 70, 1, 70, 1, 70, 3, 70, 1793, 8, 70, 1, 
	71, 3, 71, 1796, 8, 71, 1, 71, 1, 71, 3, 71, 1800, 8, 71, 1, 72, 1, 72, 
	1, 73, 1, 73, 1, 74, 1, 74, 1, 75, 1, 75, 3, 75, 1810, 8, 75, 1, 76, 1, 
	76, 1, 77, 1, 77, 1, 78, 4, 78, 1817, 8, 78, 11, 78, 12, 78, 1818, 1, 79, 
	1, 79, 1, 80, 1, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 
	84, 1, 85, 1, 85, 1, 86, 1, 86, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 
	1, 90, 1, 90, 1, 91, 1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 94, 1, 94, 1, 
	95, 1, 95, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 
	3, 97, 1864, 8, 97, 1, 97, 0, 1, 94, 98, 0, 2, 4, 6, 8, 10, 12, 14, 16, 
	18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 
	54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 
	90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 
	182, 184, 186, 188, 190, 192, 194, 0, 18, 3, 0, 59, 59, 71, 71, 84, 84, 
	2, 0, 48, 48, 67, 67, 2, 0, 6, 6, 109, 109, 1, 0, 135, 136, 2, 0, 30, 30, 
	63, 63, 2, 0, 35, 35, 61, 61, 5, 0, 26, 26, 74, 74, 83, 83, 126, 126, 129, 
	129, 2, 0, 8, 8, 13, 14, 1, 0, 9, 10, 1, 0, 15, 18, 1, 0, 19, 22, 4, 0, 
	79, 79, 99, 99, 101, 101, 122, 122, 2, 0, 60, 60, 143, 143, 3, 0, 26, 26, 
	74, 74, 129, 129, 4, 0, 53, 55, 107, 107, 154, 154, 156, 157, 2, 0, 9, 
	11, 105, 105, 2, 0, 153, 153, 156, 156, 2, 0, 26, 110, 112, 152, 2141, 
	0, 200, 1, 0, 0, 0, 2, 205, 1, 0, 0, 0, 4, 211, 1, 0, 0, 0, 6, 237, 1, 
	0, 0, 0, 8, 271, 1, 0, 0, 0, 10, 300, 1, 0, 0, 0, 12, 305, 1, 0, 0, 0, 
	14, 308, 1, 0, 0, 0, 16, 317, 1, 0, 0, 0, 18, 325, 1, 0, 0, 0, 20, 335, 
	1, 0, 0, 0, 22, 354, 1, 0, 0, 0, 24, 390, 1, 0, 0, 0, 26, 422, 1, 0, 0, 
	0, 28, 461, 1, 0, 0, 0, 30, 530, 1, 0, 0, 0, 32, 549, 1, 0, 0, 0, 34, 579, 
	1, 0, 0, 0, 36, 589, 1, 0, 0, 0, 38, 618, 1, 0, 0, 0, 40, 624, 1, 0, 0, 
	0, 42, 637, 1, 0, 0, 0, 44, 650, 1, 0, 0, 0, 46, 663, 1, 0, 0, 0, 48, 688, 
	1, 0, 0, 0, 50, 720, 1, 0, 0, 0, 52, 794, 1, 0, 0, 0, 54, 809, 1, 0, 0, 
	0, 56, 822, 1, 0, 0, 0, 58, 828, 1, 0, 0, 0, 60, 842, 1, 0, 0, 0, 62, 857, 
	1, 0, 0, 0, 64, 892, 1, 0, 0, 0, 66, 997, 1, 0, 0, 0, 68, 1000, 1, 0, 0, 
	0, 70, 1035, 1, 0, 0, 0, 72, 1089, 1, 0, 0, 0, 74, 1091, 1, 0, 0, 0, 76, 
	1099, 1, 0, 0, 0, 78, 1123, 1, 0, 0, 0, 80, 1141, 1, 0, 0, 0, 82, 1150, 
	1, 0, 0, 0, 84, 1152, 1, 0, 0, 0, 86, 1156, 1, 0, 0, 0, 88, 1159, 1, 0, 
	0, 0, 90, 1183, 1, 0, 0, 0, 92, 1188, 1, 0, 0, 0, 94, 1266, 1, 0, 0, 0, 
	96, 1371, 1, 0, 0, 0, 98, 1427, 1, 0, 0, 0, 100, 1429, 1, 0, 0, 0, 102, 
	1439, 1, 0, 0, 0, 104, 1449, 1, 0, 0, 0, 106, 1462, 1, 0, 0, 0, 108, 1476, 
	1, 0, 0, 0, 110, 1490, 1, 0, 0, 0, 112, 1509, 1, 0, 0, 0, 114, 1525, 1, 
	0, 0, 0, 116, 1527, 1, 0, 0, 0, 118, 1551, 1, 0, 0, 0, 120, 1561, 1, 0, 
	0, 0, 122, 1572, 1, 0, 0, 0, 124, 1574, 1, 0, 0, 0, 126, 1605, 1, 0, 0, 
	0, 128, 1654, 1, 0, 0, 0, 130, 1656, 1, 0, 0, 0, 132, 1679, 1, 0, 0, 0, 
	134, 1695, 1, 0, 0, 0, 136, 1771, 1, 0, 0, 0, 138, 1778, 1, 0, 0, 0, 140, 
	1780, 1, 0, 0, 0, 142, 1799, 1, 0, 0, 0, 144, 1801, 1, 0, 0, 0, 146, 1803, 
	1, 0, 0, 0, 148, 1805, 1, 0, 0, 0, 150, 1809, 1, 0, 0, 0, 152, 1811, 1, 
	0, 0, 0, 154, 1813, 1, 0, 0, 0, 156, 1816, 1, 0, 0, 0, 158, 1820, 1, 0, 
	0, 0, 160, 1822, 1, 0, 0, 0, 162, 1824, 1, 0, 0, 0, 164, 1826, 1, 0, 0, 
	0, 166, 1828, 1, 0, 0, 0, 168, 1830, 1, 0, 0, 0, 170, 1832, 1, 0, 0, 0, 
	172, 1834, 1, 0, 0, 0, 174, 1836, 1, 0, 0, 0, 176, 1838, 1, 0, 0, 0, 178, 
	1840, 1, 0, 0, 0, 180, 1842, 1, 0, 0, 0, 182, 1844, 1, 0, 0, 0, 184, 1846, 
	1, 0, 0, 0, 186, 1848, 1, 0, 0, 0, 188, 1850, 1, 0, 0, 0, 190, 1852, 1, 
	0, 0, 0, 192, 1854, 1, 0, 0, 0, 194, 1863, 1, 0, 0, 0, 196, 199, 3, 4, 
	2, 0, 197, 199, 3, 2, 1, 0, 198, 196, 1, 0, 0, 0, 198, 197, 1, 0, 0, 0, 
	199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 
	203, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 203, 204, 5, 0, 0, 1, 204, 1, 1, 
	0, 0, 0, 205, 206, 5, 161, 0, 0, 206, 207, 6, 1, -1, 0, 207, 3, 1, 0, 0, 
	0, 208, 210, 5, 2, 0, 0, 209, 208, 1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 
	209, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 214, 1, 0, 0, 0, 213, 211, 
	1, 0, 0, 0, 214, 223, 3, 6, 3, 0, 215, 217, 5, 2, 0, 0, 216, 215, 1, 0, 
	0, 0, 217, 218, 1, 0, 0, 0, 218, 216, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 
	219, 220, 1, 0, 0, 0, 220, 222, 3, 6, 3, 0, 221, 216, 1, 0, 0, 0, 222, 
	225, 1, 0, 0, 0, 223, 221, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0, 224, 229, 
	1, 0, 0, 0, 225, 223, 1, 0, 0, 0, 226, 228, 5, 2, 0, 0, 227, 226, 1, 0, 
	0, 0, 228, 231, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 
	230, 5, 1, 0, 0, 0, 231, 229, 1, 0, 0, 0, 232, 235, 5, 73, 0, 0, 233, 234, 
	5, 118, 0, 0, 234, 236, 5, 115, 0, 0, 235, 233, 1, 0, 0, 0, 235, 236, 1, 
	0, 0, 0, 236, 238, 1, 0, 0, 0, 237, 232, 1, 0, 0, 0, 237, 238, 1, 0, 0, 
	0, 238, 269, 1, 0, 0, 0, 239, 270, 3, 8, 4, 0, 240, 270, 3, 14, 7, 0, 241, 
	270, 3, 16, 8, 0, 242, 270, 3, 18, 9, 0, 243, 270, 3, 20, 10, 0, 244, 270, 
	3, 22, 11, 0, 245, 270, 3, 24, 12, 0, 246, 270, 3, 26, 13, 0, 247, 270, 
	3, 28, 14, 0, 248, 270, 3, 30, 15, 0, 249, 270, 3, 32, 16, 0, 250, 270, 
	3, 34, 17, 0, 251, 270, 3, 36, 18, 0, 252, 270, 3, 38, 19, 0, 253, 270, 
	3, 40, 20, 0, 254, 270, 3, 42, 21, 0, 255, 270, 3, 44, 22, 0, 256, 270, 
	3, 46, 23, 0, 257, 270, 3, 48, 24, 0, 258, 270, 3, 50, 25, 0, 259, 270, 
	3, 52, 26, 0, 260, 270, 3, 54, 27, 0, 261, 270, 3, 56, 28, 0, 262, 270, 
	3, 58, 29, 0, 263, 270, 3, 60, 30, 0, 264, 270, 3, 62, 31, 0, 265, 270, 
	3, 64, 32, 0, 266, 270, 3, 68, 34, 0, 267, 270, 3, 70, 35, 0, 268, 270, 
	3, 72, 36, 0, 269, 239, 1, 0, 0, 0, 269, 240, 1, 0, 0, 0, 269, 241, 1, 
	0, 0, 0, 269, 242, 1, 0, 0, 0, 269, 243, 1, 0, 0, 0, 269, 244, 1, 0, 0, 
	0, 269, 245, 1, 0, 0, 0, 269, 246, 1, 0, 0, 0, 269, 247, 1, 0, 0, 0, 269, 
	248, 1, 0, 0, 0, 269, 249, 1, 0, 0, 0, 269, 250, 1, 0, 0, 0, 269, 251, 
	1, 0, 0, 0, 269, 252, 1, 0, 0, 0, 269, 253, 1, 0, 0, 0, 269, 254, 1, 0, 
	0, 0, 269, 255, 1, 0, 0, 0, 269, 256, 1, 0, 0, 0, 269, 257, 1, 0, 0, 0, 
	269, 258, 1, 0, 0, 0, 269, 259, 1, 0, 0, 0, 269, 260, 1, 0, 0, 0, 269, 
	261, 1, 0, 0, 0, 269, 262, 1, 0, 0, 0, 269, 263, 1, 0, 0, 0, 269, 264, 
	1, 0, 0, 0, 269, 265, 1, 0, 0, 0, 269, 266, 1, 0, 0, 0, 269, 267, 1, 0, 
	0, 0, 269, 268, 1, 0, 0, 0, 270, 7, 1, 0, 0, 0, 271, 272, 5, 31, 0, 0, 
	272, 274, 5, 134, 0, 0, 273, 275, 5, 111, 0, 0, 274, 273, 1, 0, 0, 0, 274, 
	275, 1, 0, 0, 0, 275, 279, 1, 0, 0, 0, 276, 277, 3, 162, 81, 0, 277, 278, 
	5, 3, 0, 0, 278, 280, 1, 0, 0, 0, 279, 276, 1, 0, 0, 0, 279, 280, 1, 0, 
	0, 0, 280, 281, 1, 0, 0, 0, 281, 292, 3, 164, 82, 0, 282, 283, 5, 125, 
	0, 0, 283, 284, 5, 138, 0, 0, 284, 293, 3, 170, 85, 0, 285, 293, 3, 12, 
	6, 0, 286, 293, 3, 10, 5, 0, 287, 289, 5, 28, 0, 0, 288, 290, 5, 47, 0, 
	0, 289, 288, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 291, 1, 0, 0, 0, 291, 
	293, 3, 74, 37, 0, 292, 282, 1, 0, 0, 0, 292, 285, 1, 0, 0, 0, 292, 286, 
	1, 0, 0, 0, 292, 287, 1, 0, 0, 0, 293, 295, 1, 0, 0, 0, 294, 296, 5, 68, 
	0, 0, 295, 294, 1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296, 298, 1, 0, 0, 0, 
	297, 299, 3, 156, 78, 0, 298, 297, 1, 0, 0, 0, 298, 299, 1, 0, 0, 0, 299, 
	9, 1, 0, 0, 0, 300, 301, 5, 28, 0, 0, 301, 302, 5, 50, 0, 0, 302, 303, 
	3, 194, 97, 0, 303, 304, 3, 104, 52, 0, 304, 11, 1, 0, 0, 0, 305, 306, 
	5, 28, 0, 0, 306, 307, 3, 104, 52, 0, 307, 13, 1, 0, 0, 0, 308, 315, 5, 
	32, 0, 0, 309, 316, 3, 162, 81, 0, 310, 316, 3, 168, 84, 0, 311, 312, 3, 
	162, 81, 0, 312, 313, 5, 3, 0, 0, 313, 314, 3, 168, 84, 0, 314, 316, 1, 
	0, 0, 0, 315, 309, 1, 0, 0, 0, 315, 310, 1, 0, 0, 0, 315, 311, 1, 0, 0, 
	0, 315, 316, 1, 0, 0, 0, 316, 15, 1, 0, 0, 0, 317, 319, 5, 36, 0, 0, 318, 
	320, 5, 56, 0, 0, 319, 318, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 321, 
	1, 0, 0, 0, 321, 322, 3, 94, 47, 0, 322, 323, 5, 34, 0, 0, 323, 324, 3, 
	162, 81, 0, 324, 17, 1, 0, 0, 0, 325, 327, 5, 39, 0, 0, 326, 328, 7, 0, 
	0, 0, 327, 326, 1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 333, 1, 0, 0, 0, 
	329, 331, 5, 139, 0, 0, 330, 332, 3, 192, 96, 0, 331, 330, 1, 0, 0, 0, 
	331, 332, 1, 0, 0, 0, 332, 334, 1, 0, 0, 0, 333, 329, 1, 0, 0, 0, 333, 
	334, 1, 0, 0, 0, 334, 19, 1, 0, 0, 0, 335, 340, 7, 1, 0, 0, 336, 338, 5, 
	139, 0, 0, 337, 339, 3, 192, 96, 0, 338, 337, 1, 0, 0, 0, 338, 339, 1, 
	0, 0, 0, 339, 341, 1, 0, 0, 0, 340, 336, 1, 0, 0, 0, 340, 341, 1, 0, 0, 
	0, 341, 21, 1, 0, 0, 0, 342, 344, 5, 151, 0, 0, 343, 345, 5, 120, 0, 0, 
	344, 343, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346, 
	351, 3, 124, 62, 0, 347, 348, 5, 6, 0, 0, 348, 350, 3, 124, 62, 0, 349, 
	347, 1, 0, 0, 0, 350, 353, 1, 0, 0, 0, 351, 349, 1, 0, 0, 0, 351, 352, 
	1, 0, 0, 0, 352, 355, 1, 0, 0, 0, 353, 351, 1, 0, 0, 0, 354, 342, 1, 0, 
	0, 0, 354, 355, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 366, 3, 136, 68, 
	0, 357, 359, 5, 141, 0, 0, 358, 360, 5, 30, 0, 0, 359, 358, 1, 0, 0, 0, 
	359, 360, 1, 0, 0, 0, 360, 364, 1, 0, 0, 0, 361, 364, 5, 92, 0, 0, 362, 
	364, 5, 70, 0, 0, 363, 357, 1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 363, 362, 
	1, 0, 0, 0, 364, 365, 1, 0, 0, 0, 365, 367, 3, 136, 68, 0, 366, 363, 1, 
	0, 0, 0, 367, 368, 1, 0, 0, 0, 368, 366, 1, 0, 0, 0, 368, 369, 1, 0, 0, 
	0, 369, 380, 1, 0, 0, 0, 370, 371, 5, 113, 0, 0, 371, 372, 5, 41, 0, 0, 
	372, 377, 3, 120, 60, 0, 373, 374, 5, 6, 0, 0, 374, 376, 3, 120, 60, 0, 
	375, 373, 1, 0, 0, 0, 376, 379, 1, 0, 0, 0, 377, 375, 1, 0, 0, 0, 377, 
	378, 1, 0, 0, 0, 378, 381, 1, 0, 0, 0, 379, 377, 1, 0, 0, 0, 380, 370, 
	1, 0, 0, 0, 380, 381, 1, 0, 0, 0, 381, 388, 1, 0, 0, 0, 382, 383, 5, 100, 
	0, 0, 383, 386, 3, 94, 47, 0, 384, 385, 7, 2, 0, 0, 385, 387, 3, 94, 47, 
	0, 386, 384, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387, 389, 1, 0, 0, 0, 388, 
	382, 1, 0, 0, 0, 388, 389, 1, 0, 0, 0, 389, 23, 1, 0, 0, 0, 390, 392, 5, 
	51, 0, 0, 391, 393, 5, 142, 0, 0, 392, 391, 1, 0, 0, 0, 392, 393, 1, 0, 
	0, 0, 393, 394, 1, 0, 0, 0, 394, 398, 5, 86, 0, 0, 395, 396, 5, 82, 0, 
	0, 396, 397, 5, 105, 0, 0, 397, 399, 5, 72, 0, 0, 398, 395, 1, 0, 0, 0, 
	398, 399, 1, 0, 0, 0, 399, 403, 1, 0, 0, 0, 400, 401, 3, 162, 81, 0, 401, 
	402, 5, 3, 0, 0, 402, 404, 1, 0, 0, 0, 403, 400, 1, 0, 0, 0, 403, 404, 
	1, 0, 0, 0, 404, 405, 1, 0, 0, 0, 405, 406, 3, 178, 89, 0, 406, 407, 5, 
	110, 0, 0, 407, 408, 3, 166, 83, 0, 408, 409, 5, 4, 0, 0, 409, 414, 3, 
	102, 51, 0, 410, 411, 5, 6, 0, 0, 411, 413, 3, 102, 51, 0, 412, 410, 1, 
	0, 0, 0, 413, 416, 1, 0, 0, 0, 414, 412, 1, 0, 0, 0, 414, 415, 1, 0, 0, 
	0, 415, 417, 1, 0, 0, 0, 416, 414, 1, 0, 0, 0, 417, 420, 5, 5, 0, 0, 418, 
	419, 5, 150, 0, 0, 419, 421, 3, 94, 47, 0, 420, 418, 1, 0, 0, 0, 420, 421, 
	1, 0, 0, 0, 421, 25, 1, 0, 0, 0, 422, 424, 5, 51, 0, 0, 423, 425, 7, 3, 
	0, 0, 424, 423, 1, 0, 0, 0, 424, 425, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 
	426, 430, 5, 134, 0, 0, 427, 428, 5, 82, 0, 0, 428, 429, 5, 105, 0, 0, 
	429, 431, 5, 72, 0, 0, 430, 427, 1, 0, 0, 0, 430, 431, 1, 0, 0, 0, 431, 
	435, 1, 0, 0, 0, 432, 433, 3, 162, 81, 0, 433, 434, 5, 3, 0, 0, 434, 436, 
	1, 0, 0, 0, 435, 432, 1, 0, 0, 0, 435, 436, 1, 0, 0, 0, 436, 437, 1, 0, 
	0, 0, 437, 456, 3, 166, 83, 0, 438, 439, 5, 4, 0, 0, 439, 446, 3, 74, 37, 
	0, 440, 441, 5, 6, 0, 0, 441, 445, 3, 104, 52, 0, 442, 443, 5, 6, 0, 0, 
	443, 445, 3, 74, 37, 0, 444, 440, 1, 0, 0, 0, 444, 442, 1, 0, 0, 0, 445, 
	448, 1, 0, 0, 0, 446, 444, 1, 0, 0, 0, 446, 447, 1, 0, 0, 0, 447, 449, 
	1, 0, 0, 0, 448, 446, 1, 0, 0, 0, 449, 452, 5, 5, 0, 0, 450, 451, 5, 152, 
	0, 0, 451, 453, 5, 153, 0, 0, 452, 450, 1, 0, 0, 0, 452, 453, 1, 0, 0, 
	0, 453, 457, 1, 0, 0, 0, 454, 455, 5, 34, 0, 0, 455, 457, 3, 64, 32, 0, 
	456, 438, 1, 0, 0, 0, 456, 454, 1, 0, 0, 0, 457, 459, 1, 0, 0, 0, 458, 
	460, 3, 156, 78, 0, 459, 458, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 27, 
	1, 0, 0, 0, 461, 463, 5, 51, 0, 0, 462, 464, 7, 3, 0, 0, 463, 462, 1, 0, 
	0, 0, 463, 464, 1, 0, 0, 0, 464, 465, 1, 0, 0, 0, 465, 469, 5, 140, 0, 
	0, 466, 467, 5, 82, 0, 0, 467, 468, 5, 105, 0, 0, 468, 470, 5, 72, 0, 0, 
	469, 466, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 474, 1, 0, 0, 0, 471, 
	472, 3, 162, 81, 0, 472, 473, 5, 3, 0, 0, 473, 475, 1, 0, 0, 0, 474, 471, 
	1, 0, 0, 0, 474, 475, 1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 481, 3, 180, 
	90, 0, 477, 482, 5, 38, 0, 0, 478, 482, 5, 29, 0, 0, 479, 480, 5, 91, 0, 
	0, 480, 482, 5, 108, 0, 0, 481, 477, 1, 0, 0, 0, 481, 478, 1, 0, 0, 0, 
	481, 479, 1, 0, 0, 0, 481, 482, 1, 0, 0, 0, 482, 497, 1, 0, 0, 0, 483, 
	498, 5, 60, 0, 0, 484, 498, 5, 90, 0, 0, 485, 495, 5, 143, 0, 0, 486, 487, 
	5, 108, 0, 0, 487, 492, 3, 172, 86, 0, 488, 489, 5, 6, 0, 0, 489, 491, 
	3, 172, 86, 0, 490, 488, 1, 0, 0, 0, 491, 494, 1, 0, 0, 0, 492, 490, 1, 
	0, 0, 0, 492, 493, 1, 0, 0, 0, 493, 496, 1, 0, 0, 0, 494, 492, 1, 0, 0, 
	0, 495, 486, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 498, 1, 0, 0, 0, 497, 
	483, 1, 0, 0, 0, 497, 484, 1, 0, 0, 0, 497, 485, 1, 0, 0, 0, 498, 499, 
	1, 0, 0, 0, 499, 503, 5, 110, 0, 0, 500, 501, 3, 162, 81, 0, 501, 502, 
	5, 3, 0, 0, 502, 504, 1, 0, 0, 0, 503, 500, 1, 0, 0, 0, 503, 504, 1, 0, 
	0, 0, 504, 505, 1, 0, 0, 0, 505, 509, 3, 166, 83, 0, 506, 507, 5, 75, 0, 
	0, 507, 508, 5, 65, 0, 0, 508, 510, 5, 130, 0, 0, 509, 506, 1, 0, 0, 0, 
	509, 510, 1, 0, 0, 0, 510, 513, 1, 0, 0, 0, 511, 512, 5, 149, 0, 0, 512, 
	514, 3, 94, 47, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 515, 
	1, 0, 0, 0, 515, 524, 5, 39, 0, 0, 516, 521, 3, 68, 34, 0, 517, 521, 3, 
	50, 25, 0, 518, 521, 3, 34, 17, 0, 519, 521, 3, 64, 32, 0, 520, 516, 1, 
	0, 0, 0, 520, 517, 1, 0, 0, 0, 520, 518, 1, 0, 0, 0, 520, 519, 1, 0, 0, 
	0, 521, 522, 1, 0, 0, 0, 522, 523, 5, 2, 0, 0, 523, 525, 1, 0, 0, 0, 524, 
	520, 1, 0, 0, 0, 525, 526, 1, 0, 0, 0, 526, 524, 1, 0, 0, 0, 526, 527, 
	1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 529, 5, 67, 0, 0, 529, 29, 1, 0, 
	0, 0, 530, 532, 5, 51, 0, 0, 531, 533, 7, 3, 0, 0, 532, 531, 1, 0, 0, 0, 
	532, 533, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534, 538, 5, 147, 0, 0, 535, 
	536, 5, 82, 0, 0, 536, 537, 5, 105, 0, 0, 537, 539, 5, 72, 0, 0, 538, 535, 
	1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 543, 1, 0, 0, 0, 540, 541, 3, 162, 
	81, 0, 541, 542, 5, 3, 0, 0, 542, 544, 1, 0, 0, 0, 543, 540, 1, 0, 0, 0, 
	543, 544, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 546, 3, 182, 91, 0, 546, 
	547, 5, 34, 0, 0, 547, 548, 3, 64, 32, 0, 548, 31, 1, 0, 0, 0, 549, 550, 
	5, 51, 0, 0, 550, 551, 5, 148, 0, 0, 551, 555, 5, 134, 0, 0, 552, 553, 
	5, 82, 0, 0, 553, 554, 5, 105, 0, 0, 554, 556, 5, 72, 0, 0, 555, 552, 1, 
	0, 0, 0, 555, 556, 1, 0, 0, 0, 556, 560, 1, 0, 0, 0, 557, 558, 3, 162, 
	81, 0, 558, 559, 5, 3, 0, 0, 559, 561, 1, 0, 0, 0, 560, 557, 1, 0, 0, 0, 
	560, 561, 1, 0, 0, 0, 561, 562, 1, 0, 0, 0, 562, 563, 3, 166, 83, 0, 563, 
	564, 5, 144, 0, 0, 564, 576, 3, 184, 92, 0, 565, 566, 5, 4, 0, 0, 566, 
	571, 3, 150, 75, 0, 567, 568, 5, 6, 0, 0, 568, 570, 3, 150, 75, 0, 569, 
	567, 1, 0, 0, 0, 570, 573, 1, 0, 0, 0, 571, 569, 1, 0, 0, 0, 571, 572, 
	1, 0, 0, 0, 572, 574, 1, 0, 0, 0, 573, 571, 1, 0, 0, 0, 574, 575, 5, 5, 
	0, 0, 575, 577, 1, 0, 0, 0, 576, 565, 1, 0, 0, 0, 576, 577, 1, 0, 0, 0, 
	577, 33, 1, 0, 0, 0, 578, 580, 3, 116, 58, 0, 579, 578, 1, 0, 0, 0, 579, 
	580, 1, 0, 0, 0, 580, 581, 1, 0, 0, 0, 581, 582, 5, 60, 0, 0, 582, 583, 
	5, 77, 0, 0, 583, 586, 3, 118, 59, 0, 584, 585, 5, 150, 0, 0, 585, 587, 
	3, 94, 47, 0, 586, 584, 1, 0, 0, 0, 586, 587, 1, 0, 0, 0, 587, 35, 1, 0, 
	0, 0, 588, 590, 3, 116, 58, 0, 589, 588, 1, 0, 0, 0, 589, 590, 1, 0, 0, 
	0, 590, 591, 1, 0, 0, 0, 591, 592, 5, 60, 0, 0, 592, 593, 5, 77, 0, 0, 
	593, 596, 3, 118, 59, 0, 594, 595, 5, 150, 0, 0, 595, 597, 3, 94, 47, 0, 
	596, 594, 1, 0, 0, 0, 596, 597, 1, 0, 0, 0, 597, 616, 1, 0, 0, 0, 598, 
	599, 5, 113, 0, 0, 599, 600, 5, 41, 0, 0, 600, 605, 3, 120, 60, 0, 601, 
	602, 5, 6, 0, 0, 602, 604, 3, 120, 60, 0, 603, 601, 1, 0, 0, 0, 604, 607, 
	1, 0, 0, 0, 605, 603, 1, 0, 0, 0, 605, 606, 1, 0, 0, 0, 606, 609, 1, 0, 
	0, 0, 607, 605, 1, 0, 0, 0, 608, 598, 1, 0, 0, 0, 608, 609, 1, 0, 0, 0, 
	609, 610, 1, 0, 0, 0, 610, 611, 5, 100, 0, 0, 611, 614, 3, 94, 47, 0, 612, 
	613, 7, 2, 0, 0, 613, 615, 3, 94, 47, 0, 614, 612, 1, 0, 0, 0, 614, 615, 
	1, 0, 0, 0, 615, 617, 1, 0, 0, 0, 616, 608, 1, 0, 0, 0, 616, 617, 1, 0, 
	0, 0, 617, 37, 1, 0, 0, 0, 618, 620, 5, 62, 0, 0, 619, 621, 5, 56, 0, 0, 
	620, 619, 1, 0, 0, 0, 620, 621, 1, 0, 0, 0, 621, 622, 1, 0, 0, 0, 622, 
	623, 3, 162, 81, 0, 623, 39, 1, 0, 0, 0, 624, 625, 5, 64, 0, 0, 625, 628, 
	5, 86, 0, 0, 626, 627, 5, 82, 0, 0, 627, 629, 5, 72, 0, 0, 628, 626, 1, 
	0, 0, 0, 628, 629, 1, 0, 0, 0, 629, 633, 1, 0, 0, 0, 630, 631, 3, 162, 
	81, 0, 631, 632, 5, 3, 0, 0, 632, 634, 1, 0, 0, 0, 633, 630, 1, 0, 0, 0, 
	633, 634, 1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635, 636, 3, 178, 89, 0, 636, 
	41, 1, 0, 0, 0, 637, 638, 5, 64, 0, 0, 638, 641, 5, 134, 0, 0, 639, 640, 
	5, 82, 0, 0, 640, 642, 5, 72, 0, 0, 641, 639, 1, 0, 0, 0, 641, 642, 1, 
	0, 0, 0, 642, 646, 1, 0, 0, 0, 643, 644, 3, 162, 81, 0, 644, 645, 5, 3, 
	0, 0, 645, 647, 1, 0, 0, 0, 646, 643, 1, 0, 0, 0, 646, 647, 1, 0, 0, 0, 
	647, 648, 1, 0, 0, 0, 648, 649, 3, 166, 83, 0, 649, 43, 1, 0, 0, 0, 650, 
	651, 5, 64, 0, 0, 651, 654, 5, 140, 0, 0, 652, 653, 5, 82, 0, 0, 653, 655, 
	5, 72, 0, 0, 654, 652, 1, 0, 0, 0, 654, 655, 1, 0, 0, 0, 655, 659, 1, 0, 
	0, 0, 656, 657, 3, 162, 81, 0, 657, 658, 5, 3, 0, 0, 658, 660, 1, 0, 0, 
	0, 659, 656, 1, 0, 0, 0, 659, 660, 1, 0, 0, 0, 660, 661, 1, 0, 0, 0, 661, 
	662, 3, 180, 90, 0, 662, 45, 1, 0, 0, 0, 663, 664, 5, 64, 0, 0, 664, 667, 
	5, 147, 0, 0, 665, 666, 5, 82, 0, 0, 666, 668, 5, 72, 0, 0, 667, 665, 1, 
	0, 0, 0, 667, 668, 1, 0, 0, 0, 668, 672, 1, 0, 0, 0, 669, 670, 3, 162, 
	81, 0, 670, 671, 5, 3, 0, 0, 671, 673, 1, 0, 0, 0, 672, 669, 1, 0, 0, 0, 
	672, 673, 1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674, 675, 3, 182, 91, 0, 675, 
	47, 1, 0, 0, 0, 676, 678, 5, 151, 0, 0, 677, 679, 5, 120, 0, 0, 678, 677, 
	1, 0, 0, 0, 678, 679, 1, 0, 0, 0, 679, 680, 1, 0, 0, 0, 680, 685, 3, 124, 
	62, 0, 681, 682, 5, 6, 0, 0, 682, 684, 3, 124, 62, 0, 683, 681, 1, 0, 0, 
	0, 684, 687, 1, 0, 0, 0, 685, 683, 1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686, 
	689, 1, 0, 0, 0, 687, 685, 1, 0, 0, 0, 688, 676, 1, 0, 0, 0, 688, 689, 
	1, 0, 0, 0, 689, 690, 1, 0, 0, 0, 690, 696, 3, 136, 68, 0, 691, 692, 3, 
	138, 69, 0, 692, 693, 3, 136, 68, 0, 693, 695, 1, 0, 0, 0, 694, 691, 1, 
	0, 0, 0, 695, 698, 1, 0, 0, 0, 696, 694, 1, 0, 0, 0, 696, 697, 1, 0, 0, 
	0, 697, 709, 1, 0, 0, 0, 698, 696, 1, 0, 0, 0, 699, 700, 5, 113, 0, 0, 
	700, 701, 5, 41, 0, 0, 701, 706, 3, 120, 60, 0, 702, 703, 5, 6, 0, 0, 703, 
	705, 3, 120, 60, 0, 704, 702, 1, 0, 0, 0, 705, 708, 1, 0, 0, 0, 706, 704, 
	1, 0, 0, 0, 706, 707, 1, 0, 0, 0, 707, 710, 1, 0, 0, 0, 708, 706, 1, 0, 
	0, 0, 709, 699, 1, 0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 717, 1, 0, 0, 0, 
	711, 712, 5, 100, 0, 0, 712, 715, 3, 94, 47, 0, 713, 714, 7, 2, 0, 0, 714, 
	716, 3, 94, 47, 0, 715, 713, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 718, 
	1, 0, 0, 0, 717, 711, 1, 0, 0, 0, 717, 718, 1, 0, 0, 0, 718, 49, 1, 0, 
	0, 0, 719, 721, 3, 116, 58, 0, 720, 719, 1, 0, 0, 0, 720, 721, 1, 0, 0, 
	0, 721, 739, 1, 0, 0, 0, 722, 740, 5, 90, 0, 0, 723, 740, 5, 126, 0, 0, 
	724, 725, 5, 90, 0, 0, 725, 726, 5, 112, 0, 0, 726, 740, 5, 126, 0, 0, 
	727, 728, 5, 90, 0, 0, 728, 729, 5, 112, 0, 0, 729, 740, 5, 129, 0, 0, 
	730, 731, 5, 90, 0, 0, 731, 732, 5, 112, 0, 0, 732, 740, 5, 26, 0, 0, 733, 
	734, 5, 90, 0, 0, 734, 735, 5, 112, 0, 0, 735, 740, 5, 74, 0, 0, 736, 737, 
	5, 90, 0, 0, 737, 738, 5, 112, 0, 0, 738, 740, 5, 83, 0, 0, 739, 722, 1, 
	0, 0, 0, 739, 723, 1, 0, 0, 0, 739, 724, 1, 0, 0, 0, 739, 727, 1, 0, 0, 
	0, 739, 730, 1, 0, 0, 0, 739, 733, 1, 0, 0, 0, 739, 736, 1, 0, 0, 0, 740, 
	741, 1, 0, 0, 0, 741, 745, 5, 93, 0, 0, 742, 743, 3, 162, 81, 0, 743, 744, 
	5, 3, 0, 0, 744, 746, 1, 0, 0, 0, 745, 742, 1, 0, 0, 0, 745, 746, 1, 0, 
	0, 0, 746, 747, 1, 0, 0, 0, 747, 759, 3, 166, 83, 0, 748, 749, 5, 4, 0, 
	0, 749, 754, 3, 172, 86, 0, 750, 751, 5, 6, 0, 0, 751, 753, 3, 172, 86, 
	0, 752, 750, 1, 0, 0, 0, 753, 756, 1, 0, 0, 0, 754, 752, 1, 0, 0, 0, 754, 
	755, 1, 0, 0, 0, 755, 757, 1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 757, 758, 
	5, 5, 0, 0, 758, 760, 1, 0, 0, 0, 759, 748, 1, 0, 0, 0, 759, 760, 1, 0, 
	0, 0, 760, 792, 1, 0, 0, 0, 761, 762, 5, 146, 0, 0, 762, 763, 5, 4, 0, 
	0, 763, 768, 3, 94, 47, 0, 764, 765, 5, 6, 0, 0, 765, 767, 3, 94, 47, 0, 
	766, 764, 1, 0, 0, 0, 767, 770, 1, 0, 0, 0, 768, 766, 1, 0, 0, 0, 768, 
	769, 1, 0, 0, 0, 769, 771, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0, 771, 786, 
	5, 5, 0, 0, 772, 773, 5, 6, 0, 0, 773, 774, 5, 4, 0, 0, 774, 779, 3, 94, 
	47, 0, 775, 776, 5, 6, 0, 0, 776, 778, 3, 94, 47, 0, 777, 775, 1, 0, 0, 
	0, 778, 781, 1, 0, 0, 0, 779, 777, 1, 0, 0, 0, 779, 780, 1, 0, 0, 0, 780, 
	782, 1, 0, 0, 0, 781, 779, 1, 0, 0, 0, 782, 783, 5, 5, 0, 0, 783, 785, 
	1, 0, 0, 0, 784, 772, 1, 0, 0, 0, 785, 788, 1, 0, 0, 0, 786, 784, 1, 0, 
	0, 0, 786, 787, 1, 0, 0, 0, 787, 793, 1, 0, 0, 0, 788, 786, 1, 0, 0, 0, 
	789, 793, 3, 64, 32, 0, 790, 791, 5, 57, 0, 0, 791, 793, 5, 146, 0, 0, 
	792, 761, 1, 0, 0, 0, 792, 789, 1, 0, 0, 0, 792, 790, 1, 0, 0, 0, 793, 
	51, 1, 0, 0, 0, 794, 798, 5, 116, 0, 0, 795, 796, 3, 162, 81, 0, 796, 797, 
	5, 3, 0, 0, 797, 799, 1, 0, 0, 0, 798, 795, 1, 0, 0, 0, 798, 799, 1, 0, 
	0, 0, 799, 800, 1, 0, 0, 0, 800, 807, 3, 186, 93, 0, 801, 802, 5, 7, 0, 
	0, 802, 808, 3, 122, 61, 0, 803, 804, 5, 4, 0, 0, 804, 805, 3, 122, 61, 
	0, 805, 806, 5, 5, 0, 0, 806, 808, 1, 0, 0, 0, 807, 801, 1, 0, 0, 0, 807, 
	803, 1, 0, 0, 0, 807, 808, 1, 0, 0, 0, 808, 53, 1, 0, 0, 0, 809, 820, 5, 
	123, 0, 0, 810, 821, 3, 174, 87, 0, 811, 812, 3, 162, 81, 0, 812, 813, 
	5, 3, 0, 0, 813, 815, 1, 0, 0, 0, 814, 811, 1, 0, 0, 0, 814, 815, 1, 0, 
	0, 0, 815, 818, 1, 0, 0, 0, 816, 819, 3, 166, 83, 0, 817, 819, 3, 178, 
	89, 0, 818, 816, 1, 0, 0, 0, 818, 817, 1, 0, 0, 0, 819, 821, 1, 0, 0, 0, 
	820, 810, 1, 0, 0, 0, 820, 814, 1, 0, 0, 0, 820, 821, 1, 0, 0, 0, 821, 
	55, 1, 0, 0, 0, 822, 824, 5, 124, 0, 0, 823, 825, 5, 131, 0, 0, 824, 823, 
	1, 0, 0, 0, 824, 825, 1, 0, 0, 0, 825, 826, 1, 0, 0, 0, 826, 827, 3, 188, 
	94, 0, 827, 57, 1, 0, 0, 0, 828, 833, 5, 129, 0, 0, 829, 831, 5, 139, 0, 
	0, 830, 832, 3, 192, 96, 0, 831, 830, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 
	832, 834, 1, 0, 0, 0, 833, 829, 1, 0, 0, 0, 833, 834, 1, 0, 0, 0, 834, 
	840, 1, 0, 0, 0, 835, 837, 5, 138, 0, 0, 836, 838, 5, 131, 0, 0, 837, 836, 
	1, 0, 0, 0, 837, 838, 1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 841, 3, 188, 
	94, 0, 840, 835, 1, 0, 0, 0, 840, 841, 1, 0, 0, 0, 841, 59, 1, 0, 0, 0, 
	842, 843, 5, 131, 0, 0, 843, 844, 3, 188, 94, 0, 844, 61, 1, 0, 0, 0, 845, 
	847, 5, 151, 0, 0, 846, 848, 5, 120, 0, 0, 847, 846, 1, 0, 0, 0, 847, 848, 
	1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 854, 3, 124, 62, 0, 850, 851, 5, 
	6, 0, 0, 851, 853, 3, 124, 62, 0, 852, 850, 1, 0, 0, 0, 853, 856, 1, 0, 
	0, 0, 854, 852, 1, 0, 0, 0, 854, 855, 1, 0, 0, 0, 855, 858, 1, 0, 0, 0, 
	856, 854, 1, 0, 0, 0, 857, 845, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 
	859, 1, 0, 0, 0, 859, 870, 3, 136, 68, 0, 860, 861, 5, 113, 0, 0, 861, 
	862, 5, 41, 0, 0, 862, 867, 3, 120, 60, 0, 863, 864, 5, 6, 0, 0, 864, 866, 
	3, 120, 60, 0, 865, 863, 1, 0, 0, 0, 866, 869, 1, 0, 0, 0, 867, 865, 1, 
	0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 871, 1, 0, 0, 0, 869, 867, 1, 0, 0, 
	0, 870, 860, 1, 0, 0, 0, 870, 871, 1, 0, 0, 0, 871, 878, 1, 0, 0, 0, 872, 
	873, 5, 100, 0, 0, 873, 876, 3, 94, 47, 0, 874, 875, 7, 2, 0, 0, 875, 877, 
	3, 94, 47, 0, 876, 874, 1, 0, 0, 0, 876, 877, 1, 0, 0, 0, 877, 879, 1, 
	0, 0, 0, 878, 872, 1, 0, 0, 0, 878, 879, 1, 0, 0, 0, 879, 63, 1, 0, 0, 
	0, 880, 882, 5, 151, 0, 0, 881, 883, 5, 120, 0, 0, 882, 881, 1, 0, 0, 0, 
	882, 883, 1, 0, 0, 0, 883, 884, 1, 0, 0, 0, 884, 889, 3, 124, 62, 0, 885, 
	886, 5, 6, 0, 0, 886, 888, 3, 124, 62, 0, 887, 885, 1, 0, 0, 0, 888, 891, 
	1, 0, 0, 0, 889, 887, 1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 893, 1, 0, 
	0, 0, 891, 889, 1, 0, 0, 0, 892, 880, 1, 0, 0, 0, 892, 893, 1, 0, 0, 0, 
	893, 894, 1, 0, 0, 0, 894, 900, 3, 66, 33, 0, 895, 896, 3, 138, 69, 0, 
	896, 897, 3, 66, 33, 0, 897, 899, 1, 0, 0, 0, 898, 895, 1, 0, 0, 0, 899, 
	902, 1, 0, 0, 0, 900, 898, 1, 0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 913, 
	1, 0, 0, 0, 902, 900, 1, 0, 0, 0, 903, 904, 5, 113, 0, 0, 904, 905, 5, 
	41, 0, 0, 905, 910, 3, 120, 60, 0, 906, 907, 5, 6, 0, 0, 907, 909, 3, 120, 
	60, 0, 908, 906, 1, 0, 0, 0, 909, 912, 1, 0, 0, 0, 910, 908, 1, 0, 0, 0, 
	910, 911, 1, 0, 0, 0, 911, 914, 1, 0, 0, 0, 912, 910, 1, 0, 0, 0, 913, 
	903, 1, 0, 0, 0, 913, 914, 1, 0, 0, 0, 914, 921, 1, 0, 0, 0, 915, 916, 
	5, 100, 0, 0, 916, 919, 3, 94, 47, 0, 917, 918, 7, 2, 0, 0, 918, 920, 3, 
	94, 47, 0, 919, 917, 1, 0, 0, 0, 919, 920, 1, 0, 0, 0, 920, 922, 1, 0, 
	0, 0, 921, 915, 1, 0, 0, 0, 921, 922, 1, 0, 0, 0, 922, 65, 1, 0, 0, 0, 
	923, 925, 5, 132, 0, 0, 924, 926, 7, 4, 0, 0, 925, 924, 1, 0, 0, 0, 925, 
	926, 1, 0, 0, 0, 926, 927, 1, 0, 0, 0, 927, 932, 3, 126, 63, 0, 928, 929, 
	5, 6, 0, 0, 929, 931, 3, 126, 63, 0, 930, 928, 1, 0, 0, 0, 931, 934, 1, 
	0, 0, 0, 932, 930, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933, 947, 1, 0, 0, 
	0, 934, 932, 1, 0, 0, 0, 935, 945, 5, 77, 0, 0, 936, 941, 3, 128, 64, 0, 
	937, 938, 5, 6, 0, 0, 938, 940, 3, 128, 64, 0, 939, 937, 1, 0, 0, 0, 940, 
	943, 1, 0, 0, 0, 941, 939, 1, 0, 0, 0, 941, 942, 1, 0, 0, 0, 942, 946, 
	1, 0, 0, 0, 943, 941, 1, 0, 0, 0, 944, 946, 3, 130, 65, 0, 945, 936, 1, 
	0, 0, 0, 945, 944, 1, 0, 0, 0, 946, 948, 1, 0, 0, 0, 947, 935, 1, 0, 0, 
	0, 947, 948, 1, 0, 0, 0, 948, 951, 1, 0, 0, 0, 949, 950, 5, 150, 0, 0, 
	950, 952, 3, 94, 47, 0, 951, 949, 1, 0, 0, 0, 951, 952, 1, 0, 0, 0, 952, 
	967, 1, 0, 0, 0, 953, 954, 5, 80, 0, 0, 954, 955, 5, 41, 0, 0, 955, 960, 
	3, 94, 47, 0, 956, 957, 5, 6, 0, 0, 957, 959, 3, 94, 47, 0, 958, 956, 1, 
	0, 0, 0, 959, 962, 1, 0, 0, 0, 960, 958, 1, 0, 0, 0, 960, 961, 1, 0, 0, 
	0, 961, 965, 1, 0, 0, 0, 962, 960, 1, 0, 0, 0, 963, 964, 5, 81, 0, 0, 964, 
	966, 3, 94, 47, 0, 965, 963, 1, 0, 0, 0, 965, 966, 1, 0, 0, 0, 966, 968, 
	1, 0, 0, 0, 967, 953, 1, 0, 0, 0, 967, 968, 1, 0, 0, 0, 968, 998, 1, 0, 
	0, 0, 969, 970, 5, 146, 0, 0, 970, 971, 5, 4, 0, 0, 971, 976, 3, 94, 47, 
	0, 972, 973, 5, 6, 0, 0, 973, 975, 3, 94, 47, 0, 974, 972, 1, 0, 0, 0, 
	975, 978, 1, 0, 0, 0, 976, 974, 1, 0, 0, 0, 976, 977, 1, 0, 0, 0, 977, 
	979, 1, 0, 0, 0, 978, 976, 1, 0, 0, 0, 979, 994, 5, 5, 0, 0, 980, 981, 
	5, 6, 0, 0, 981, 982, 5, 4, 0, 0, 982, 987, 3, 94, 47, 0, 983, 984, 5, 
	6, 0, 0, 984, 986, 3, 94, 47, 0, 985, 983, 1, 0, 0, 0, 986, 989, 1, 0, 
	0, 0, 987, 985, 1, 0, 0, 0, 987, 988, 1, 0, 0, 0, 988, 990, 1, 0, 0, 0, 
	989, 987, 1, 0, 0, 0, 990, 991, 5, 5, 0, 0, 991, 993, 1, 0, 0, 0, 992, 
	980, 1, 0, 0, 0, 993, 996, 1, 0, 0, 0, 994, 992, 1, 0, 0, 0, 994, 995, 
	1, 0, 0, 0, 995, 998, 1, 0, 0, 0, 996, 994, 1, 0, 0, 0, 997, 923, 1, 0, 
	0, 0, 997, 969, 1, 0, 0, 0, 998, 67, 1, 0, 0, 0, 999, 1001, 3, 116, 58, 
	0, 1000, 999, 1, 0, 0, 0, 1000, 1001, 1, 0, 0, 0, 1001, 1002, 1, 0, 0, 
	0, 1002, 1013, 5, 143, 0, 0, 1003, 1004, 5, 112, 0, 0, 1004, 1014, 5, 129, 
	0, 0, 1005, 1006, 5, 112, 0, 0, 1006, 1014, 5, 26, 0, 0, 1007, 1008, 5, 
	112, 0, 0, 1008, 1014, 5, 126, 0, 0, 1009, 1010, 5, 112, 0, 0, 1010, 1014, 
	5, 74, 0, 0, 1011, 1012, 5, 112, 0, 0, 1012, 1014, 5, 83, 0, 0, 1013, 1003, 
	1, 0, 0, 0, 1013, 1005, 1, 0, 0, 0, 1013, 1007, 1, 0, 0, 0, 1013, 1009, 
	1, 0, 0, 0, 1013, 1011, 1, 0, 0, 0, 1013, 1014, 1, 0, 0, 0, 1014, 1015, 
	1, 0, 0, 0, 1015, 1016, 3, 118, 59, 0, 1016, 1017, 5, 133, 0, 0, 1017, 
	1018, 3, 172, 86, 0, 1018, 1019, 5, 7, 0, 0, 1019, 1027, 3, 94, 47, 0, 
	1020, 1021, 5, 6, 0, 0, 1021, 1022, 3, 172, 86, 0, 1022, 1023, 5, 7, 0, 
	0, 1023, 1024, 3, 94, 47, 0, 1024, 1026, 1, 0, 0, 0, 1025, 1020, 1, 0, 
	0, 0, 1026, 1029, 1, 0, 0, 0, 1027, 1025, 1, 0, 0, 0, 1027, 1028, 1, 0, 
	0, 0, 1028, 1032, 1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1030, 1031, 5, 150, 
	0, 0, 1031, 1033, 3, 94, 47, 0, 1032, 1030, 1, 0, 0, 0, 1032, 1033, 1, 
	0, 0, 0, 1033, 69, 1, 0, 0, 0, 1034, 1036, 3, 116, 58, 0, 1035, 1034, 1, 
	0, 0, 0, 1035, 1036, 1, 0, 0, 0, 1036, 1037, 1, 0, 0, 0, 1037, 1048, 5, 
	143, 0, 0, 1038, 1039, 5, 112, 0, 0, 1039, 1049, 5, 129, 0, 0, 1040, 1041, 
	5, 112, 0, 0, 1041, 1049, 5, 26, 0, 0, 1042, 1043, 5, 112, 0, 0, 1043, 
	1049, 5, 126, 0, 0, 1044, 1045, 5, 112, 0, 0, 1045, 1049, 5, 74, 0, 0, 
	1046, 1047, 5, 112, 0, 0, 1047, 1049, 5, 83, 0, 0, 1048, 1038, 1, 0, 0, 
	0, 1048, 1040, 1, 0, 0, 0, 1048, 1042, 1, 0, 0, 0, 1048, 1044, 1, 0, 0, 
	0, 1048, 1046, 1, 0, 0, 0, 1048, 1049, 1, 0, 0, 0, 1049, 1050, 1, 0, 0, 
	0, 1050, 1051, 3, 118, 59, 0, 1051, 1052, 5, 133, 0, 0, 1052, 1053, 3, 
	172, 86, 0, 1053, 1054, 5, 7, 0, 0, 1054, 1062, 3, 94, 47, 0, 1055, 1056, 
	5, 6, 0, 0, 1056, 1057, 3, 172, 86, 0, 1057, 1058, 5, 7, 0, 0, 1058, 1059, 
	3, 94, 47, 0, 1059, 1061, 1, 0, 0, 0, 1060, 1055, 1, 0, 0, 0, 1061, 1064, 
	1, 0, 0, 0, 1062, 1060, 1, 0, 0, 0, 1062, 1063, 1, 0, 0, 0, 1063, 1067, 
	1, 0, 0, 0, 1064, 1062, 1, 0, 0, 0, 1065, 1066, 5, 150, 0, 0, 1066, 1068, 
	3, 94, 47, 0, 1067, 1065, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1087, 
	1, 0, 0, 0, 1069, 1070, 5, 113, 0, 0, 1070, 1071, 5, 41, 0, 0, 1071, 1076, 
	3, 120, 60, 0, 1072, 1073, 5, 6, 0, 0, 1073, 1075, 3, 120, 60, 0, 1074, 
	1072, 1, 0, 0, 0, 1075, 1078, 1, 0, 0, 0, 1076, 1074, 1, 0, 0, 0, 1076, 
	1077, 1, 0, 0, 0, 1077, 1080, 1, 0, 0, 0, 1078, 1076, 1, 0, 0, 0, 1079, 
	1069, 1, 0, 0, 0, 1079, 1080, 1, 0, 0, 0, 1080, 1081, 1, 0, 0, 0, 1081, 
	1082, 5, 100, 0, 0, 1082, 1085, 3, 94, 47, 0, 1083, 1084, 7, 2, 0, 0, 1084, 
	1086, 3, 94, 47, 0, 1085, 1083, 1, 0, 0, 0, 1085, 1086, 1, 0, 0, 0, 1086, 
	1088, 1, 0, 0, 0, 1087, 1079, 1, 0, 0, 0, 1087, 1088, 1, 0, 0, 0, 1088, 
	71, 1, 0, 0, 0, 1089, 1090, 5, 145, 0, 0, 1090, 73, 1, 0, 0, 0, 1091, 1096, 
	3, 172, 86, 0, 1092, 1095, 3, 78, 39, 0, 1093, 1095, 3, 76, 38, 0, 1094, 
	1092, 1, 0, 0, 0, 1094, 1093, 1, 0, 0, 0, 1095, 1098, 1, 0, 0, 0, 1096, 
	1094, 1, 0, 0, 0, 1096, 1097, 1, 0, 0, 0, 1097, 75, 1, 0, 0, 0, 1098, 1096, 
	1, 0, 0, 0, 1099, 1119, 3, 158, 79, 0, 1100, 1101, 5, 4, 0, 0, 1101, 1103, 
	3, 142, 71, 0, 1102, 1104, 3, 194, 97, 0, 1103, 1102, 1, 0, 0, 0, 1103, 
	1104, 1, 0, 0, 0, 1104, 1105, 1, 0, 0, 0, 1105, 1106, 5, 5, 0, 0, 1106, 
	1120, 1, 0, 0, 0, 1107, 1108, 5, 4, 0, 0, 1108, 1110, 3, 142, 71, 0, 1109, 
	1111, 3, 194, 97, 0, 1110, 1109, 1, 0, 0, 0, 1110, 1111, 1, 0, 0, 0, 1111, 
	1112, 1, 0, 0, 0, 1112, 1113, 5, 6, 0, 0, 1113, 1115, 3, 142, 71, 0, 1114, 
	1116, 3, 194, 97, 0, 1115, 1114, 1, 0, 0, 0, 1115, 1116, 1, 0, 0, 0, 1116, 
	1117, 1, 0, 0, 0, 1117, 1118, 5, 5, 0, 0, 1118, 1120, 1, 0, 0, 0, 1119, 
	1100, 1, 0, 0, 0, 1119, 1107, 1, 0, 0, 0, 1119, 1120, 1, 0, 0, 0, 1120, 
	77, 1, 0, 0, 0, 1121, 1122, 5, 50, 0, 0, 1122, 1124, 3, 158, 79, 0, 1123, 
	1121, 1, 0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124, 1139, 1, 0, 0, 0, 1125, 
	1140, 3, 80, 40, 0, 1126, 1140, 3, 82, 41, 0, 1127, 1140, 3, 84, 42, 0, 
	1128, 1140, 3, 86, 43, 0, 1129, 1130, 5, 142, 0, 0, 1130, 1140, 3, 92, 
	46, 0, 1131, 1132, 5, 45, 0, 0, 1132, 1133, 5, 4, 0, 0, 1133, 1134, 3, 
	94, 47, 0, 1134, 1135, 5, 5, 0, 0, 1135, 1140, 1, 0, 0, 0, 1136, 1140, 
	3, 88, 44, 0, 1137, 1138, 5, 46, 0, 0, 1138, 1140, 3, 174, 87, 0, 1139, 
	1125, 1, 0, 0, 0, 1139, 1126, 1, 0, 0, 0, 1139, 1127, 1, 0, 0, 0, 1139, 
	1128, 1, 0, 0, 0, 1139, 1129, 1, 0, 0, 0, 1139, 1131, 1, 0, 0, 0, 1139, 
	1136, 1, 0, 0, 0, 1139, 1137, 1, 0, 0, 0, 1140, 79, 1, 0, 0, 0, 1141, 1142, 
	5, 117, 0, 0, 1142, 1144, 5, 97, 0, 0, 1143, 1145, 7, 5, 0, 0, 1144, 1143, 
	1, 0, 0, 0, 1144, 1145, 1, 0, 0, 0, 1145, 1146, 1, 0, 0, 0, 1146, 1148, 
	3, 92, 46, 0, 1147, 1149, 5, 37, 0, 0, 1148, 1147, 1, 0, 0, 0, 1148, 1149, 
	1, 0, 0, 0, 1149, 81, 1, 0, 0, 0, 1150, 1151, 3, 96, 48, 0, 1151, 83, 1, 
	0, 0, 0, 1152, 1153, 5, 105, 0, 0, 1153, 1154, 5, 107, 0, 0, 1154, 1155, 
	3, 92, 46, 0, 1155, 85, 1, 0, 0, 0, 1156, 1157, 5, 107, 0, 0, 1157, 1158, 
	3, 92, 46, 0, 1158, 87, 1, 0, 0, 0, 1159, 1171, 5, 57, 0, 0, 1160, 1172, 
	3, 90, 45, 0, 1161, 1162, 5, 4, 0, 0, 1162, 1163, 3, 94, 47, 0, 1163, 1164, 
	5, 5, 0, 0, 1164, 1172, 1, 0, 0, 0, 1165, 1166, 5, 103, 0, 0, 1166, 1167, 
	5, 4, 0, 0, 1167, 1168, 3, 94, 47, 0, 1168, 1169, 5, 5, 0, 0, 1169, 1172, 
	1, 0, 0, 0, 1170, 1172, 3, 194, 97, 0, 1171, 1160, 1, 0, 0, 0, 1171, 1161, 
	1, 0, 0, 0, 1171, 1165, 1, 0, 0, 0, 1171, 1170, 1, 0, 0, 0, 1172, 1179, 
	1, 0, 0, 0, 1173, 1175, 5, 1, 0, 0, 1174, 1176, 3, 194, 97, 0, 1175, 1174, 
	1, 0, 0, 0, 1176, 1177, 1, 0, 0, 0, 1177, 1175, 1, 0, 0, 0, 1177, 1178, 
	1, 0, 0, 0, 1178, 1180, 1, 0, 0, 0, 1179, 1173, 1, 0, 0, 0, 1179, 1180, 
	1, 0, 0, 0, 1180, 89, 1, 0, 0, 0, 1181, 1184, 3, 142, 71, 0, 1182, 1184, 
	3, 144, 72, 0, 1183, 1181, 1, 0, 0, 0, 1183, 1182, 1, 0, 0, 0, 1184, 91, 
	1, 0, 0, 0, 1185, 1186, 5, 110, 0, 0, 1186, 1187, 5, 49, 0, 0, 1187, 1189, 
	7, 6, 0, 0, 1188, 1185, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 93, 1, 
	0, 0, 0, 1190, 1191, 6, 47, -1, 0, 1191, 1267, 3, 144, 72, 0, 1192, 1267, 
	5, 155, 0, 0, 1193, 1194, 3, 162, 81, 0, 1194, 1195, 5, 3, 0, 0, 1195, 
	1197, 1, 0, 0, 0, 1196, 1193, 1, 0, 0, 0, 1196, 1197, 1, 0, 0, 0, 1197, 
	1198, 1, 0, 0, 0, 1198, 1199, 3, 166, 83, 0, 1199, 1200, 5, 3, 0, 0, 1200, 
	1202, 1, 0, 0, 0, 1201, 1196, 1, 0, 0, 0, 1201, 1202, 1, 0, 0, 0, 1202, 
	1203, 1, 0, 0, 0, 1203, 1267, 3, 172, 86, 0, 1204, 1205, 3, 146, 73, 0, 
	1205, 1206, 3, 94, 47, 21, 1206, 1267, 1, 0, 0, 0, 1207, 1208, 3, 160, 
	80, 0, 1208, 1221, 5, 4, 0, 0, 1209, 1211, 5, 63, 0, 0, 1210, 1209, 1, 
	0, 0, 0, 1210, 1211, 1, 0, 0, 0, 1211, 1212, 1, 0, 0, 0, 1212, 1217, 3, 
	94, 47, 0, 1213, 1214, 5, 6, 0, 0, 1214, 1216, 3, 94, 47, 0, 1215, 1213, 
	1, 0, 0, 0, 1216, 1219, 1, 0, 0, 0, 1217, 1215, 1, 0, 0, 0, 1217, 1218, 
	1, 0, 0, 0, 1218, 1222, 1, 0, 0, 0, 1219, 1217, 1, 0, 0, 0, 1220, 1222, 
	5, 8, 0, 0, 1221, 1210, 1, 0, 0, 0, 1221, 1220, 1, 0, 0, 0, 1221, 1222, 
	1, 0, 0, 0, 1222, 1223, 1, 0, 0, 0, 1223, 1224, 5, 5, 0, 0, 1224, 1267, 
	1, 0, 0, 0, 1225, 1226, 5, 4, 0, 0, 1226, 1227, 3, 94, 47, 0, 1227, 1228, 
	5, 5, 0, 0, 1228, 1267, 1, 0, 0, 0, 1229, 1230, 5, 44, 0, 0, 1230, 1231, 
	5, 4, 0, 0, 1231, 1232, 3, 94, 47, 0, 1232, 1233, 5, 34, 0, 0, 1233, 1234, 
	3, 76, 38, 0, 1234, 1235, 5, 5, 0, 0, 1235, 1267, 1, 0, 0, 0, 1236, 1238, 
	5, 105, 0, 0, 1237, 1236, 1, 0, 0, 0, 1237, 1238, 1, 0, 0, 0, 1238, 1239, 
	1, 0, 0, 0, 1239, 1241, 5, 72, 0, 0, 1240, 1237, 1, 0, 0, 0, 1240, 1241, 
	1, 0, 0, 0, 1241, 1242, 1, 0, 0, 0, 1242, 1243, 5, 4, 0, 0, 1243, 1244, 
	3, 64, 32, 0, 1244, 1245, 5, 5, 0, 0, 1245, 1267, 1, 0, 0, 0, 1246, 1248, 
	5, 43, 0, 0, 1247, 1249, 3, 94, 47, 0, 1248, 1247, 1, 0, 0, 0, 1248, 1249, 
	1, 0, 0, 0, 1249, 1255, 1, 0, 0, 0, 1250, 1251, 5, 149, 0, 0, 1251, 1252, 
	3, 94, 47, 0, 1252, 1253, 5, 137, 0, 0, 1253, 1254, 3, 94, 47, 0, 1254, 
	1256, 1, 0, 0, 0, 1255, 1250, 1, 0, 0, 0, 1256, 1257, 1, 0, 0, 0, 1257, 
	1255, 1, 0, 0, 0, 1257, 1258, 1, 0, 0, 0, 1258, 1261, 1, 0, 0, 0, 1259, 
	1260, 5, 66, 0, 0, 1260, 1262, 3, 94, 47, 0, 1261, 1259, 1, 0, 0, 0, 1261, 
	1262, 1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1264, 5, 67, 0, 0, 1264, 
	1267, 1, 0, 0, 0, 1265, 1267, 3, 100, 50, 0, 1266, 1190, 1, 0, 0, 0, 1266, 
	1192, 1, 0, 0, 0, 1266, 1201, 1, 0, 0, 0, 1266, 1204, 1, 0, 0, 0, 1266, 
	1207, 1, 0, 0, 0, 1266, 1225, 1, 0, 0, 0, 1266, 1229, 1, 0, 0, 0, 1266, 
	1240, 1, 0, 0, 0, 1266, 1246, 1, 0, 0, 0, 1266, 1265, 1, 0, 0, 0, 1267, 
	1368, 1, 0, 0, 0, 1268, 1269, 10, 20, 0, 0, 1269, 1270, 5, 12, 0, 0, 1270, 
	1367, 3, 94, 47, 21, 1271, 1272, 10, 19, 0, 0, 1272, 1273, 7, 7, 0, 0, 
	1273, 1367, 3, 94, 47, 20, 1274, 1275, 10, 18, 0, 0, 1275, 1276, 7, 8, 
	0, 0, 1276, 1367, 3, 94, 47, 19, 1277, 1278, 10, 17, 0, 0, 1278, 1279, 
	7, 9, 0, 0, 1279, 1367, 3, 94, 47, 18, 1280, 1281, 10, 16, 0, 0, 1281, 
	1282, 7, 10, 0, 0, 1282, 1367, 3, 94, 47, 17, 1283, 1296, 10, 15, 0, 0, 
	1284, 1297, 5, 7, 0, 0, 1285, 1297, 5, 23, 0, 0, 1286, 1297, 5, 24, 0, 
	0, 1287, 1297, 5, 25, 0, 0, 1288, 1297, 5, 94, 0, 0, 1289, 1290, 5, 94, 
	0, 0, 1290, 1297, 5, 105, 0, 0, 1291, 1297, 5, 85, 0, 0, 1292, 1297, 5, 
	99, 0, 0, 1293, 1297, 5, 79, 0, 0, 1294, 1297, 5, 101, 0, 0, 1295, 1297, 
	5, 122, 0, 0, 1296, 1284, 1, 0, 0, 0, 1296, 1285, 1, 0, 0, 0, 1296, 1286, 
	1, 0, 0, 0, 1296, 1287, 1, 0, 0, 0, 1296, 1288, 1, 0, 0, 0, 1296, 1289, 
	1, 0, 0, 0, 1296, 1291, 1, 0, 0, 0, 1296, 1292, 1, 0, 0, 0, 1296, 1293, 
	1, 0, 0, 0, 1296, 1294, 1, 0, 0, 0, 1296, 1295, 1, 0, 0, 0, 1297, 1298, 
	1, 0, 0, 0, 1298, 1367, 3, 94, 47, 16, 1299, 1300, 10, 14, 0, 0, 1300, 
	1301, 5, 33, 0, 0, 1301, 1367, 3, 94, 47, 15, 1302, 1303, 10, 13, 0, 0, 
	1303, 1304, 5, 112, 0, 0, 1304, 1367, 3, 94, 47, 14, 1305, 1306, 10, 6, 
	0, 0, 1306, 1308, 5, 94, 0, 0, 1307, 1309, 5, 105, 0, 0, 1308, 1307, 1, 
	0, 0, 0, 1308, 1309, 1, 0, 0, 0, 1309, 1310, 1, 0, 0, 0, 1310, 1367, 3, 
	94, 47, 7, 1311, 1313, 10, 5, 0, 0, 1312, 1314, 5, 105, 0, 0, 1313, 1312, 
	1, 0, 0, 0, 1313, 1314, 1, 0, 0, 0, 1314, 1315, 1, 0, 0, 0, 1315, 1316, 
	5, 40, 0, 0, 1316, 1317, 3, 94, 47, 0, 1317, 1318, 5, 33, 0, 0, 1318, 1319, 
	3, 94, 47, 6, 1319, 1367, 1, 0, 0, 0, 1320, 1321, 10, 9, 0, 0, 1321, 1322, 
	5, 46, 0, 0, 1322, 1367, 3, 174, 87, 0, 1323, 1325, 10, 8, 0, 0, 1324, 
	1326, 5, 105, 0, 0, 1325, 1324, 1, 0, 0, 0, 1325, 1326, 1, 0, 0, 0, 1326, 
	1327, 1, 0, 0, 0, 1327, 1328, 7, 11, 0, 0, 1328, 1331, 3, 94, 47, 0, 1329, 
	1330, 5, 69, 0, 0, 1330, 1332, 3, 94, 47, 0, 1331, 1329, 1, 0, 0, 0, 1331, 
	1332, 1, 0, 0, 0, 1332, 1367, 1, 0, 0, 0, 1333, 1338, 10, 7, 0, 0, 1334, 
	1339, 5, 95, 0, 0, 1335, 1339, 5, 106, 0, 0, 1336, 1337, 5, 105, 0, 0, 
	1337, 1339, 5, 107, 0, 0, 1338, 1334, 1, 0, 0, 0, 1338, 1335, 1, 0, 0, 
	0, 1338, 1336, 1, 0, 0, 0, 1339, 1367, 1, 0, 0, 0, 1340, 1342, 10, 4, 0, 
	0, 1341, 1343, 5, 105, 0, 0, 1342, 1341, 1, 0, 0, 0, 1342, 1343, 1, 0, 
	0, 0, 1343, 1344, 1, 0, 0, 0, 1344, 1364, 5, 85, 0, 0, 1345, 1355, 5, 4, 
	0, 0, 1346, 1356, 3, 64, 32, 0, 1347, 1352, 3, 94, 47, 0, 1348, 1349, 5, 
	6, 0, 0, 1349, 1351, 3, 94, 47, 0, 1350, 1348, 1, 0, 0, 0, 1351, 1354, 
	1, 0, 0, 0, 1352, 1350, 1, 0, 0, 0, 1352, 1353, 1, 0, 0, 0, 1353, 1356, 
	1, 0, 0, 0, 1354, 1352, 1, 0, 0, 0, 1355, 1346, 1, 0, 0, 0, 1355, 1347, 
	1, 0, 0, 0, 1355, 1356, 1, 0, 0, 0, 1356, 1357, 1, 0, 0, 0, 1357, 1365, 
	5, 5, 0, 0, 1358, 1359, 3, 162, 81, 0, 1359, 1360, 5, 3, 0, 0, 1360, 1362, 
	1, 0, 0, 0, 1361, 1358, 1, 0, 0, 0, 1361, 1362, 1, 0, 0, 0, 1362, 1363, 
	1, 0, 0, 0, 1363, 1365, 3, 166, 83, 0, 1364, 1345, 1, 0, 0, 0, 1364, 1361, 
	1, 0, 0, 0, 1365, 1367, 1, 0, 0, 0, 1366, 1268, 1, 0, 0, 0, 1366, 1271, 
	1, 0, 0, 0, 1366, 1274, 1, 0, 0, 0, 1366, 1277, 1, 0, 0, 0, 1366, 1280, 
	1, 0, 0, 0, 1366, 1283, 1, 0, 0, 0, 1366, 1299, 1, 0, 0, 0, 1366, 1302, 
	1, 0, 0, 0, 1366, 1305, 1, 0, 0, 0, 1366, 1311, 1, 0, 0, 0, 1366, 1320, 
	1, 0, 0, 0, 1366, 1323, 1, 0, 0, 0, 1366, 1333, 1, 0, 0, 0, 1366, 1340, 
	1, 0, 0, 0, 1367, 1370, 1, 0, 0, 0, 1368, 1366, 1, 0, 0, 0, 1368, 1369, 
	1, 0, 0, 0, 1369, 95, 1, 0, 0, 0, 1370, 1368, 1, 0, 0, 0, 1371, 1375, 5, 
	121, 0, 0, 1372, 1373, 3, 162, 81, 0, 1373, 1374, 5, 3, 0, 0, 1374, 1376, 
	1, 0, 0, 0, 1375, 1372, 1, 0, 0, 0, 1375, 1376, 1, 0, 0, 0, 1376, 1377, 
	1, 0, 0, 0, 1377, 1389, 3, 176, 88, 0, 1378, 1379, 5, 4, 0, 0, 1379, 1384, 
	3, 98, 49, 0, 1380, 1381, 5, 6, 0, 0, 1381, 1383, 3, 98, 49, 0, 1382, 1380, 
	1, 0, 0, 0, 1383, 1386, 1, 0, 0, 0, 1384, 1382, 1, 0, 0, 0, 1384, 1385, 
	1, 0, 0, 0, 1385, 1387, 1, 0, 0, 0, 1386, 1384, 1, 0, 0, 0, 1387, 1388, 
	5, 5, 0, 0, 1388, 1390, 1, 0, 0, 0, 1389, 1378, 1, 0, 0, 0, 1389, 1390, 
	1, 0, 0, 0, 1390, 1409, 1, 0, 0, 0, 1391, 1392, 5, 110, 0, 0, 1392, 1401, 
	7, 12, 0, 0, 1393, 1394, 5, 133, 0, 0, 1394, 1402, 5, 107, 0, 0, 1395, 
	1396, 5, 133, 0, 0, 1396, 1402, 5, 57, 0, 0, 1397, 1402, 5, 42, 0, 0, 1398, 
	1402, 5, 127, 0, 0, 1399, 1400, 5, 104, 0, 0, 1400, 1402, 5, 27, 0, 0, 
	1401, 1393, 1, 0, 0, 0, 1401, 1395, 1, 0, 0, 0, 1401, 1397, 1, 0, 0, 0, 
	1401, 1398, 1, 0, 0, 0, 1401, 1399, 1, 0, 0, 0, 1402, 1406, 1, 0, 0, 0, 
	1403, 1404, 5, 101, 0, 0, 1404, 1406, 3, 158, 79, 0, 1405, 1391, 1, 0, 
	0, 0, 1405, 1403, 1, 0, 0, 0, 1406, 1408, 1, 0, 0, 0, 1407, 1405, 1, 0, 
	0, 0, 1408, 1411, 1, 0, 0, 0, 1409, 1407, 1, 0, 0, 0, 1409, 1410, 1, 0, 
	0, 0, 1410, 1425, 1, 0, 0, 0, 1411, 1409, 1, 0, 0, 0, 1412, 1414, 5, 105, 
	0, 0, 1413, 1412, 1, 0, 0, 0, 1413, 1414, 1, 0, 0, 0, 1414, 1415, 1, 0, 
	0, 0, 1415, 1420, 5, 58, 0, 0, 1416, 1417, 5, 88, 0, 0, 1417, 1421, 5, 
	59, 0, 0, 1418, 1419, 5, 88, 0, 0, 1419, 1421, 5, 84, 0, 0, 1420, 1416, 
	1, 0, 0, 0, 1420, 1418, 1, 0, 0, 0, 1420, 1421, 1, 0, 0, 0, 1421, 1423, 
	1, 0, 0, 0, 1422, 1424, 5, 68, 0, 0, 1423, 1422, 1, 0, 0, 0, 1423, 1424, 
	1, 0, 0, 0, 1424, 1426, 1, 0, 0, 0, 1425, 1413, 1, 0, 0, 0, 1425, 1426, 
	1, 0, 0, 0, 1426, 97, 1, 0, 0, 0, 1427, 1428, 3, 158, 79, 0, 1428, 99, 
	1, 0, 0, 0, 1429, 1430, 5, 119, 0, 0, 1430, 1435, 5, 4, 0, 0, 1431, 1436, 
	5, 83, 0, 0, 1432, 1433, 7, 13, 0, 0, 1433, 1434, 5, 6, 0, 0, 1434, 1436, 
	3, 148, 74, 0, 1435, 1431, 1, 0, 0, 0, 1435, 1432, 1, 0, 0, 0, 1436, 1437, 
	1, 0, 0, 0, 1437, 1438, 5, 5, 0, 0, 1438, 101, 1, 0, 0, 0, 1439, 1442, 
	3, 172, 86, 0, 1440, 1441, 5, 46, 0, 0, 1441, 1443, 3, 174, 87, 0, 1442, 
	1440, 1, 0, 0, 0, 1442, 1443, 1, 0, 0, 0, 1443, 1445, 1, 0, 0, 0, 1444, 
	1446, 7, 5, 0, 0, 1445, 1444, 1, 0, 0, 0, 1445, 1446, 1, 0, 0, 0, 1446, 
	103, 1, 0, 0, 0, 1447, 1448, 5, 50, 0, 0, 1448, 1450, 3, 158, 79, 0, 1449, 
	1447, 1, 0, 0, 0, 1449, 1450, 1, 0, 0, 0, 1450, 1460, 1, 0, 0, 0, 1451, 
	1461, 3, 106, 53, 0, 1452, 1461, 3, 112, 56, 0, 1453, 1461, 3, 110, 55, 
	0, 1454, 1455, 5, 45, 0, 0, 1455, 1456, 5, 4, 0, 0, 1456, 1457, 3, 94, 
	47, 0, 1457, 1458, 5, 5, 0, 0, 1458, 1461, 1, 0, 0, 0, 1459, 1461, 3, 108, 
	54, 0, 1460, 1451, 1, 0, 0, 0, 1460, 1452, 1, 0, 0, 0, 1460, 1453, 1, 0, 
	0, 0, 1460, 1454, 1, 0, 0, 0, 1460, 1459, 1, 0, 0, 0, 1461, 105, 1, 0, 
	0, 0, 1462, 1463, 5, 117, 0, 0, 1463, 1464, 5, 97, 0, 0, 1464, 1465, 5, 
	4, 0, 0, 1465, 1470, 3, 102, 51, 0, 1466, 1467, 5, 6, 0, 0, 1467, 1469, 
	3, 102, 51, 0, 1468, 1466, 1, 0, 0, 0, 1469, 1472, 1, 0, 0, 0, 1470, 1468, 
	1, 0, 0, 0, 1470, 1471, 1, 0, 0, 0, 1471, 1473, 1, 0, 0, 0, 1472, 1470, 
	1, 0, 0, 0, 1473, 1474, 5, 5, 0, 0, 1474, 1475, 3, 92, 46, 0, 1475, 107, 
	1, 0, 0, 0, 1476, 1477, 5, 76, 0, 0, 1477, 1478, 5, 97, 0, 0, 1478, 1479, 
	5, 4, 0, 0, 1479, 1484, 3, 114, 57, 0, 1480, 1481, 5, 6, 0, 0, 1481, 1483, 
	3, 114, 57, 0, 1482, 1480, 1, 0, 0, 0, 1483, 1486, 1, 0, 0, 0, 1484, 1482, 
	1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485, 1487, 1, 0, 0, 0, 1486, 1484, 
	1, 0, 0, 0, 1487, 1488, 5, 5, 0, 0, 1488, 1489, 3, 96, 48, 0, 1489, 109, 
	1, 0, 0, 0, 1490, 1492, 5, 142, 0, 0, 1491, 1493, 5, 97, 0, 0, 1492, 1491, 
	1, 0, 0, 0, 1492, 1493, 1, 0, 0, 0, 1493, 1495, 1, 0, 0, 0, 1494, 1496, 
	3, 158, 79, 0, 1495, 1494, 1, 0, 0, 0, 1495, 1496, 1, 0, 0, 0, 1496, 1497, 
	1, 0, 0, 0, 1497, 1498, 5, 4, 0, 0, 1498, 1503, 3, 102, 51, 0, 1499, 1500, 
	5, 6, 0, 0, 1500, 1502, 3, 102, 51, 0, 1501, 1499, 1, 0, 0, 0, 1502, 1505, 
	1, 0, 0, 0, 1503, 1501, 1, 0, 0, 0, 1503, 1504, 1, 0, 0, 0, 1504, 1506, 
	1, 0, 0, 0, 1505, 1503, 1, 0, 0, 0, 1506, 1507, 5, 5, 0, 0, 1507, 1508, 
	3, 92, 46, 0, 1508, 111, 1, 0, 0, 0, 1509, 1511, 5, 97, 0, 0, 1510, 1512, 
	3, 158, 79, 0, 1511, 1510, 1, 0, 0, 0, 1511, 1512, 1, 0, 0, 0, 1512, 1513, 
	1, 0, 0, 0, 1513, 1514, 5, 4, 0, 0, 1514, 1519, 3, 102, 51, 0, 1515, 1516, 
	5, 6, 0, 0, 1516, 1518, 3, 102, 51, 0, 1517, 1515, 1, 0, 0, 0, 1518, 1521, 
	1, 0, 0, 0, 1519, 1517, 1, 0, 0, 0, 1519, 1520, 1, 0, 0, 0, 1520, 1522, 
	1, 0, 0, 0, 1521, 1519, 1, 0, 0, 0, 1522, 1523, 5, 5, 0, 0, 1523, 1524, 
	3, 92, 46, 0, 1524, 113, 1, 0, 0, 0, 1525, 1526, 3, 172, 86, 0, 1526, 115, 
	1, 0, 0, 0, 1527, 1529, 5, 151, 0, 0, 1528, 1530, 5, 120, 0, 0, 1529, 1528, 
	1, 0, 0, 0, 1529, 1530, 1, 0, 0, 0, 1530, 1531, 1, 0, 0, 0, 1531, 1532, 
	3, 140, 70, 0, 1532, 1533, 5, 34, 0, 0, 1533, 1534, 5, 4, 0, 0, 1534, 1535, 
	3, 64, 32, 0, 1535, 1545, 5, 5, 0, 0, 1536, 1537, 5, 6, 0, 0, 1537, 1538, 
	3, 140, 70, 0, 1538, 1539, 5, 34, 0, 0, 1539, 1540, 5, 4, 0, 0, 1540, 1541, 
	3, 64, 32, 0, 1541, 1542, 5, 5, 0, 0, 1542, 1544, 1, 0, 0, 0, 1543, 1536, 
	1, 0, 0, 0, 1544, 1547, 1, 0, 0, 0, 1545, 1543, 1, 0, 0, 0, 1545, 1546, 
	1, 0, 0, 0, 1546, 117, 1, 0, 0, 0, 1547, 1545, 1, 0, 0, 0, 1548, 1549, 
	3, 162, 81, 0, 1549, 1550, 5, 3, 0, 0, 1550, 1552, 1, 0, 0, 0, 1551, 1548, 
	1, 0, 0, 0, 1551, 1552, 1, 0, 0, 0, 1552, 1553, 1, 0, 0, 0, 1553, 1559, 
	3, 166, 83, 0, 1554, 1555, 5, 87, 0, 0, 1555, 1556, 5, 41, 0, 0, 1556, 
	1560, 3, 178, 89, 0, 1557, 1558, 5, 105, 0, 0, 1558, 1560, 5, 87, 0, 0, 
	1559, 1554, 1, 0, 0, 0, 1559, 1557, 1, 0, 0, 0, 1559, 1560, 1, 0, 0, 0, 
	1560, 119, 1, 0, 0, 0, 1561, 1564, 3, 94, 47, 0, 1562, 1563, 5, 46, 0, 
	0, 1563, 1565, 3, 174, 87, 0, 1564, 1562, 1, 0, 0, 0, 1564, 1565, 1, 0, 
	0, 0, 1565, 1567, 1, 0, 0, 0, 1566, 1568, 7, 5, 0, 0, 1567, 1566, 1, 0, 
	0, 0, 1567, 1568, 1, 0, 0, 0, 1568, 121, 1, 0, 0, 0, 1569, 1573, 3, 142, 
	71, 0, 1570, 1573, 3, 158, 79, 0, 1571, 1573, 5, 156, 0, 0, 1572, 1569, 
	1, 0, 0, 0, 1572, 1570, 1, 0, 0, 0, 1572, 1571, 1, 0, 0, 0, 1573, 123, 
	1, 0, 0, 0, 1574, 1586, 3, 166, 83, 0, 1575, 1576, 5, 4, 0, 0, 1576, 1581, 
	3, 172, 86, 0, 1577, 1578, 5, 6, 0, 0, 1578, 1580, 3, 172, 86, 0, 1579, 
	1577, 1, 0, 0, 0, 1580, 1583, 1, 0, 0, 0, 1581, 1579, 1, 0, 0, 0, 1581, 
	1582, 1, 0, 0, 0, 1582, 1584, 1, 0, 0, 0, 1583, 1581, 1, 0, 0, 0, 1584, 
	1585, 5, 5, 0, 0, 1585, 1587, 1, 0, 0, 0, 1586, 1575, 1, 0, 0, 0, 1586, 
	1587, 1, 0, 0, 0, 1587, 1588, 1, 0, 0, 0, 1588, 1589, 5, 34, 0, 0, 1589, 
	1590, 5, 4, 0, 0, 1590, 1591, 3, 64, 32, 0, 1591, 1592, 5, 5, 0, 0, 1592, 
	125, 1, 0, 0, 0, 1593, 1606, 5, 8, 0, 0, 1594, 1595, 3, 166, 83, 0, 1595, 
	1596, 5, 3, 0, 0, 1596, 1597, 5, 8, 0, 0, 1597, 1606, 1, 0, 0, 0, 1598, 
	1603, 3, 94, 47, 0, 1599, 1601, 5, 34, 0, 0, 1600, 1599, 1, 0, 0, 0, 1600, 
	1601, 1, 0, 0, 0, 1601, 1602, 1, 0, 0, 0, 1602, 1604, 3, 152, 76, 0, 1603, 
	1600, 1, 0, 0, 0, 1603, 1604, 1, 0, 0, 0, 1604, 1606, 1, 0, 0, 0, 1605, 
	1593, 1, 0, 0, 0, 1605, 1594, 1, 0, 0, 0, 1605, 1598, 1, 0, 0, 0, 1606, 
	127, 1, 0, 0, 0, 1607, 1608, 3, 162, 81, 0, 1608, 1609, 5, 3, 0, 0, 1609, 
	1611, 1, 0, 0, 0, 1610, 1607, 1, 0, 0, 0, 1610, 1611, 1, 0, 0, 0, 1611, 
	1612, 1, 0, 0, 0, 1612, 1617, 3, 166, 83, 0, 1613, 1615, 5, 34, 0, 0, 1614, 
	1613, 1, 0, 0, 0, 1614, 1615, 1, 0, 0, 0, 1615, 1616, 1, 0, 0, 0, 1616, 
	1618, 3, 190, 95, 0, 1617, 1614, 1, 0, 0, 0, 1617, 1618, 1, 0, 0, 0, 1618, 
	1624, 1, 0, 0, 0, 1619, 1620, 5, 87, 0, 0, 1620, 1621, 5, 41, 0, 0, 1621, 
	1625, 3, 178, 89, 0, 1622, 1623, 5, 105, 0, 0, 1623, 1625, 5, 87, 0, 0, 
	1624, 1619, 1, 0, 0, 0, 1624, 1622, 1, 0, 0, 0, 1624, 1625, 1, 0, 0, 0, 
	1625, 1655, 1, 0, 0, 0, 1626, 1636, 5, 4, 0, 0, 1627, 1632, 3, 128, 64, 
	0, 1628, 1629, 5, 6, 0, 0, 1629, 1631, 3, 128, 64, 0, 1630, 1628, 1, 0, 
	0, 0, 1631, 1634, 1, 0, 0, 0, 1632, 1630, 1, 0, 0, 0, 1632, 1633, 1, 0, 
	0, 0, 1633, 1637, 1, 0, 0, 0, 1634, 1632, 1, 0, 0, 0, 1635, 1637, 3, 130, 
	65, 0, 1636, 1627, 1, 0, 0, 0, 1636, 1635, 1, 0, 0, 0, 1637, 1638, 1, 0, 
	0, 0, 1638, 1643, 5, 5, 0, 0, 1639, 1641, 5, 34, 0, 0, 1640, 1639, 1, 0, 
	0, 0, 1640, 1641, 1, 0, 0, 0, 1641, 1642, 1, 0, 0, 0, 1642, 1644, 3, 190, 
	95, 0, 1643, 1640, 1, 0, 0, 0, 1643, 1644, 1, 0, 0, 0, 1644, 1655, 1, 0, 
	0, 0, 1645, 1646, 5, 4, 0, 0, 1646, 1647, 3, 64, 32, 0, 1647, 1652, 5, 
	5, 0, 0, 1648, 1650, 5, 34, 0, 0, 1649, 1648, 1, 0, 0, 0, 1649, 1650, 1, 
	0, 0, 0, 1650, 1651, 1, 0, 0, 0, 1651, 1653, 3, 190, 95, 0, 1652, 1649, 
	1, 0, 0, 0, 1652, 1653, 1, 0, 0, 0, 1653, 1655, 1, 0, 0, 0, 1654, 1610, 
	1, 0, 0, 0, 1654, 1626, 1, 0, 0, 0, 1654, 1645, 1, 0, 0, 0, 1655, 129, 
	1, 0, 0, 0, 1656, 1663, 3, 128, 64, 0, 1657, 1658, 3, 132, 66, 0, 1658, 
	1659, 3, 128, 64, 0, 1659, 1660, 3, 134, 67, 0, 1660, 1662, 1, 0, 0, 0, 
	1661, 1657, 1, 0, 0, 0, 1662, 1665, 1, 0, 0, 0, 1663, 1661, 1, 0, 0, 0, 
	1663, 1664, 1, 0, 0, 0, 1664, 131, 1, 0, 0, 0, 1665, 1663, 1, 0, 0, 0, 
	1666, 1680, 5, 6, 0, 0, 1667, 1669, 5, 102, 0, 0, 1668, 1667, 1, 0, 0, 
	0, 1668, 1669, 1, 0, 0, 0, 1669, 1676, 1, 0, 0, 0, 1670, 1672, 5, 98, 0, 
	0, 1671, 1673, 5, 114, 0, 0, 1672, 1671, 1, 0, 0, 0, 1672, 1673, 1, 0, 
	0, 0, 1673, 1677, 1, 0, 0, 0, 1674, 1677, 5, 89, 0, 0, 1675, 1677, 5, 52, 
	0, 0, 1676, 1670, 1, 0, 0, 0, 1676, 1674, 1, 0, 0, 0, 1676, 1675, 1, 0, 
	0, 0, 1676, 1677, 1, 0, 0, 0, 1677, 1678, 1, 0, 0, 0, 1678, 1680, 5, 96, 
	0, 0, 1679, 1666, 1, 0, 0, 0, 1679, 1668, 1, 0, 0, 0, 1680, 133, 1, 0, 
	0, 0, 1681, 1682, 5, 110, 0, 0, 1682, 1696, 3, 94, 47, 0, 1683, 1684, 5, 
	144, 0, 0, 1684, 1685, 5, 4, 0, 0, 1685, 1690, 3, 172, 86, 0, 1686, 1687, 
	5, 6, 0, 0, 1687, 1689, 3, 172, 86, 0, 1688, 1686, 1, 0, 0, 0, 1689, 1692, 
	1, 0, 0, 0, 1690, 1688, 1, 0, 0, 0, 1690, 1691, 1, 0, 0, 0, 1691, 1693, 
	1, 0, 0, 0, 1692, 1690, 1, 0, 0, 0, 1693, 1694, 5, 5, 0, 0, 1694, 1696, 
	1, 0, 0, 0, 1695, 1681, 1, 0, 0, 0, 1695, 1683, 1, 0, 0, 0, 1695, 1696, 
	1, 0, 0, 0, 1696, 135, 1, 0, 0, 0, 1697, 1699, 5, 132, 0, 0, 1698, 1700, 
	7, 4, 0, 0, 1699, 1698, 1, 0, 0, 0, 1699, 1700, 1, 0, 0, 0, 1700, 1701, 
	1, 0, 0, 0, 1701, 1706, 3, 126, 63, 0, 1702, 1703, 5, 6, 0, 0, 1703, 1705, 
	3, 126, 63, 0, 1704, 1702, 1, 0, 0, 0, 1705, 1708, 1, 0, 0, 0, 1706, 1704, 
	1, 0, 0, 0, 1706, 1707, 1, 0, 0, 0, 1707, 1721, 1, 0, 0, 0, 1708, 1706, 
	1, 0, 0, 0, 1709, 1719, 5, 77, 0, 0, 1710, 1715, 3, 128, 64, 0, 1711, 1712, 
	5, 6, 0, 0, 1712, 1714, 3, 128, 64, 0, 1713, 1711, 1, 0, 0, 0, 1714, 1717, 
	1, 0, 0, 0, 1715, 1713, 1, 0, 0, 0, 1715, 1716, 1, 0, 0, 0, 1716, 1720, 
	1, 0, 0, 0, 1717, 1715, 1, 0, 0, 0, 1718, 1720, 3, 130, 65, 0, 1719, 1710, 
	1, 0, 0, 0, 1719, 1718, 1, 0, 0, 0, 1720, 1722, 1, 0, 0, 0, 1721, 1709, 
	1, 0, 0, 0, 1721, 1722, 1, 0, 0, 0, 1722, 1725, 1, 0, 0, 0, 1723, 1724, 
	5, 150, 0, 0, 1724, 1726, 3, 94, 47, 0, 1725, 1723, 1, 0, 0, 0, 1725, 1726, 
	1, 0, 0, 0, 1726, 1741, 1, 0, 0, 0, 1727, 1728, 5, 80, 0, 0, 1728, 1729, 
	5, 41, 0, 0, 1729, 1734, 3, 94, 47, 0, 1730, 1731, 5, 6, 0, 0, 1731, 1733, 
	3, 94, 47, 0, 1732, 1730, 1, 0, 0, 0, 1733, 1736, 1, 0, 0, 0, 1734, 1732, 
	1, 0, 0, 0, 1734, 1735, 1, 0, 0, 0, 1735, 1739, 1, 0, 0, 0, 1736, 1734, 
	1, 0, 0, 0, 1737, 1738, 5, 81, 0, 0, 1738, 1740, 3, 94, 47, 0, 1739, 1737, 
	1, 0, 0, 0, 1739, 1740, 1, 0, 0, 0, 1740, 1742, 1, 0, 0, 0, 1741, 1727, 
	1, 0, 0, 0, 1741, 1742, 1, 0, 0, 0, 1742, 1772, 1, 0, 0, 0, 1743, 1744, 
	5, 146, 0, 0, 1744, 1745, 5, 4, 0, 0, 1745, 1750, 3, 94, 47, 0, 1746, 1747, 
	5, 6, 0, 0, 1747, 1749, 3, 94, 47, 0, 1748, 1746, 1, 0, 0, 0, 1749, 1752, 
	1, 0, 0, 0, 1750, 1748, 1, 0, 0, 0, 1750, 1751, 1, 0, 0, 0, 1751, 1753, 
	1, 0, 0, 0, 1752, 1750, 1, 0, 0, 0, 1753, 1768, 5, 5, 0, 0, 1754, 1755, 
	5, 6, 0, 0, 1755, 1756, 5, 4, 0, 0, 1756, 1761, 3, 94, 47, 0, 1757, 1758, 
	5, 6, 0, 0, 1758, 1760, 3, 94, 47, 0, 1759, 1757, 1, 0, 0, 0, 1760, 1763, 
	1, 0, 0, 0, 1761, 1759, 1, 0, 0, 0, 1761, 1762, 1, 0, 0, 0, 1762, 1764, 
	1, 0, 0, 0, 1763, 1761, 1, 0, 0, 0, 1764, 1765, 5, 5, 0, 0, 1765, 1767, 
	1, 0, 0, 0, 1766, 1754, 1, 0, 0, 0, 1767, 1770, 1, 0, 0, 0, 1768, 1766, 
	1, 0, 0, 0, 1768, 1769, 1, 0, 0, 0, 1769, 1772, 1, 0, 0, 0, 1770, 1768, 
	1, 0, 0, 0, 1771, 1697, 1, 0, 0, 0, 1771, 1743, 1, 0, 0, 0, 1772, 137, 
	1, 0, 0, 0, 1773, 1779, 5, 141, 0, 0, 1774, 1775, 5, 141, 0, 0, 1775, 1779, 
	5, 30, 0, 0, 1776, 1779, 5, 92, 0, 0, 1777, 1779, 5, 70, 0, 0, 1778, 1773, 
	1, 0, 0, 0, 1778, 1774, 1, 0, 0, 0, 1778, 1776, 1, 0, 0, 0, 1778, 1777, 
	1, 0, 0, 0, 1779, 139, 1, 0, 0, 0, 1780, 1792, 3, 166, 83, 0, 1781, 1782, 
	5, 4, 0, 0, 1782, 1787, 3, 172, 86, 0, 1783, 1784, 5, 6, 0, 0, 1784, 1786, 
	3, 172, 86, 0, 1785, 1783, 1, 0, 0, 0, 1786, 1789, 1, 0, 0, 0, 1787, 1785, 
	1, 0, 0, 0, 1787, 1788, 1, 0, 0, 0, 1788, 1790, 1, 0, 0, 0, 1789, 1787, 
	1, 0, 0, 0, 1790, 1791, 5, 5, 0, 0, 1791, 1793, 1, 0, 0, 0, 1792, 1781, 
	1, 0, 0, 0, 1792, 1793, 1, 0, 0, 0, 1793, 141, 1, 0, 0, 0, 1794, 1796, 
	7, 8, 0, 0, 1795, 1794, 1, 0, 0, 0, 1795, 1796, 1, 0, 0, 0, 1796, 1797, 
	1, 0, 0, 0, 1797, 1800, 5, 154, 0, 0, 1798, 1800, 5, 8, 0, 0, 1799, 1795, 
	1, 0, 0, 0, 1799, 1798, 1, 0, 0, 0, 1800, 143, 1, 0, 0, 0, 1801, 1802, 
	7, 14, 0, 0, 1802, 145, 1, 0, 0, 0, 1803, 1804, 7, 15, 0, 0, 1804, 147, 
	1, 0, 0, 0, 1805, 1806, 5, 156, 0, 0, 1806, 149, 1, 0, 0, 0, 1807, 1810, 
	3, 94, 47, 0, 1808, 1810, 3, 74, 37, 0, 1809, 1807, 1, 0, 0, 0, 1809, 1808, 
	1, 0, 0, 0, 1810, 151, 1, 0, 0, 0, 1811, 1812, 7, 16, 0, 0, 1812, 153, 
	1, 0, 0, 0, 1813, 1814, 7, 17, 0, 0, 1814, 155, 1, 0, 0, 0, 1815, 1817, 
	9, 0, 0, 0, 1816, 1815, 1, 0, 0, 0, 1817, 1818, 1, 0, 0, 0, 1818, 1816, 
	1, 0, 0, 0, 1818, 1819, 1, 0, 0, 0, 1819, 157, 1, 0, 0, 0, 1820, 1821, 
	3, 194, 97, 0, 1821, 159, 1, 0, 0, 0, 1822, 1823, 3, 194, 97, 0, 1823, 
	161, 1, 0, 0, 0, 1824, 1825, 3, 194, 97, 0, 1825, 163, 1, 0, 0, 0, 1826, 
	1827, 3, 194, 97, 0, 1827, 165, 1, 0, 0, 0, 1828, 1829, 3, 194, 97, 0, 
	1829, 167, 1, 0, 0, 0, 1830, 1831, 3, 194, 97, 0, 1831, 169, 1, 0, 0, 0, 
	1832, 1833, 3, 194, 97, 0, 1833, 171, 1, 0, 0, 0, 1834, 1835, 3, 194, 97, 
	0, 1835, 173, 1, 0, 0, 0, 1836, 1837, 3, 194, 97, 0, 1837, 175, 1, 0, 0, 
	0, 1838, 1839, 3, 194, 97, 0, 1839, 177, 1, 0, 0, 0, 1840, 1841, 3, 194, 
	97, 0, 1841, 179, 1, 0, 0, 0, 1842, 1843, 3, 194, 97, 0, 1843, 181, 1, 
	0, 0, 0, 1844, 1845, 3, 194, 97, 0, 1845, 183, 1, 0, 0, 0, 1846, 1847, 
	3, 194, 97, 0, 1847, 185, 1, 0, 0, 0, 1848, 1849, 3, 194, 97, 0, 1849, 
	187, 1, 0, 0, 0, 1850, 1851, 3, 194, 97, 0, 1851, 189, 1, 0, 0, 0, 1852, 
	1853, 3, 194, 97, 0, 1853, 191, 1, 0, 0, 0, 1854, 1855, 3, 194, 97, 0, 
	1855, 193, 1, 0, 0, 0, 1856, 1864, 5, 153, 0, 0, 1857, 1864, 3, 154, 77, 
	0, 1858, 1864, 5, 156, 0, 0, 1859, 1860, 5, 4, 0, 0, 1860, 1861, 3, 194, 
	97, 0, 1861, 1862, 5, 5, 0, 0, 1862, 1864, 1, 0, 0, 0, 1863, 1856, 1, 0, 
	0, 0, 1863, 1857, 1, 0, 0, 0, 1863, 1858, 1, 0, 0, 0, 1863, 1859, 1, 0, 
	0, 0, 1864, 195, 1, 0, 0, 0, 260, 198, 200, 211, 218, 223, 229, 235, 237, 
	269, 274, 279, 289, 292, 295, 298, 315, 319, 327, 331, 333, 338, 340, 344, 
	351, 354, 359, 363, 368, 377, 380, 386, 388, 392, 398, 403, 414, 420, 424, 
	430, 435, 444, 446, 452, 456, 459, 463, 469, 474, 481, 492, 495, 497, 503, 
	509, 513, 520, 526, 532, 538, 543, 555, 560, 571, 576, 579, 586, 589, 596, 
	605, 608, 614, 616, 620, 628, 633, 641, 646, 654, 659, 667, 672, 678, 685, 
	688, 696, 706, 709, 715, 717, 720, 739, 745, 754, 759, 768, 779, 786, 792, 
	798, 807, 814, 818, 820, 824, 831, 833, 837, 840, 847, 854, 857, 867, 870, 
	876, 878, 882, 889, 892, 900, 910, 913, 919, 921, 925, 932, 941, 945, 947, 
	951, 960, 965, 967, 976, 987, 994, 997, 1000, 1013, 1027, 1032, 1035, 1048, 
	1062, 1067, 1076, 1079, 1085, 1087, 1094, 1096, 1103, 1110, 1115, 1119, 
	1123, 1139, 1144, 1148, 1171, 1177, 1179, 1183, 1188, 1196, 1201, 1210, 
	1217, 1221, 1237, 1240, 1248, 1257, 1261, 1266, 1296, 1308, 1313, 1325, 
	1331, 1338, 1342, 1352, 1355, 1361, 1364, 1366, 1368, 1375, 1384, 1389, 
	1401, 1405, 1409, 1413, 1420, 1423, 1425, 1435, 1442, 1445, 1449, 1460, 
	1470, 1484, 1492, 1495, 1503, 1511, 1519, 1529, 1545, 1551, 1559, 1564, 
	1567, 1572, 1581, 1586, 1600, 1603, 1605, 1610, 1614, 1617, 1624, 1632, 
	1636, 1640, 1643, 1649, 1652, 1654, 1663, 1668, 1672, 1676, 1679, 1690, 
	1695, 1699, 1706, 1715, 1719, 1721, 1725, 1734, 1739, 1741, 1750, 1761, 
	1768, 1771, 1778, 1787, 1792, 1795, 1799, 1809, 1818, 1863,
}
  deserializer := antlr.NewATNDeserializer(nil)
  staticData.atn = deserializer.Deserialize(staticData.serializedATN)
  atn := staticData.atn
  staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
  decisionToDFA := staticData.decisionToDFA
  for index, state := range atn.DecisionToState {
    decisionToDFA[index] = antlr.NewDFA(state, index)
  }
}

// SqlParserInit initializes any static state used to implement SqlParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewSqlParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func SqlParserInit() {
  staticData := &sqlParserStaticData
  staticData.once.Do(sqlParserInit)
}

// NewSqlParser produces a new parser instance for the optional input antlr.TokenStream.
func NewSqlParser(input antlr.TokenStream) *SqlParser {
	SqlParserInit()
	this := new(SqlParser)
	this.BaseParser = antlr.NewBaseParser(input)
  staticData := &sqlParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "Sql.g4"

	return this
}


// SqlParser tokens.
const (
	SqlParserEOF = antlr.TokenEOF
	SqlParserT__0 = 1
	SqlParserSCOL = 2
	SqlParserDOT = 3
	SqlParserOPEN_PAR = 4
	SqlParserCLOSE_PAR = 5
	SqlParserCOMMA = 6
	SqlParserASSIGN = 7
	SqlParserSTAR = 8
	SqlParserPLUS = 9
	SqlParserMINUS = 10
	SqlParserTILDE = 11
	SqlParserPIPE2 = 12
	SqlParserDIV = 13
	SqlParserMOD = 14
	SqlParserLT2 = 15
	SqlParserGT2 = 16
	SqlParserAMP = 17
	SqlParserPIPE = 18
	SqlParserLT = 19
	SqlParserLT_EQ = 20
	SqlParserGT = 21
	SqlParserGT_EQ = 22
	SqlParserEQ = 23
	SqlParserNOT_EQ1 = 24
	SqlParserNOT_EQ2 = 25
	SqlParserK_ABORT = 26
	SqlParserK_ACTION = 27
	SqlParserK_ADD = 28
	SqlParserK_AFTER = 29
	SqlParserK_ALL = 30
	SqlParserK_ALTER = 31
	SqlParserK_ANALYZE = 32
	SqlParserK_AND = 33
	SqlParserK_AS = 34
	SqlParserK_ASC = 35
	SqlParserK_ATTACH = 36
	SqlParserK_AUTOINCREMENT = 37
	SqlParserK_BEFORE = 38
	SqlParserK_BEGIN = 39
	SqlParserK_BETWEEN = 40
	SqlParserK_BY = 41
	SqlParserK_CASCADE = 42
	SqlParserK_CASE = 43
	SqlParserK_CAST = 44
	SqlParserK_CHECK = 45
	SqlParserK_COLLATE = 46
	SqlParserK_COLUMN = 47
	SqlParserK_COMMIT = 48
	SqlParserK_CONFLICT = 49
	SqlParserK_CONSTRAINT = 50
	SqlParserK_CREATE = 51
	SqlParserK_CROSS = 52
	SqlParserK_CURRENT_DATE = 53
	SqlParserK_CURRENT_TIME = 54
	SqlParserK_CURRENT_TIMESTAMP = 55
	SqlParserK_DATABASE = 56
	SqlParserK_DEFAULT = 57
	SqlParserK_DEFERRABLE = 58
	SqlParserK_DEFERRED = 59
	SqlParserK_DELETE = 60
	SqlParserK_DESC = 61
	SqlParserK_DETACH = 62
	SqlParserK_DISTINCT = 63
	SqlParserK_DROP = 64
	SqlParserK_EACH = 65
	SqlParserK_ELSE = 66
	SqlParserK_END = 67
	SqlParserK_ENABLE = 68
	SqlParserK_ESCAPE = 69
	SqlParserK_EXCEPT = 70
	SqlParserK_EXCLUSIVE = 71
	SqlParserK_EXISTS = 72
	SqlParserK_EXPLAIN = 73
	SqlParserK_FAIL = 74
	SqlParserK_FOR = 75
	SqlParserK_FOREIGN = 76
	SqlParserK_FROM = 77
	SqlParserK_FULL = 78
	SqlParserK_GLOB = 79
	SqlParserK_GROUP = 80
	SqlParserK_HAVING = 81
	SqlParserK_IF = 82
	SqlParserK_IGNORE = 83
	SqlParserK_IMMEDIATE = 84
	SqlParserK_IN = 85
	SqlParserK_INDEX = 86
	SqlParserK_INDEXED = 87
	SqlParserK_INITIALLY = 88
	SqlParserK_INNER = 89
	SqlParserK_INSERT = 90
	SqlParserK_INSTEAD = 91
	SqlParserK_INTERSECT = 92
	SqlParserK_INTO = 93
	SqlParserK_IS = 94
	SqlParserK_ISNULL = 95
	SqlParserK_JOIN = 96
	SqlParserK_KEY = 97
	SqlParserK_LEFT = 98
	SqlParserK_LIKE = 99
	SqlParserK_LIMIT = 100
	SqlParserK_MATCH = 101
	SqlParserK_NATURAL = 102
	SqlParserK_NEXTVAL = 103
	SqlParserK_NO = 104
	SqlParserK_NOT = 105
	SqlParserK_NOTNULL = 106
	SqlParserK_NULL = 107
	SqlParserK_OF = 108
	SqlParserK_OFFSET = 109
	SqlParserK_ON = 110
	SqlParserK_ONLY = 111
	SqlParserK_OR = 112
	SqlParserK_ORDER = 113
	SqlParserK_OUTER = 114
	SqlParserK_PLAN = 115
	SqlParserK_PRAGMA = 116
	SqlParserK_PRIMARY = 117
	SqlParserK_QUERY = 118
	SqlParserK_RAISE = 119
	SqlParserK_RECURSIVE = 120
	SqlParserK_REFERENCES = 121
	SqlParserK_REGEXP = 122
	SqlParserK_REINDEX = 123
	SqlParserK_RELEASE = 124
	SqlParserK_RENAME = 125
	SqlParserK_REPLACE = 126
	SqlParserK_RESTRICT = 127
	SqlParserK_RIGHT = 128
	SqlParserK_ROLLBACK = 129
	SqlParserK_ROW = 130
	SqlParserK_SAVEPOINT = 131
	SqlParserK_SELECT = 132
	SqlParserK_SET = 133
	SqlParserK_TABLE = 134
	SqlParserK_TEMP = 135
	SqlParserK_TEMPORARY = 136
	SqlParserK_THEN = 137
	SqlParserK_TO = 138
	SqlParserK_TRANSACTION = 139
	SqlParserK_TRIGGER = 140
	SqlParserK_UNION = 141
	SqlParserK_UNIQUE = 142
	SqlParserK_UPDATE = 143
	SqlParserK_USING = 144
	SqlParserK_VACUUM = 145
	SqlParserK_VALUES = 146
	SqlParserK_VIEW = 147
	SqlParserK_VIRTUAL = 148
	SqlParserK_WHEN = 149
	SqlParserK_WHERE = 150
	SqlParserK_WITH = 151
	SqlParserK_WITHOUT = 152
	SqlParserIDENTIFIER = 153
	SqlParserNUMERIC_LITERAL = 154
	SqlParserBIND_PARAMETER = 155
	SqlParserSTRING_LITERAL = 156
	SqlParserBLOB_LITERAL = 157
	SqlParserSINGLE_LINE_COMMENT = 158
	SqlParserMULTILINE_COMMENT = 159
	SqlParserSPACES = 160
	SqlParserUNEXPECTED_CHAR = 161
)

// SqlParser rules.
const (
	SqlParserRULE_parse = 0
	SqlParserRULE_error = 1
	SqlParserRULE_sql_stmt_list = 2
	SqlParserRULE_sql_stmt = 3
	SqlParserRULE_alter_table_stmt = 4
	SqlParserRULE_alter_table_add_constraint = 5
	SqlParserRULE_alter_table_add = 6
	SqlParserRULE_analyze_stmt = 7
	SqlParserRULE_attach_stmt = 8
	SqlParserRULE_begin_stmt = 9
	SqlParserRULE_commit_stmt = 10
	SqlParserRULE_compound_select_stmt = 11
	SqlParserRULE_create_index_stmt = 12
	SqlParserRULE_create_table_stmt = 13
	SqlParserRULE_create_trigger_stmt = 14
	SqlParserRULE_create_view_stmt = 15
	SqlParserRULE_create_virtual_table_stmt = 16
	SqlParserRULE_delete_stmt = 17
	SqlParserRULE_delete_stmt_limited = 18
	SqlParserRULE_detach_stmt = 19
	SqlParserRULE_drop_index_stmt = 20
	SqlParserRULE_drop_table_stmt = 21
	SqlParserRULE_drop_trigger_stmt = 22
	SqlParserRULE_drop_view_stmt = 23
	SqlParserRULE_factored_select_stmt = 24
	SqlParserRULE_insert_stmt = 25
	SqlParserRULE_pragma_stmt = 26
	SqlParserRULE_reindex_stmt = 27
	SqlParserRULE_release_stmt = 28
	SqlParserRULE_rollback_stmt = 29
	SqlParserRULE_savepoint_stmt = 30
	SqlParserRULE_simple_select_stmt = 31
	SqlParserRULE_select_stmt = 32
	SqlParserRULE_select_or_values = 33
	SqlParserRULE_update_stmt = 34
	SqlParserRULE_update_stmt_limited = 35
	SqlParserRULE_vacuum_stmt = 36
	SqlParserRULE_column_def = 37
	SqlParserRULE_type_name = 38
	SqlParserRULE_column_constraint = 39
	SqlParserRULE_column_constraint_primary_key = 40
	SqlParserRULE_column_constraint_foreign_key = 41
	SqlParserRULE_column_constraint_not_null = 42
	SqlParserRULE_column_constraint_null = 43
	SqlParserRULE_column_default = 44
	SqlParserRULE_column_default_value = 45
	SqlParserRULE_conflict_clause = 46
	SqlParserRULE_expr = 47
	SqlParserRULE_foreign_key_clause = 48
	SqlParserRULE_fk_target_column_name = 49
	SqlParserRULE_raise_function = 50
	SqlParserRULE_indexed_column = 51
	SqlParserRULE_table_constraint = 52
	SqlParserRULE_table_constraint_primary_key = 53
	SqlParserRULE_table_constraint_foreign_key = 54
	SqlParserRULE_table_constraint_unique = 55
	SqlParserRULE_table_constraint_key = 56
	SqlParserRULE_fk_origin_column_name = 57
	SqlParserRULE_with_clause = 58
	SqlParserRULE_qualified_table_name = 59
	SqlParserRULE_ordering_term = 60
	SqlParserRULE_pragma_value = 61
	SqlParserRULE_common_table_expression = 62
	SqlParserRULE_result_column = 63
	SqlParserRULE_table_or_subquery = 64
	SqlParserRULE_join_clause = 65
	SqlParserRULE_join_operator = 66
	SqlParserRULE_join_constraint = 67
	SqlParserRULE_select_core = 68
	SqlParserRULE_compound_operator = 69
	SqlParserRULE_cte_table_name = 70
	SqlParserRULE_signed_number = 71
	SqlParserRULE_literal_value = 72
	SqlParserRULE_unary_operator = 73
	SqlParserRULE_error_message = 74
	SqlParserRULE_module_argument = 75
	SqlParserRULE_column_alias = 76
	SqlParserRULE_keyword = 77
	SqlParserRULE_unknown = 78
	SqlParserRULE_name = 79
	SqlParserRULE_function_name = 80
	SqlParserRULE_database_name = 81
	SqlParserRULE_source_table_name = 82
	SqlParserRULE_table_name = 83
	SqlParserRULE_table_or_index_name = 84
	SqlParserRULE_new_table_name = 85
	SqlParserRULE_column_name = 86
	SqlParserRULE_collation_name = 87
	SqlParserRULE_foreign_table = 88
	SqlParserRULE_index_name = 89
	SqlParserRULE_trigger_name = 90
	SqlParserRULE_view_name = 91
	SqlParserRULE_module_name = 92
	SqlParserRULE_pragma_name = 93
	SqlParserRULE_savepoint_name = 94
	SqlParserRULE_table_alias = 95
	SqlParserRULE_transaction_name = 96
	SqlParserRULE_any_name = 97
)

// IParseContext is an interface to support dynamic dispatch.
type IParseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParseContext differentiates from other interfaces.
	IsParseContext()
}

type ParseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParseContext() *ParseContext {
	var p = new(ParseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_parse
	return p
}

func (*ParseContext) IsParseContext() {}

func NewParseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParseContext {
	var p = new(ParseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_parse

	return p
}

func (s *ParseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParseContext) EOF() antlr.TerminalNode {
	return s.GetToken(SqlParserEOF, 0)
}

func (s *ParseContext) AllSql_stmt_list() []ISql_stmt_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_stmt_listContext); ok {
			len++
		}
	}

	tst := make([]ISql_stmt_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_stmt_listContext); ok {
			tst[i] = t.(ISql_stmt_listContext)
			i++
		}
	}

	return tst
}

func (s *ParseContext) Sql_stmt_list(i int) ISql_stmt_listContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_stmt_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_stmt_listContext)
}

func (s *ParseContext) AllError() []IErrorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IErrorContext); ok {
			len++
		}
	}

	tst := make([]IErrorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IErrorContext); ok {
			tst[i] = t.(IErrorContext)
			i++
		}
	}

	return tst
}

func (s *ParseContext) Error(i int) IErrorContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IErrorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IErrorContext)
}

func (s *ParseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ParseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterParse(s)
	}
}

func (s *ParseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitParse(s)
	}
}




func (p *SqlParser) Parse() (localctx IParseContext) {
	this := p
	_ = this

	localctx = NewParseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SqlParserRULE_parse)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(200)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserSCOL || _la == SqlParserK_ALTER || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SqlParserK_ANALYZE - 32)) | (1 << (SqlParserK_ATTACH - 32)) | (1 << (SqlParserK_BEGIN - 32)) | (1 << (SqlParserK_COMMIT - 32)) | (1 << (SqlParserK_CREATE - 32)) | (1 << (SqlParserK_DELETE - 32)) | (1 << (SqlParserK_DETACH - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SqlParserK_DROP - 64)) | (1 << (SqlParserK_END - 64)) | (1 << (SqlParserK_EXPLAIN - 64)) | (1 << (SqlParserK_INSERT - 64)))) != 0) || ((((_la - 116)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 116))) & ((1 << (SqlParserK_PRAGMA - 116)) | (1 << (SqlParserK_REINDEX - 116)) | (1 << (SqlParserK_RELEASE - 116)) | (1 << (SqlParserK_REPLACE - 116)) | (1 << (SqlParserK_ROLLBACK - 116)) | (1 << (SqlParserK_SAVEPOINT - 116)) | (1 << (SqlParserK_SELECT - 116)) | (1 << (SqlParserK_UPDATE - 116)) | (1 << (SqlParserK_VACUUM - 116)) | (1 << (SqlParserK_VALUES - 116)))) != 0) || _la == SqlParserK_WITH || _la == SqlParserUNEXPECTED_CHAR {
		p.SetState(198)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SqlParserSCOL, SqlParserK_ALTER, SqlParserK_ANALYZE, SqlParserK_ATTACH, SqlParserK_BEGIN, SqlParserK_COMMIT, SqlParserK_CREATE, SqlParserK_DELETE, SqlParserK_DETACH, SqlParserK_DROP, SqlParserK_END, SqlParserK_EXPLAIN, SqlParserK_INSERT, SqlParserK_PRAGMA, SqlParserK_REINDEX, SqlParserK_RELEASE, SqlParserK_REPLACE, SqlParserK_ROLLBACK, SqlParserK_SAVEPOINT, SqlParserK_SELECT, SqlParserK_UPDATE, SqlParserK_VACUUM, SqlParserK_VALUES, SqlParserK_WITH:
			{
				p.SetState(196)
				p.Sql_stmt_list()
			}


		case SqlParserUNEXPECTED_CHAR:
			{
				p.SetState(197)
				p.Error()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(202)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(203)
		p.Match(SqlParserEOF)
	}



	return localctx
}


// IErrorContext is an interface to support dynamic dispatch.
type IErrorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_UNEXPECTED_CHAR returns the _UNEXPECTED_CHAR token.
	Get_UNEXPECTED_CHAR() antlr.Token 


	// Set_UNEXPECTED_CHAR sets the _UNEXPECTED_CHAR token.
	Set_UNEXPECTED_CHAR(antlr.Token) 


	// IsErrorContext differentiates from other interfaces.
	IsErrorContext()
}

type ErrorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_UNEXPECTED_CHAR antlr.Token
}

func NewEmptyErrorContext() *ErrorContext {
	var p = new(ErrorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_error
	return p
}

func (*ErrorContext) IsErrorContext() {}

func NewErrorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ErrorContext {
	var p = new(ErrorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_error

	return p
}

func (s *ErrorContext) GetParser() antlr.Parser { return s.parser }

func (s *ErrorContext) Get_UNEXPECTED_CHAR() antlr.Token { return s._UNEXPECTED_CHAR }


func (s *ErrorContext) Set_UNEXPECTED_CHAR(v antlr.Token) { s._UNEXPECTED_CHAR = v }


func (s *ErrorContext) UNEXPECTED_CHAR() antlr.TerminalNode {
	return s.GetToken(SqlParserUNEXPECTED_CHAR, 0)
}

func (s *ErrorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ErrorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ErrorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterError(s)
	}
}

func (s *ErrorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitError(s)
	}
}




func (p *SqlParser) Error() (localctx IErrorContext) {
	this := p
	_ = this

	localctx = NewErrorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SqlParserRULE_error)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(205)

		var _m = p.Match(SqlParserUNEXPECTED_CHAR)

		localctx.(*ErrorContext)._UNEXPECTED_CHAR = _m
	}





	return localctx
}


// ISql_stmt_listContext is an interface to support dynamic dispatch.
type ISql_stmt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stmt_listContext differentiates from other interfaces.
	IsSql_stmt_listContext()
}

type Sql_stmt_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmt_listContext() *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_sql_stmt_list
	return p
}

func (*Sql_stmt_listContext) IsSql_stmt_listContext() {}

func NewSql_stmt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_sql_stmt_list

	return p
}

func (s *Sql_stmt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmt_listContext) AllSql_stmt() []ISql_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISql_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_stmtContext); ok {
			tst[i] = t.(ISql_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Sql_stmt_listContext) Sql_stmt(i int) ISql_stmtContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_stmtContext)
}

func (s *Sql_stmt_listContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SqlParserSCOL)
}

func (s *Sql_stmt_listContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserSCOL, i)
}

func (s *Sql_stmt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sql_stmt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSql_stmt_list(s)
	}
}




func (p *SqlParser) Sql_stmt_list() (localctx ISql_stmt_listContext) {
	this := p
	_ = this

	localctx = NewSql_stmt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SqlParserRULE_sql_stmt_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(211)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserSCOL {
		{
			p.SetState(208)
			p.Match(SqlParserSCOL)
		}


		p.SetState(213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(214)
		p.Sql_stmt()
	}
	p.SetState(223)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(216)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for ok := true; ok; ok = _la == SqlParserSCOL {
				{
					p.SetState(215)
					p.Match(SqlParserSCOL)
				}


				p.SetState(218)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(220)
				p.Sql_stmt()
			}


		}
		p.SetState(225)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}
	p.SetState(229)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(226)
				p.Match(SqlParserSCOL)
			}


		}
		p.SetState(231)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}



	return localctx
}


// ISql_stmtContext is an interface to support dynamic dispatch.
type ISql_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_stmtContext differentiates from other interfaces.
	IsSql_stmtContext()
}

type Sql_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmtContext() *Sql_stmtContext {
	var p = new(Sql_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_sql_stmt
	return p
}

func (*Sql_stmtContext) IsSql_stmtContext() {}

func NewSql_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmtContext {
	var p = new(Sql_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_sql_stmt

	return p
}

func (s *Sql_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmtContext) Alter_table_stmt() IAlter_table_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_stmtContext)
}

func (s *Sql_stmtContext) Analyze_stmt() IAnalyze_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnalyze_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnalyze_stmtContext)
}

func (s *Sql_stmtContext) Attach_stmt() IAttach_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttach_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttach_stmtContext)
}

func (s *Sql_stmtContext) Begin_stmt() IBegin_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_stmtContext)
}

func (s *Sql_stmtContext) Commit_stmt() ICommit_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommit_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommit_stmtContext)
}

func (s *Sql_stmtContext) Compound_select_stmt() ICompound_select_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_select_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_select_stmtContext)
}

func (s *Sql_stmtContext) Create_index_stmt() ICreate_index_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_index_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_index_stmtContext)
}

func (s *Sql_stmtContext) Create_table_stmt() ICreate_table_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_table_stmtContext)
}

func (s *Sql_stmtContext) Create_trigger_stmt() ICreate_trigger_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_trigger_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_stmtContext)
}

func (s *Sql_stmtContext) Create_view_stmt() ICreate_view_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_view_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_view_stmtContext)
}

func (s *Sql_stmtContext) Create_virtual_table_stmt() ICreate_virtual_table_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_virtual_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_virtual_table_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt_limited() IDelete_stmt_limitedContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmt_limitedContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmt_limitedContext)
}

func (s *Sql_stmtContext) Detach_stmt() IDetach_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDetach_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDetach_stmtContext)
}

func (s *Sql_stmtContext) Drop_index_stmt() IDrop_index_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_index_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_index_stmtContext)
}

func (s *Sql_stmtContext) Drop_table_stmt() IDrop_table_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_table_stmtContext)
}

func (s *Sql_stmtContext) Drop_trigger_stmt() IDrop_trigger_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_trigger_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_trigger_stmtContext)
}

func (s *Sql_stmtContext) Drop_view_stmt() IDrop_view_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_view_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_view_stmtContext)
}

func (s *Sql_stmtContext) Factored_select_stmt() IFactored_select_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFactored_select_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFactored_select_stmtContext)
}

func (s *Sql_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Sql_stmtContext) Pragma_stmt() IPragma_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_stmtContext)
}

func (s *Sql_stmtContext) Reindex_stmt() IReindex_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReindex_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReindex_stmtContext)
}

func (s *Sql_stmtContext) Release_stmt() IRelease_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelease_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelease_stmtContext)
}

func (s *Sql_stmtContext) Rollback_stmt() IRollback_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollback_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollback_stmtContext)
}

func (s *Sql_stmtContext) Savepoint_stmt() ISavepoint_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_stmtContext)
}

func (s *Sql_stmtContext) Simple_select_stmt() ISimple_select_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_select_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_select_stmtContext)
}

func (s *Sql_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt_limited() IUpdate_stmt_limitedContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmt_limitedContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmt_limitedContext)
}

func (s *Sql_stmtContext) Vacuum_stmt() IVacuum_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVacuum_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVacuum_stmtContext)
}

func (s *Sql_stmtContext) K_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXPLAIN, 0)
}

func (s *Sql_stmtContext) K_QUERY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_QUERY, 0)
}

func (s *Sql_stmtContext) K_PLAN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PLAN, 0)
}

func (s *Sql_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sql_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSql_stmt(s)
	}
}

func (s *Sql_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSql_stmt(s)
	}
}




func (p *SqlParser) Sql_stmt() (localctx ISql_stmtContext) {
	this := p
	_ = this

	localctx = NewSql_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SqlParserRULE_sql_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_EXPLAIN {
		{
			p.SetState(232)
			p.Match(SqlParserK_EXPLAIN)
		}
		p.SetState(235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_QUERY {
			{
				p.SetState(233)
				p.Match(SqlParserK_QUERY)
			}
			{
				p.SetState(234)
				p.Match(SqlParserK_PLAN)
			}

		}

	}
	p.SetState(269)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(239)
			p.Alter_table_stmt()
		}


	case 2:
		{
			p.SetState(240)
			p.Analyze_stmt()
		}


	case 3:
		{
			p.SetState(241)
			p.Attach_stmt()
		}


	case 4:
		{
			p.SetState(242)
			p.Begin_stmt()
		}


	case 5:
		{
			p.SetState(243)
			p.Commit_stmt()
		}


	case 6:
		{
			p.SetState(244)
			p.Compound_select_stmt()
		}


	case 7:
		{
			p.SetState(245)
			p.Create_index_stmt()
		}


	case 8:
		{
			p.SetState(246)
			p.Create_table_stmt()
		}


	case 9:
		{
			p.SetState(247)
			p.Create_trigger_stmt()
		}


	case 10:
		{
			p.SetState(248)
			p.Create_view_stmt()
		}


	case 11:
		{
			p.SetState(249)
			p.Create_virtual_table_stmt()
		}


	case 12:
		{
			p.SetState(250)
			p.Delete_stmt()
		}


	case 13:
		{
			p.SetState(251)
			p.Delete_stmt_limited()
		}


	case 14:
		{
			p.SetState(252)
			p.Detach_stmt()
		}


	case 15:
		{
			p.SetState(253)
			p.Drop_index_stmt()
		}


	case 16:
		{
			p.SetState(254)
			p.Drop_table_stmt()
		}


	case 17:
		{
			p.SetState(255)
			p.Drop_trigger_stmt()
		}


	case 18:
		{
			p.SetState(256)
			p.Drop_view_stmt()
		}


	case 19:
		{
			p.SetState(257)
			p.Factored_select_stmt()
		}


	case 20:
		{
			p.SetState(258)
			p.Insert_stmt()
		}


	case 21:
		{
			p.SetState(259)
			p.Pragma_stmt()
		}


	case 22:
		{
			p.SetState(260)
			p.Reindex_stmt()
		}


	case 23:
		{
			p.SetState(261)
			p.Release_stmt()
		}


	case 24:
		{
			p.SetState(262)
			p.Rollback_stmt()
		}


	case 25:
		{
			p.SetState(263)
			p.Savepoint_stmt()
		}


	case 26:
		{
			p.SetState(264)
			p.Simple_select_stmt()
		}


	case 27:
		{
			p.SetState(265)
			p.Select_stmt()
		}


	case 28:
		{
			p.SetState(266)
			p.Update_stmt()
		}


	case 29:
		{
			p.SetState(267)
			p.Update_stmt_limited()
		}


	case 30:
		{
			p.SetState(268)
			p.Vacuum_stmt()
		}

	}



	return localctx
}


// IAlter_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_stmtContext differentiates from other interfaces.
	IsAlter_table_stmtContext()
}

type Alter_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_stmtContext() *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_alter_table_stmt
	return p
}

func (*Alter_table_stmtContext) IsAlter_table_stmtContext() {}

func NewAlter_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_alter_table_stmt

	return p
}

func (s *Alter_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_stmtContext) K_ALTER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALTER, 0)
}

func (s *Alter_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TABLE, 0)
}

func (s *Alter_table_stmtContext) Source_table_name() ISource_table_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISource_table_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISource_table_nameContext)
}

func (s *Alter_table_stmtContext) K_RENAME() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RENAME, 0)
}

func (s *Alter_table_stmtContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TO, 0)
}

func (s *Alter_table_stmtContext) New_table_name() INew_table_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_table_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_table_nameContext)
}

func (s *Alter_table_stmtContext) Alter_table_add() IAlter_table_addContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_addContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_addContext)
}

func (s *Alter_table_stmtContext) Alter_table_add_constraint() IAlter_table_add_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_add_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_add_constraintContext)
}

func (s *Alter_table_stmtContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ADD, 0)
}

func (s *Alter_table_stmtContext) Column_def() IColumn_defContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Alter_table_stmtContext) K_ONLY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ONLY, 0)
}

func (s *Alter_table_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Alter_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Alter_table_stmtContext) K_ENABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ENABLE, 0)
}

func (s *Alter_table_stmtContext) Unknown() IUnknownContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnknownContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnknownContext)
}

func (s *Alter_table_stmtContext) K_COLUMN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLUMN, 0)
}

func (s *Alter_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitAlter_table_stmt(s)
	}
}




func (p *SqlParser) Alter_table_stmt() (localctx IAlter_table_stmtContext) {
	this := p
	_ = this

	localctx = NewAlter_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SqlParserRULE_alter_table_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(271)
		p.Match(SqlParserK_ALTER)
	}
	{
		p.SetState(272)
		p.Match(SqlParserK_TABLE)
	}
	p.SetState(274)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_ONLY {
		{
			p.SetState(273)
			p.Match(SqlParserK_ONLY)
		}

	}
	p.SetState(279)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(276)
			p.Database_name()
		}
		{
			p.SetState(277)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(281)
		p.Source_table_name()
	}
	p.SetState(292)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(282)
			p.Match(SqlParserK_RENAME)
		}
		{
			p.SetState(283)
			p.Match(SqlParserK_TO)
		}
		{
			p.SetState(284)
			p.New_table_name()
		}


	case 2:
		{
			p.SetState(285)
			p.Alter_table_add()
		}


	case 3:
		{
			p.SetState(286)
			p.Alter_table_add_constraint()
		}


	case 4:
		{
			p.SetState(287)
			p.Match(SqlParserK_ADD)
		}
		p.SetState(289)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(288)
				p.Match(SqlParserK_COLUMN)
			}


		}
		{
			p.SetState(291)
			p.Column_def()
		}

	}
	p.SetState(295)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(294)
			p.Match(SqlParserK_ENABLE)
		}


	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(297)
			p.Unknown()
		}


	}



	return localctx
}


// IAlter_table_add_constraintContext is an interface to support dynamic dispatch.
type IAlter_table_add_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_add_constraintContext differentiates from other interfaces.
	IsAlter_table_add_constraintContext()
}

type Alter_table_add_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_add_constraintContext() *Alter_table_add_constraintContext {
	var p = new(Alter_table_add_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_alter_table_add_constraint
	return p
}

func (*Alter_table_add_constraintContext) IsAlter_table_add_constraintContext() {}

func NewAlter_table_add_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_add_constraintContext {
	var p = new(Alter_table_add_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_alter_table_add_constraint

	return p
}

func (s *Alter_table_add_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_add_constraintContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ADD, 0)
}

func (s *Alter_table_add_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CONSTRAINT, 0)
}

func (s *Alter_table_add_constraintContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Alter_table_add_constraintContext) Table_constraint() ITable_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Alter_table_add_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_add_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_table_add_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterAlter_table_add_constraint(s)
	}
}

func (s *Alter_table_add_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitAlter_table_add_constraint(s)
	}
}




func (p *SqlParser) Alter_table_add_constraint() (localctx IAlter_table_add_constraintContext) {
	this := p
	_ = this

	localctx = NewAlter_table_add_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SqlParserRULE_alter_table_add_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(300)
		p.Match(SqlParserK_ADD)
	}
	{
		p.SetState(301)
		p.Match(SqlParserK_CONSTRAINT)
	}
	{
		p.SetState(302)
		p.Any_name()
	}
	{
		p.SetState(303)
		p.Table_constraint()
	}



	return localctx
}


// IAlter_table_addContext is an interface to support dynamic dispatch.
type IAlter_table_addContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_addContext differentiates from other interfaces.
	IsAlter_table_addContext()
}

type Alter_table_addContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_addContext() *Alter_table_addContext {
	var p = new(Alter_table_addContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_alter_table_add
	return p
}

func (*Alter_table_addContext) IsAlter_table_addContext() {}

func NewAlter_table_addContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_addContext {
	var p = new(Alter_table_addContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_alter_table_add

	return p
}

func (s *Alter_table_addContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_addContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ADD, 0)
}

func (s *Alter_table_addContext) Table_constraint() ITable_constraintContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraintContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Alter_table_addContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_addContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_table_addContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterAlter_table_add(s)
	}
}

func (s *Alter_table_addContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitAlter_table_add(s)
	}
}




func (p *SqlParser) Alter_table_add() (localctx IAlter_table_addContext) {
	this := p
	_ = this

	localctx = NewAlter_table_addContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SqlParserRULE_alter_table_add)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(305)
		p.Match(SqlParserK_ADD)
	}
	{
		p.SetState(306)
		p.Table_constraint()
	}



	return localctx
}


// IAnalyze_stmtContext is an interface to support dynamic dispatch.
type IAnalyze_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyze_stmtContext differentiates from other interfaces.
	IsAnalyze_stmtContext()
}

type Analyze_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_stmtContext() *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_analyze_stmt
	return p
}

func (*Analyze_stmtContext) IsAnalyze_stmtContext() {}

func NewAnalyze_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_analyze_stmt

	return p
}

func (s *Analyze_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_stmtContext) K_ANALYZE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ANALYZE, 0)
}

func (s *Analyze_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Analyze_stmtContext) Table_or_index_name() ITable_or_index_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_index_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_index_nameContext)
}

func (s *Analyze_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Analyze_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Analyze_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitAnalyze_stmt(s)
	}
}




func (p *SqlParser) Analyze_stmt() (localctx IAnalyze_stmtContext) {
	this := p
	_ = this

	localctx = NewAnalyze_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SqlParserRULE_analyze_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(308)
		p.Match(SqlParserK_ANALYZE)
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(309)
			p.Database_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(310)
			p.Table_or_index_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(311)
			p.Database_name()
		}
		{
			p.SetState(312)
			p.Match(SqlParserDOT)
		}
		{
			p.SetState(313)
			p.Table_or_index_name()
		}


	}



	return localctx
}


// IAttach_stmtContext is an interface to support dynamic dispatch.
type IAttach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttach_stmtContext differentiates from other interfaces.
	IsAttach_stmtContext()
}

type Attach_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttach_stmtContext() *Attach_stmtContext {
	var p = new(Attach_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_attach_stmt
	return p
}

func (*Attach_stmtContext) IsAttach_stmtContext() {}

func NewAttach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attach_stmtContext {
	var p = new(Attach_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_attach_stmt

	return p
}

func (s *Attach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Attach_stmtContext) K_ATTACH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ATTACH, 0)
}

func (s *Attach_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Attach_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *Attach_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Attach_stmtContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DATABASE, 0)
}

func (s *Attach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Attach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitAttach_stmt(s)
	}
}




func (p *SqlParser) Attach_stmt() (localctx IAttach_stmtContext) {
	this := p
	_ = this

	localctx = NewAttach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SqlParserRULE_attach_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(317)
		p.Match(SqlParserK_ATTACH)
	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(318)
			p.Match(SqlParserK_DATABASE)
		}


	}
	{
		p.SetState(321)
		p.expr(0)
	}
	{
		p.SetState(322)
		p.Match(SqlParserK_AS)
	}
	{
		p.SetState(323)
		p.Database_name()
	}



	return localctx
}


// IBegin_stmtContext is an interface to support dynamic dispatch.
type IBegin_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBegin_stmtContext differentiates from other interfaces.
	IsBegin_stmtContext()
}

type Begin_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_stmtContext() *Begin_stmtContext {
	var p = new(Begin_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_begin_stmt
	return p
}

func (*Begin_stmtContext) IsBegin_stmtContext() {}

func NewBegin_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_stmtContext {
	var p = new(Begin_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_begin_stmt

	return p
}

func (s *Begin_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_stmtContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BEGIN, 0)
}

func (s *Begin_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRANSACTION, 0)
}

func (s *Begin_stmtContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFERRED, 0)
}

func (s *Begin_stmtContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IMMEDIATE, 0)
}

func (s *Begin_stmtContext) K_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXCLUSIVE, 0)
}

func (s *Begin_stmtContext) Transaction_name() ITransaction_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Begin_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Begin_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitBegin_stmt(s)
	}
}




func (p *SqlParser) Begin_stmt() (localctx IBegin_stmtContext) {
	this := p
	_ = this

	localctx = NewBegin_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SqlParserRULE_begin_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(325)
		p.Match(SqlParserK_BEGIN)
	}
	p.SetState(327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 59)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 59))) & ((1 << (SqlParserK_DEFERRED - 59)) | (1 << (SqlParserK_EXCLUSIVE - 59)) | (1 << (SqlParserK_IMMEDIATE - 59)))) != 0) {
		{
			p.SetState(326)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 59)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 59))) & ((1 << (SqlParserK_DEFERRED - 59)) | (1 << (SqlParserK_EXCLUSIVE - 59)) | (1 << (SqlParserK_IMMEDIATE - 59)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TRANSACTION {
		{
			p.SetState(329)
			p.Match(SqlParserK_TRANSACTION)
		}
		p.SetState(331)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(330)
				p.Transaction_name()
			}


		}

	}



	return localctx
}


// ICommit_stmtContext is an interface to support dynamic dispatch.
type ICommit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommit_stmtContext differentiates from other interfaces.
	IsCommit_stmtContext()
}

type Commit_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_stmtContext() *Commit_stmtContext {
	var p = new(Commit_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_commit_stmt
	return p
}

func (*Commit_stmtContext) IsCommit_stmtContext() {}

func NewCommit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_stmtContext {
	var p = new(Commit_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_commit_stmt

	return p
}

func (s *Commit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_stmtContext) K_COMMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COMMIT, 0)
}

func (s *Commit_stmtContext) K_END() antlr.TerminalNode {
	return s.GetToken(SqlParserK_END, 0)
}

func (s *Commit_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRANSACTION, 0)
}

func (s *Commit_stmtContext) Transaction_name() ITransaction_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Commit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Commit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCommit_stmt(s)
	}
}




func (p *SqlParser) Commit_stmt() (localctx ICommit_stmtContext) {
	this := p
	_ = this

	localctx = NewCommit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SqlParserRULE_commit_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(335)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlParserK_COMMIT || _la == SqlParserK_END) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TRANSACTION {
		{
			p.SetState(336)
			p.Match(SqlParserK_TRANSACTION)
		}
		p.SetState(338)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(337)
				p.Transaction_name()
			}


		}

	}



	return localctx
}


// ICompound_select_stmtContext is an interface to support dynamic dispatch.
type ICompound_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_select_stmtContext differentiates from other interfaces.
	IsCompound_select_stmtContext()
}

type Compound_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_select_stmtContext() *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_compound_select_stmt
	return p
}

func (*Compound_select_stmtContext) IsCompound_select_stmtContext() {}

func NewCompound_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_compound_select_stmt

	return p
}

func (s *Compound_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_coreContext); ok {
			len++
		}
	}

	tst := make([]ISelect_coreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_coreContext); ok {
			tst[i] = t.(ISelect_coreContext)
			i++
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Compound_select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITH, 0)
}

func (s *Compound_select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Compound_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *Compound_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Compound_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Compound_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *Compound_select_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Compound_select_stmtContext) AllK_UNION() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_UNION)
}

func (s *Compound_select_stmtContext) K_UNION(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNION, i)
}

func (s *Compound_select_stmtContext) AllK_INTERSECT() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_INTERSECT)
}

func (s *Compound_select_stmtContext) K_INTERSECT(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_INTERSECT, i)
}

func (s *Compound_select_stmtContext) AllK_EXCEPT() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_EXCEPT)
}

func (s *Compound_select_stmtContext) K_EXCEPT(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXCEPT, i)
}

func (s *Compound_select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RECURSIVE, 0)
}

func (s *Compound_select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Compound_select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Compound_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *Compound_select_stmtContext) AllK_ALL() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_ALL)
}

func (s *Compound_select_stmtContext) K_ALL(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALL, i)
}

func (s *Compound_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Compound_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCompound_select_stmt(s)
	}
}

func (s *Compound_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCompound_select_stmt(s)
	}
}




func (p *SqlParser) Compound_select_stmt() (localctx ICompound_select_stmtContext) {
	this := p
	_ = this

	localctx = NewCompound_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SqlParserRULE_compound_select_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(354)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(342)
			p.Match(SqlParserK_WITH)
		}
		p.SetState(344)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(343)
				p.Match(SqlParserK_RECURSIVE)
			}


		}
		{
			p.SetState(346)
			p.Common_table_expression()
		}
		p.SetState(351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(347)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(348)
				p.Common_table_expression()
			}


			p.SetState(353)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(356)
		p.Select_core()
	}
	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SqlParserK_EXCEPT || _la == SqlParserK_INTERSECT || _la == SqlParserK_UNION {
		p.SetState(363)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SqlParserK_UNION:
			{
				p.SetState(357)
				p.Match(SqlParserK_UNION)
			}
			p.SetState(359)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SqlParserK_ALL {
				{
					p.SetState(358)
					p.Match(SqlParserK_ALL)
				}

			}


		case SqlParserK_INTERSECT:
			{
				p.SetState(361)
				p.Match(SqlParserK_INTERSECT)
			}


		case SqlParserK_EXCEPT:
			{
				p.SetState(362)
				p.Match(SqlParserK_EXCEPT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(365)
			p.Select_core()
		}


		p.SetState(368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_ORDER {
		{
			p.SetState(370)
			p.Match(SqlParserK_ORDER)
		}
		{
			p.SetState(371)
			p.Match(SqlParserK_BY)
		}
		{
			p.SetState(372)
			p.Ordering_term()
		}
		p.SetState(377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(373)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(374)
				p.Ordering_term()
			}


			p.SetState(379)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_LIMIT {
		{
			p.SetState(382)
			p.Match(SqlParserK_LIMIT)
		}
		{
			p.SetState(383)
			p.expr(0)
		}
		p.SetState(386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserCOMMA || _la == SqlParserK_OFFSET {
			{
				p.SetState(384)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserCOMMA || _la == SqlParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(385)
				p.expr(0)
			}

		}

	}



	return localctx
}


// ICreate_index_stmtContext is an interface to support dynamic dispatch.
type ICreate_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_index_stmtContext differentiates from other interfaces.
	IsCreate_index_stmtContext()
}

type Create_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_index_stmtContext() *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_create_index_stmt
	return p
}

func (*Create_index_stmtContext) IsCreate_index_stmtContext() {}

func NewCreate_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_create_index_stmt

	return p
}

func (s *Create_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CREATE, 0)
}

func (s *Create_index_stmtContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INDEX, 0)
}

func (s *Create_index_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Create_index_stmtContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ON, 0)
}

func (s *Create_index_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_index_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Create_index_stmtContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Create_index_stmtContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Create_index_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Create_index_stmtContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNIQUE, 0)
}

func (s *Create_index_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Create_index_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Create_index_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Create_index_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Create_index_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Create_index_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Create_index_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Create_index_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCreate_index_stmt(s)
	}
}




func (p *SqlParser) Create_index_stmt() (localctx ICreate_index_stmtContext) {
	this := p
	_ = this

	localctx = NewCreate_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SqlParserRULE_create_index_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(390)
		p.Match(SqlParserK_CREATE)
	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_UNIQUE {
		{
			p.SetState(391)
			p.Match(SqlParserK_UNIQUE)
		}

	}
	{
		p.SetState(394)
		p.Match(SqlParserK_INDEX)
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(395)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(396)
			p.Match(SqlParserK_NOT)
		}
		{
			p.SetState(397)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(403)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(400)
			p.Database_name()
		}
		{
			p.SetState(401)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(405)
		p.Index_name()
	}
	{
		p.SetState(406)
		p.Match(SqlParserK_ON)
	}
	{
		p.SetState(407)
		p.Table_name()
	}
	{
		p.SetState(408)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(409)
		p.Indexed_column()
	}
	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(410)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(411)
			p.Indexed_column()
		}


		p.SetState(416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(417)
		p.Match(SqlParserCLOSE_PAR)
	}
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WHERE {
		{
			p.SetState(418)
			p.Match(SqlParserK_WHERE)
		}
		{
			p.SetState(419)
			p.expr(0)
		}

	}



	return localctx
}


// ICreate_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_table_stmtContext differentiates from other interfaces.
	IsCreate_table_stmtContext()
}

type Create_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_stmtContext() *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_create_table_stmt
	return p
}

func (*Create_table_stmtContext) IsCreate_table_stmtContext() {}

func NewCreate_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_create_table_stmt

	return p
}

func (s *Create_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CREATE, 0)
}

func (s *Create_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TABLE, 0)
}

func (s *Create_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Create_table_stmtContext) AllColumn_def() []IColumn_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_defContext); ok {
			len++
		}
	}

	tst := make([]IColumn_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_defContext); ok {
			tst[i] = t.(IColumn_defContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Column_def(i int) IColumn_defContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Create_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Create_table_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *Create_table_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Create_table_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Create_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Create_table_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Create_table_stmtContext) Unknown() IUnknownContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnknownContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnknownContext)
}

func (s *Create_table_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMP, 0)
}

func (s *Create_table_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMPORARY, 0)
}

func (s *Create_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Create_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Create_table_stmtContext) AllTable_constraint() []ITable_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_constraintContext); ok {
			len++
		}
	}

	tst := make([]ITable_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_constraintContext); ok {
			tst[i] = t.(ITable_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Table_constraint(i int) ITable_constraintContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Create_table_stmtContext) K_WITHOUT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITHOUT, 0)
}

func (s *Create_table_stmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlParserIDENTIFIER, 0)
}

func (s *Create_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCreate_table_stmt(s)
	}
}




func (p *SqlParser) Create_table_stmt() (localctx ICreate_table_stmtContext) {
	this := p
	_ = this

	localctx = NewCreate_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SqlParserRULE_create_table_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(422)
		p.Match(SqlParserK_CREATE)
	}
	p.SetState(424)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TEMP || _la == SqlParserK_TEMPORARY {
		{
			p.SetState(423)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_TEMP || _la == SqlParserK_TEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(426)
		p.Match(SqlParserK_TABLE)
	}
	p.SetState(430)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(427)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(428)
			p.Match(SqlParserK_NOT)
		}
		{
			p.SetState(429)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(435)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(432)
			p.Database_name()
		}
		{
			p.SetState(433)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(437)
		p.Table_name()
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserOPEN_PAR:
		{
			p.SetState(438)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(439)
			p.Column_def()
		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			p.SetState(444)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(440)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(441)
					p.Table_constraint()
				}


			case 2:
				{
					p.SetState(442)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(443)
					p.Column_def()
				}

			}

			p.SetState(448)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(449)
			p.Match(SqlParserCLOSE_PAR)
		}
		p.SetState(452)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(450)
				p.Match(SqlParserK_WITHOUT)
			}
			{
				p.SetState(451)
				p.Match(SqlParserIDENTIFIER)
			}


		}


	case SqlParserK_AS:
		{
			p.SetState(454)
			p.Match(SqlParserK_AS)
		}
		{
			p.SetState(455)
			p.Select_stmt()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(459)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(458)
			p.Unknown()
		}


	}



	return localctx
}


// ICreate_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_trigger_stmtContext differentiates from other interfaces.
	IsCreate_trigger_stmtContext()
}

type Create_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_trigger_stmtContext() *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_create_trigger_stmt
	return p
}

func (*Create_trigger_stmtContext) IsCreate_trigger_stmtContext() {}

func NewCreate_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_create_trigger_stmt

	return p
}

func (s *Create_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CREATE, 0)
}

func (s *Create_trigger_stmtContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRIGGER, 0)
}

func (s *Create_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrigger_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Create_trigger_stmtContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ON, 0)
}

func (s *Create_trigger_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_trigger_stmtContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BEGIN, 0)
}

func (s *Create_trigger_stmtContext) K_END() antlr.TerminalNode {
	return s.GetToken(SqlParserK_END, 0)
}

func (s *Create_trigger_stmtContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DELETE, 0)
}

func (s *Create_trigger_stmtContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INSERT, 0)
}

func (s *Create_trigger_stmtContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UPDATE, 0)
}

func (s *Create_trigger_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Create_trigger_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Create_trigger_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Create_trigger_stmtContext) AllDatabase_name() []IDatabase_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			len++
		}
	}

	tst := make([]IDatabase_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDatabase_nameContext); ok {
			tst[i] = t.(IDatabase_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Database_name(i int) IDatabase_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_trigger_stmtContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SqlParserDOT)
}

func (s *Create_trigger_stmtContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, i)
}

func (s *Create_trigger_stmtContext) K_BEFORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BEFORE, 0)
}

func (s *Create_trigger_stmtContext) K_AFTER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AFTER, 0)
}

func (s *Create_trigger_stmtContext) K_INSTEAD() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INSTEAD, 0)
}

func (s *Create_trigger_stmtContext) AllK_OF() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_OF)
}

func (s *Create_trigger_stmtContext) K_OF(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_OF, i)
}

func (s *Create_trigger_stmtContext) K_FOR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FOR, 0)
}

func (s *Create_trigger_stmtContext) K_EACH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EACH, 0)
}

func (s *Create_trigger_stmtContext) K_ROW() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROW, 0)
}

func (s *Create_trigger_stmtContext) K_WHEN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHEN, 0)
}

func (s *Create_trigger_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_trigger_stmtContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SqlParserSCOL)
}

func (s *Create_trigger_stmtContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserSCOL, i)
}

func (s *Create_trigger_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMP, 0)
}

func (s *Create_trigger_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMPORARY, 0)
}

func (s *Create_trigger_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_trigger_stmtContext) AllUpdate_stmt() []IUpdate_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_stmtContext); ok {
			tst[i] = t.(IUpdate_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Update_stmt(i int) IUpdate_stmtContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Create_trigger_stmtContext) AllInsert_stmt() []IInsert_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			len++
		}
	}

	tst := make([]IInsert_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInsert_stmtContext); ok {
			tst[i] = t.(IInsert_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Insert_stmt(i int) IInsert_stmtContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Create_trigger_stmtContext) AllDelete_stmt() []IDelete_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			len++
		}
	}

	tst := make([]IDelete_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDelete_stmtContext); ok {
			tst[i] = t.(IDelete_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Delete_stmt(i int) IDelete_stmtContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Create_trigger_stmtContext) AllSelect_stmt() []ISelect_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISelect_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_stmtContext); ok {
			tst[i] = t.(ISelect_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Select_stmt(i int) ISelect_stmtContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_trigger_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Create_trigger_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Create_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCreate_trigger_stmt(s)
	}
}




func (p *SqlParser) Create_trigger_stmt() (localctx ICreate_trigger_stmtContext) {
	this := p
	_ = this

	localctx = NewCreate_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SqlParserRULE_create_trigger_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(461)
		p.Match(SqlParserK_CREATE)
	}
	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TEMP || _la == SqlParserK_TEMPORARY {
		{
			p.SetState(462)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_TEMP || _la == SqlParserK_TEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(465)
		p.Match(SqlParserK_TRIGGER)
	}
	p.SetState(469)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(466)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(467)
			p.Match(SqlParserK_NOT)
		}
		{
			p.SetState(468)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(474)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(471)
			p.Database_name()
		}
		{
			p.SetState(472)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(476)
		p.Trigger_name()
	}
	p.SetState(481)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_BEFORE:
		{
			p.SetState(477)
			p.Match(SqlParserK_BEFORE)
		}


	case SqlParserK_AFTER:
		{
			p.SetState(478)
			p.Match(SqlParserK_AFTER)
		}


	case SqlParserK_INSTEAD:
		{
			p.SetState(479)
			p.Match(SqlParserK_INSTEAD)
		}
		{
			p.SetState(480)
			p.Match(SqlParserK_OF)
		}


	case SqlParserK_DELETE, SqlParserK_INSERT, SqlParserK_UPDATE:



	default:
	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_DELETE:
		{
			p.SetState(483)
			p.Match(SqlParserK_DELETE)
		}


	case SqlParserK_INSERT:
		{
			p.SetState(484)
			p.Match(SqlParserK_INSERT)
		}


	case SqlParserK_UPDATE:
		{
			p.SetState(485)
			p.Match(SqlParserK_UPDATE)
		}
		p.SetState(495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_OF {
			{
				p.SetState(486)
				p.Match(SqlParserK_OF)
			}
			{
				p.SetState(487)
				p.Column_name()
			}
			p.SetState(492)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(488)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(489)
					p.Column_name()
				}


				p.SetState(494)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(499)
		p.Match(SqlParserK_ON)
	}
	p.SetState(503)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(500)
			p.Database_name()
		}
		{
			p.SetState(501)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(505)
		p.Table_name()
	}
	p.SetState(509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_FOR {
		{
			p.SetState(506)
			p.Match(SqlParserK_FOR)
		}
		{
			p.SetState(507)
			p.Match(SqlParserK_EACH)
		}
		{
			p.SetState(508)
			p.Match(SqlParserK_ROW)
		}

	}
	p.SetState(513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WHEN {
		{
			p.SetState(511)
			p.Match(SqlParserK_WHEN)
		}
		{
			p.SetState(512)
			p.expr(0)
		}

	}
	{
		p.SetState(515)
		p.Match(SqlParserK_BEGIN)
	}
	p.SetState(524)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SqlParserK_DELETE || _la == SqlParserK_INSERT || ((((_la - 126)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 126))) & ((1 << (SqlParserK_REPLACE - 126)) | (1 << (SqlParserK_SELECT - 126)) | (1 << (SqlParserK_UPDATE - 126)) | (1 << (SqlParserK_VALUES - 126)) | (1 << (SqlParserK_WITH - 126)))) != 0) {
		p.SetState(520)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(516)
				p.Update_stmt()
			}


		case 2:
			{
				p.SetState(517)
				p.Insert_stmt()
			}


		case 3:
			{
				p.SetState(518)
				p.Delete_stmt()
			}


		case 4:
			{
				p.SetState(519)
				p.Select_stmt()
			}

		}
		{
			p.SetState(522)
			p.Match(SqlParserSCOL)
		}


		p.SetState(526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(528)
		p.Match(SqlParserK_END)
	}



	return localctx
}


// ICreate_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_view_stmtContext differentiates from other interfaces.
	IsCreate_view_stmtContext()
}

type Create_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_view_stmtContext() *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_create_view_stmt
	return p
}

func (*Create_view_stmtContext) IsCreate_view_stmtContext() {}

func NewCreate_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_create_view_stmt

	return p
}

func (s *Create_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CREATE, 0)
}

func (s *Create_view_stmtContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VIEW, 0)
}

func (s *Create_view_stmtContext) View_name() IView_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IView_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Create_view_stmtContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *Create_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Create_view_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Create_view_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Create_view_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Create_view_stmtContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMP, 0)
}

func (s *Create_view_stmtContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMPORARY, 0)
}

func (s *Create_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCreate_view_stmt(s)
	}
}




func (p *SqlParser) Create_view_stmt() (localctx ICreate_view_stmtContext) {
	this := p
	_ = this

	localctx = NewCreate_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SqlParserRULE_create_view_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		p.Match(SqlParserK_CREATE)
	}
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TEMP || _la == SqlParserK_TEMPORARY {
		{
			p.SetState(531)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_TEMP || _la == SqlParserK_TEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(534)
		p.Match(SqlParserK_VIEW)
	}
	p.SetState(538)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(535)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(536)
			p.Match(SqlParserK_NOT)
		}
		{
			p.SetState(537)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(540)
			p.Database_name()
		}
		{
			p.SetState(541)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(545)
		p.View_name()
	}
	{
		p.SetState(546)
		p.Match(SqlParserK_AS)
	}
	{
		p.SetState(547)
		p.Select_stmt()
	}



	return localctx
}


// ICreate_virtual_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_virtual_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_virtual_table_stmtContext differentiates from other interfaces.
	IsCreate_virtual_table_stmtContext()
}

type Create_virtual_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_virtual_table_stmtContext() *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_create_virtual_table_stmt
	return p
}

func (*Create_virtual_table_stmtContext) IsCreate_virtual_table_stmtContext() {}

func NewCreate_virtual_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_create_virtual_table_stmt

	return p
}

func (s *Create_virtual_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_virtual_table_stmtContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CREATE, 0)
}

func (s *Create_virtual_table_stmtContext) K_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VIRTUAL, 0)
}

func (s *Create_virtual_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TABLE, 0)
}

func (s *Create_virtual_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_virtual_table_stmtContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SqlParserK_USING, 0)
}

func (s *Create_virtual_table_stmtContext) Module_name() IModule_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModule_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModule_nameContext)
}

func (s *Create_virtual_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Create_virtual_table_stmtContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Create_virtual_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Create_virtual_table_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_virtual_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Create_virtual_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllModule_argument() []IModule_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IModule_argumentContext); ok {
			len++
		}
	}

	tst := make([]IModule_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IModule_argumentContext); ok {
			tst[i] = t.(IModule_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Create_virtual_table_stmtContext) Module_argument(i int) IModule_argumentContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModule_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModule_argumentContext)
}

func (s *Create_virtual_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Create_virtual_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Create_virtual_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_virtual_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_virtual_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCreate_virtual_table_stmt(s)
	}
}




func (p *SqlParser) Create_virtual_table_stmt() (localctx ICreate_virtual_table_stmtContext) {
	this := p
	_ = this

	localctx = NewCreate_virtual_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SqlParserRULE_create_virtual_table_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(549)
		p.Match(SqlParserK_CREATE)
	}
	{
		p.SetState(550)
		p.Match(SqlParserK_VIRTUAL)
	}
	{
		p.SetState(551)
		p.Match(SqlParserK_TABLE)
	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(552)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(553)
			p.Match(SqlParserK_NOT)
		}
		{
			p.SetState(554)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(560)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(557)
			p.Database_name()
		}
		{
			p.SetState(558)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(562)
		p.Table_name()
	}
	{
		p.SetState(563)
		p.Match(SqlParserK_USING)
	}
	{
		p.SetState(564)
		p.Module_name()
	}
	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserOPEN_PAR {
		{
			p.SetState(565)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(566)
			p.Module_argument()
		}
		p.SetState(571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(567)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(568)
				p.Module_argument()
			}


			p.SetState(573)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(574)
			p.Match(SqlParserCLOSE_PAR)
		}

	}



	return localctx
}


// IDelete_stmtContext is an interface to support dynamic dispatch.
type IDelete_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_stmtContext differentiates from other interfaces.
	IsDelete_stmtContext()
}

type Delete_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmtContext() *Delete_stmtContext {
	var p = new(Delete_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_delete_stmt
	return p
}

func (*Delete_stmtContext) IsDelete_stmtContext() {}

func NewDelete_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmtContext {
	var p = new(Delete_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_delete_stmt

	return p
}

func (s *Delete_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmtContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DELETE, 0)
}

func (s *Delete_stmtContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FROM, 0)
}

func (s *Delete_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Delete_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Delete_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDelete_stmt(s)
	}
}




func (p *SqlParser) Delete_stmt() (localctx IDelete_stmtContext) {
	this := p
	_ = this

	localctx = NewDelete_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SqlParserRULE_delete_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(578)
			p.With_clause()
		}

	}
	{
		p.SetState(581)
		p.Match(SqlParserK_DELETE)
	}
	{
		p.SetState(582)
		p.Match(SqlParserK_FROM)
	}
	{
		p.SetState(583)
		p.Qualified_table_name()
	}
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WHERE {
		{
			p.SetState(584)
			p.Match(SqlParserK_WHERE)
		}
		{
			p.SetState(585)
			p.expr(0)
		}

	}



	return localctx
}


// IDelete_stmt_limitedContext is an interface to support dynamic dispatch.
type IDelete_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_stmt_limitedContext differentiates from other interfaces.
	IsDelete_stmt_limitedContext()
}

type Delete_stmt_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmt_limitedContext() *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_delete_stmt_limited
	return p
}

func (*Delete_stmt_limitedContext) IsDelete_stmt_limitedContext() {}

func NewDelete_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_delete_stmt_limited

	return p
}

func (s *Delete_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmt_limitedContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DELETE, 0)
}

func (s *Delete_stmt_limitedContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FROM, 0)
}

func (s *Delete_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmt_limitedContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Delete_stmt_limitedContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Delete_stmt_limitedContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmt_limitedContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *Delete_stmt_limitedContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *Delete_stmt_limitedContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Delete_stmt_limitedContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Delete_stmt_limitedContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Delete_stmt_limitedContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *Delete_stmt_limitedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Delete_stmt_limitedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Delete_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Delete_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDelete_stmt_limited(s)
	}
}

func (s *Delete_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDelete_stmt_limited(s)
	}
}




func (p *SqlParser) Delete_stmt_limited() (localctx IDelete_stmt_limitedContext) {
	this := p
	_ = this

	localctx = NewDelete_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SqlParserRULE_delete_stmt_limited)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(588)
			p.With_clause()
		}

	}
	{
		p.SetState(591)
		p.Match(SqlParserK_DELETE)
	}
	{
		p.SetState(592)
		p.Match(SqlParserK_FROM)
	}
	{
		p.SetState(593)
		p.Qualified_table_name()
	}
	p.SetState(596)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WHERE {
		{
			p.SetState(594)
			p.Match(SqlParserK_WHERE)
		}
		{
			p.SetState(595)
			p.expr(0)
		}

	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_LIMIT || _la == SqlParserK_ORDER {
		p.SetState(608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_ORDER {
			{
				p.SetState(598)
				p.Match(SqlParserK_ORDER)
			}
			{
				p.SetState(599)
				p.Match(SqlParserK_BY)
			}
			{
				p.SetState(600)
				p.Ordering_term()
			}
			p.SetState(605)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(601)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(602)
					p.Ordering_term()
				}


				p.SetState(607)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(610)
			p.Match(SqlParserK_LIMIT)
		}
		{
			p.SetState(611)
			p.expr(0)
		}
		p.SetState(614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserCOMMA || _la == SqlParserK_OFFSET {
			{
				p.SetState(612)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserCOMMA || _la == SqlParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(613)
				p.expr(0)
			}

		}

	}



	return localctx
}


// IDetach_stmtContext is an interface to support dynamic dispatch.
type IDetach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDetach_stmtContext differentiates from other interfaces.
	IsDetach_stmtContext()
}

type Detach_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDetach_stmtContext() *Detach_stmtContext {
	var p = new(Detach_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_detach_stmt
	return p
}

func (*Detach_stmtContext) IsDetach_stmtContext() {}

func NewDetach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Detach_stmtContext {
	var p = new(Detach_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_detach_stmt

	return p
}

func (s *Detach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Detach_stmtContext) K_DETACH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DETACH, 0)
}

func (s *Detach_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Detach_stmtContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DATABASE, 0)
}

func (s *Detach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Detach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Detach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDetach_stmt(s)
	}
}




func (p *SqlParser) Detach_stmt() (localctx IDetach_stmtContext) {
	this := p
	_ = this

	localctx = NewDetach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SqlParserRULE_detach_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(618)
		p.Match(SqlParserK_DETACH)
	}
	p.SetState(620)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(619)
			p.Match(SqlParserK_DATABASE)
		}


	}
	{
		p.SetState(622)
		p.Database_name()
	}



	return localctx
}


// IDrop_index_stmtContext is an interface to support dynamic dispatch.
type IDrop_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_index_stmtContext differentiates from other interfaces.
	IsDrop_index_stmtContext()
}

type Drop_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_index_stmtContext() *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_drop_index_stmt
	return p
}

func (*Drop_index_stmtContext) IsDrop_index_stmtContext() {}

func NewDrop_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_drop_index_stmt

	return p
}

func (s *Drop_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_index_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DROP, 0)
}

func (s *Drop_index_stmtContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INDEX, 0)
}

func (s *Drop_index_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Drop_index_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Drop_index_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Drop_index_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Drop_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDrop_index_stmt(s)
	}
}




func (p *SqlParser) Drop_index_stmt() (localctx IDrop_index_stmtContext) {
	this := p
	_ = this

	localctx = NewDrop_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SqlParserRULE_drop_index_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(624)
		p.Match(SqlParserK_DROP)
	}
	{
		p.SetState(625)
		p.Match(SqlParserK_INDEX)
	}
	p.SetState(628)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(626)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(627)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(630)
			p.Database_name()
		}
		{
			p.SetState(631)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(635)
		p.Index_name()
	}



	return localctx
}


// IDrop_table_stmtContext is an interface to support dynamic dispatch.
type IDrop_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_table_stmtContext differentiates from other interfaces.
	IsDrop_table_stmtContext()
}

type Drop_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_table_stmtContext() *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_drop_table_stmt
	return p
}

func (*Drop_table_stmtContext) IsDrop_table_stmtContext() {}

func NewDrop_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_drop_table_stmt

	return p
}

func (s *Drop_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DROP, 0)
}

func (s *Drop_table_stmtContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TABLE, 0)
}

func (s *Drop_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_table_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Drop_table_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Drop_table_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Drop_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDrop_table_stmt(s)
	}
}




func (p *SqlParser) Drop_table_stmt() (localctx IDrop_table_stmtContext) {
	this := p
	_ = this

	localctx = NewDrop_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SqlParserRULE_drop_table_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(637)
		p.Match(SqlParserK_DROP)
	}
	{
		p.SetState(638)
		p.Match(SqlParserK_TABLE)
	}
	p.SetState(641)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(639)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(640)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(646)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(643)
			p.Database_name()
		}
		{
			p.SetState(644)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(648)
		p.Table_name()
	}



	return localctx
}


// IDrop_trigger_stmtContext is an interface to support dynamic dispatch.
type IDrop_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_trigger_stmtContext differentiates from other interfaces.
	IsDrop_trigger_stmtContext()
}

type Drop_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_trigger_stmtContext() *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_drop_trigger_stmt
	return p
}

func (*Drop_trigger_stmtContext) IsDrop_trigger_stmtContext() {}

func NewDrop_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_drop_trigger_stmt

	return p
}

func (s *Drop_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_trigger_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DROP, 0)
}

func (s *Drop_trigger_stmtContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRIGGER, 0)
}

func (s *Drop_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrigger_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Drop_trigger_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Drop_trigger_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Drop_trigger_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_trigger_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Drop_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDrop_trigger_stmt(s)
	}
}




func (p *SqlParser) Drop_trigger_stmt() (localctx IDrop_trigger_stmtContext) {
	this := p
	_ = this

	localctx = NewDrop_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SqlParserRULE_drop_trigger_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(650)
		p.Match(SqlParserK_DROP)
	}
	{
		p.SetState(651)
		p.Match(SqlParserK_TRIGGER)
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(652)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(653)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(656)
			p.Database_name()
		}
		{
			p.SetState(657)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(661)
		p.Trigger_name()
	}



	return localctx
}


// IDrop_view_stmtContext is an interface to support dynamic dispatch.
type IDrop_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_view_stmtContext differentiates from other interfaces.
	IsDrop_view_stmtContext()
}

type Drop_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_view_stmtContext() *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_drop_view_stmt
	return p
}

func (*Drop_view_stmtContext) IsDrop_view_stmtContext() {}

func NewDrop_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_drop_view_stmt

	return p
}

func (s *Drop_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_view_stmtContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DROP, 0)
}

func (s *Drop_view_stmtContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VIEW, 0)
}

func (s *Drop_view_stmtContext) View_name() IView_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IView_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Drop_view_stmtContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *Drop_view_stmtContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *Drop_view_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Drop_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDrop_view_stmt(s)
	}
}




func (p *SqlParser) Drop_view_stmt() (localctx IDrop_view_stmtContext) {
	this := p
	_ = this

	localctx = NewDrop_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SqlParserRULE_drop_view_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(663)
		p.Match(SqlParserK_DROP)
	}
	{
		p.SetState(664)
		p.Match(SqlParserK_VIEW)
	}
	p.SetState(667)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(665)
			p.Match(SqlParserK_IF)
		}
		{
			p.SetState(666)
			p.Match(SqlParserK_EXISTS)
		}


	}
	p.SetState(672)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(669)
			p.Database_name()
		}
		{
			p.SetState(670)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(674)
		p.View_name()
	}



	return localctx
}


// IFactored_select_stmtContext is an interface to support dynamic dispatch.
type IFactored_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFactored_select_stmtContext differentiates from other interfaces.
	IsFactored_select_stmtContext()
}

type Factored_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFactored_select_stmtContext() *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_factored_select_stmt
	return p
}

func (*Factored_select_stmtContext) IsFactored_select_stmtContext() {}

func NewFactored_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_factored_select_stmt

	return p
}

func (s *Factored_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Factored_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_coreContext); ok {
			len++
		}
	}

	tst := make([]ISelect_coreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_coreContext); ok {
			tst[i] = t.(ISelect_coreContext)
			i++
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Factored_select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITH, 0)
}

func (s *Factored_select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Factored_select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			len++
		}
	}

	tst := make([]ICompound_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompound_operatorContext); ok {
			tst[i] = t.(ICompound_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Factored_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *Factored_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Factored_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Factored_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *Factored_select_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Factored_select_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Factored_select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RECURSIVE, 0)
}

func (s *Factored_select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Factored_select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Factored_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *Factored_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Factored_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Factored_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterFactored_select_stmt(s)
	}
}

func (s *Factored_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitFactored_select_stmt(s)
	}
}




func (p *SqlParser) Factored_select_stmt() (localctx IFactored_select_stmtContext) {
	this := p
	_ = this

	localctx = NewFactored_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SqlParserRULE_factored_select_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(676)
			p.Match(SqlParserK_WITH)
		}
		p.SetState(678)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(677)
				p.Match(SqlParserK_RECURSIVE)
			}


		}
		{
			p.SetState(680)
			p.Common_table_expression()
		}
		p.SetState(685)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(681)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(682)
				p.Common_table_expression()
			}


			p.SetState(687)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(690)
		p.Select_core()
	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserK_EXCEPT || _la == SqlParserK_INTERSECT || _la == SqlParserK_UNION {
		{
			p.SetState(691)
			p.Compound_operator()
		}
		{
			p.SetState(692)
			p.Select_core()
		}


		p.SetState(698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(709)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_ORDER {
		{
			p.SetState(699)
			p.Match(SqlParserK_ORDER)
		}
		{
			p.SetState(700)
			p.Match(SqlParserK_BY)
		}
		{
			p.SetState(701)
			p.Ordering_term()
		}
		p.SetState(706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(702)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(703)
				p.Ordering_term()
			}


			p.SetState(708)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_LIMIT {
		{
			p.SetState(711)
			p.Match(SqlParserK_LIMIT)
		}
		{
			p.SetState(712)
			p.expr(0)
		}
		p.SetState(715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserCOMMA || _la == SqlParserK_OFFSET {
			{
				p.SetState(713)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserCOMMA || _la == SqlParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(714)
				p.expr(0)
			}

		}

	}



	return localctx
}


// IInsert_stmtContext is an interface to support dynamic dispatch.
type IInsert_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_stmtContext differentiates from other interfaces.
	IsInsert_stmtContext()
}

type Insert_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_stmtContext() *Insert_stmtContext {
	var p = new(Insert_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_insert_stmt
	return p
}

func (*Insert_stmtContext) IsInsert_stmtContext() {}

func NewInsert_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmtContext {
	var p = new(Insert_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_insert_stmt

	return p
}

func (s *Insert_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmtContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INTO, 0)
}

func (s *Insert_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Insert_stmtContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INSERT, 0)
}

func (s *Insert_stmtContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REPLACE, 0)
}

func (s *Insert_stmtContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OR, 0)
}

func (s *Insert_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *Insert_stmtContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ABORT, 0)
}

func (s *Insert_stmtContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FAIL, 0)
}

func (s *Insert_stmtContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IGNORE, 0)
}

func (s *Insert_stmtContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VALUES, 0)
}

func (s *Insert_stmtContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserOPEN_PAR)
}

func (s *Insert_stmtContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, i)
}

func (s *Insert_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Insert_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Insert_stmtContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCLOSE_PAR)
}

func (s *Insert_stmtContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, i)
}

func (s *Insert_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmtContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFAULT, 0)
}

func (s *Insert_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Insert_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Insert_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Insert_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Insert_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Insert_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Insert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Insert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitInsert_stmt(s)
	}
}




func (p *SqlParser) Insert_stmt() (localctx IInsert_stmtContext) {
	this := p
	_ = this

	localctx = NewInsert_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SqlParserRULE_insert_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(720)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(719)
			p.With_clause()
		}

	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(722)
			p.Match(SqlParserK_INSERT)
		}


	case 2:
		{
			p.SetState(723)
			p.Match(SqlParserK_REPLACE)
		}


	case 3:
		{
			p.SetState(724)
			p.Match(SqlParserK_INSERT)
		}
		{
			p.SetState(725)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(726)
			p.Match(SqlParserK_REPLACE)
		}


	case 4:
		{
			p.SetState(727)
			p.Match(SqlParserK_INSERT)
		}
		{
			p.SetState(728)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(729)
			p.Match(SqlParserK_ROLLBACK)
		}


	case 5:
		{
			p.SetState(730)
			p.Match(SqlParserK_INSERT)
		}
		{
			p.SetState(731)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(732)
			p.Match(SqlParserK_ABORT)
		}


	case 6:
		{
			p.SetState(733)
			p.Match(SqlParserK_INSERT)
		}
		{
			p.SetState(734)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(735)
			p.Match(SqlParserK_FAIL)
		}


	case 7:
		{
			p.SetState(736)
			p.Match(SqlParserK_INSERT)
		}
		{
			p.SetState(737)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(738)
			p.Match(SqlParserK_IGNORE)
		}

	}
	{
		p.SetState(741)
		p.Match(SqlParserK_INTO)
	}
	p.SetState(745)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(742)
			p.Database_name()
		}
		{
			p.SetState(743)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(747)
		p.Table_name()
	}
	p.SetState(759)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserOPEN_PAR {
		{
			p.SetState(748)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(749)
			p.Column_name()
		}
		p.SetState(754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(750)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(751)
				p.Column_name()
			}


			p.SetState(756)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(757)
			p.Match(SqlParserCLOSE_PAR)
		}

	}
	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(761)
			p.Match(SqlParserK_VALUES)
		}
		{
			p.SetState(762)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(763)
			p.expr(0)
		}
		p.SetState(768)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(764)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(765)
				p.expr(0)
			}


			p.SetState(770)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(771)
			p.Match(SqlParserCLOSE_PAR)
		}
		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(772)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(773)
				p.Match(SqlParserOPEN_PAR)
			}
			{
				p.SetState(774)
				p.expr(0)
			}
			p.SetState(779)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(775)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(776)
					p.expr(0)
				}


				p.SetState(781)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(782)
				p.Match(SqlParserCLOSE_PAR)
			}


			p.SetState(788)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		{
			p.SetState(789)
			p.Select_stmt()
		}


	case 3:
		{
			p.SetState(790)
			p.Match(SqlParserK_DEFAULT)
		}
		{
			p.SetState(791)
			p.Match(SqlParserK_VALUES)
		}

	}



	return localctx
}


// IPragma_stmtContext is an interface to support dynamic dispatch.
type IPragma_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_stmtContext differentiates from other interfaces.
	IsPragma_stmtContext()
}

type Pragma_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_stmtContext() *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_pragma_stmt
	return p
}

func (*Pragma_stmtContext) IsPragma_stmtContext() {}

func NewPragma_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_pragma_stmt

	return p
}

func (s *Pragma_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_stmtContext) K_PRAGMA() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PRAGMA, 0)
}

func (s *Pragma_stmtContext) Pragma_name() IPragma_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_nameContext)
}

func (s *Pragma_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Pragma_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Pragma_stmtContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SqlParserASSIGN, 0)
}

func (s *Pragma_stmtContext) Pragma_value() IPragma_valueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_valueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_valueContext)
}

func (s *Pragma_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Pragma_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Pragma_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Pragma_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitPragma_stmt(s)
	}
}




func (p *SqlParser) Pragma_stmt() (localctx IPragma_stmtContext) {
	this := p
	_ = this

	localctx = NewPragma_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SqlParserRULE_pragma_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(794)
		p.Match(SqlParserK_PRAGMA)
	}
	p.SetState(798)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(795)
			p.Database_name()
		}
		{
			p.SetState(796)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(800)
		p.Pragma_name()
	}
	p.SetState(807)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserASSIGN:
		{
			p.SetState(801)
			p.Match(SqlParserASSIGN)
		}
		{
			p.SetState(802)
			p.Pragma_value()
		}


	case SqlParserOPEN_PAR:
		{
			p.SetState(803)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(804)
			p.Pragma_value()
		}
		{
			p.SetState(805)
			p.Match(SqlParserCLOSE_PAR)
		}


	case SqlParserEOF, SqlParserSCOL, SqlParserK_ALTER, SqlParserK_ANALYZE, SqlParserK_ATTACH, SqlParserK_BEGIN, SqlParserK_COMMIT, SqlParserK_CREATE, SqlParserK_DELETE, SqlParserK_DETACH, SqlParserK_DROP, SqlParserK_END, SqlParserK_EXPLAIN, SqlParserK_INSERT, SqlParserK_PRAGMA, SqlParserK_REINDEX, SqlParserK_RELEASE, SqlParserK_REPLACE, SqlParserK_ROLLBACK, SqlParserK_SAVEPOINT, SqlParserK_SELECT, SqlParserK_UPDATE, SqlParserK_VACUUM, SqlParserK_VALUES, SqlParserK_WITH, SqlParserUNEXPECTED_CHAR:



	default:
	}



	return localctx
}


// IReindex_stmtContext is an interface to support dynamic dispatch.
type IReindex_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReindex_stmtContext differentiates from other interfaces.
	IsReindex_stmtContext()
}

type Reindex_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReindex_stmtContext() *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_reindex_stmt
	return p
}

func (*Reindex_stmtContext) IsReindex_stmtContext() {}

func NewReindex_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_reindex_stmt

	return p
}

func (s *Reindex_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reindex_stmtContext) K_REINDEX() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REINDEX, 0)
}

func (s *Reindex_stmtContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Reindex_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Reindex_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Reindex_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Reindex_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Reindex_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reindex_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Reindex_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitReindex_stmt(s)
	}
}




func (p *SqlParser) Reindex_stmt() (localctx IReindex_stmtContext) {
	this := p
	_ = this

	localctx = NewReindex_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SqlParserRULE_reindex_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(809)
		p.Match(SqlParserK_REINDEX)
	}
	p.SetState(820)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(810)
			p.Collation_name()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 2 {
		p.SetState(814)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(811)
				p.Database_name()
			}
			{
				p.SetState(812)
				p.Match(SqlParserDOT)
			}


		}
		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(816)
				p.Table_name()
			}


		case 2:
			{
				p.SetState(817)
				p.Index_name()
			}

		}


	}



	return localctx
}


// IRelease_stmtContext is an interface to support dynamic dispatch.
type IRelease_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelease_stmtContext differentiates from other interfaces.
	IsRelease_stmtContext()
}

type Release_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_stmtContext() *Release_stmtContext {
	var p = new(Release_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_release_stmt
	return p
}

func (*Release_stmtContext) IsRelease_stmtContext() {}

func NewRelease_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_stmtContext {
	var p = new(Release_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_release_stmt

	return p
}

func (s *Release_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_stmtContext) K_RELEASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RELEASE, 0)
}

func (s *Release_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Release_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SAVEPOINT, 0)
}

func (s *Release_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Release_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterRelease_stmt(s)
	}
}

func (s *Release_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitRelease_stmt(s)
	}
}




func (p *SqlParser) Release_stmt() (localctx IRelease_stmtContext) {
	this := p
	_ = this

	localctx = NewRelease_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SqlParserRULE_release_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(822)
		p.Match(SqlParserK_RELEASE)
	}
	p.SetState(824)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(823)
			p.Match(SqlParserK_SAVEPOINT)
		}


	}
	{
		p.SetState(826)
		p.Savepoint_name()
	}



	return localctx
}


// IRollback_stmtContext is an interface to support dynamic dispatch.
type IRollback_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollback_stmtContext differentiates from other interfaces.
	IsRollback_stmtContext()
}

type Rollback_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_stmtContext() *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_rollback_stmt
	return p
}

func (*Rollback_stmtContext) IsRollback_stmtContext() {}

func NewRollback_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_rollback_stmt

	return p
}

func (s *Rollback_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *Rollback_stmtContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRANSACTION, 0)
}

func (s *Rollback_stmtContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TO, 0)
}

func (s *Rollback_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Rollback_stmtContext) Transaction_name() ITransaction_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Rollback_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SAVEPOINT, 0)
}

func (s *Rollback_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Rollback_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitRollback_stmt(s)
	}
}




func (p *SqlParser) Rollback_stmt() (localctx IRollback_stmtContext) {
	this := p
	_ = this

	localctx = NewRollback_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SqlParserRULE_rollback_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(828)
		p.Match(SqlParserK_ROLLBACK)
	}
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TRANSACTION {
		{
			p.SetState(829)
			p.Match(SqlParserK_TRANSACTION)
		}
		p.SetState(831)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(830)
				p.Transaction_name()
			}


		}

	}
	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_TO {
		{
			p.SetState(835)
			p.Match(SqlParserK_TO)
		}
		p.SetState(837)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(836)
				p.Match(SqlParserK_SAVEPOINT)
			}


		}
		{
			p.SetState(839)
			p.Savepoint_name()
		}

	}



	return localctx
}


// ISavepoint_stmtContext is an interface to support dynamic dispatch.
type ISavepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_stmtContext differentiates from other interfaces.
	IsSavepoint_stmtContext()
}

type Savepoint_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_stmtContext() *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_savepoint_stmt
	return p
}

func (*Savepoint_stmtContext) IsSavepoint_stmtContext() {}

func NewSavepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_savepoint_stmt

	return p
}

func (s *Savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_stmtContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SAVEPOINT, 0)
}

func (s *Savepoint_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSavepoint_stmt(s)
	}
}




func (p *SqlParser) Savepoint_stmt() (localctx ISavepoint_stmtContext) {
	this := p
	_ = this

	localctx = NewSavepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SqlParserRULE_savepoint_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(842)
		p.Match(SqlParserK_SAVEPOINT)
	}
	{
		p.SetState(843)
		p.Savepoint_name()
	}



	return localctx
}


// ISimple_select_stmtContext is an interface to support dynamic dispatch.
type ISimple_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_select_stmtContext differentiates from other interfaces.
	IsSimple_select_stmtContext()
}

type Simple_select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_select_stmtContext() *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_simple_select_stmt
	return p
}

func (*Simple_select_stmtContext) IsSimple_select_stmtContext() {}

func NewSimple_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_simple_select_stmt

	return p
}

func (s *Simple_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_select_stmtContext) Select_core() ISelect_coreContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Simple_select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITH, 0)
}

func (s *Simple_select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Simple_select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *Simple_select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Simple_select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Simple_select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *Simple_select_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Simple_select_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Simple_select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RECURSIVE, 0)
}

func (s *Simple_select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Simple_select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Simple_select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *Simple_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Simple_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSimple_select_stmt(s)
	}
}

func (s *Simple_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSimple_select_stmt(s)
	}
}




func (p *SqlParser) Simple_select_stmt() (localctx ISimple_select_stmtContext) {
	this := p
	_ = this

	localctx = NewSimple_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SqlParserRULE_simple_select_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(845)
			p.Match(SqlParserK_WITH)
		}
		p.SetState(847)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(846)
				p.Match(SqlParserK_RECURSIVE)
			}


		}
		{
			p.SetState(849)
			p.Common_table_expression()
		}
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(850)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(851)
				p.Common_table_expression()
			}


			p.SetState(856)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(859)
		p.Select_core()
	}
	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_ORDER {
		{
			p.SetState(860)
			p.Match(SqlParserK_ORDER)
		}
		{
			p.SetState(861)
			p.Match(SqlParserK_BY)
		}
		{
			p.SetState(862)
			p.Ordering_term()
		}
		p.SetState(867)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(863)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(864)
				p.Ordering_term()
			}


			p.SetState(869)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_LIMIT {
		{
			p.SetState(872)
			p.Match(SqlParserK_LIMIT)
		}
		{
			p.SetState(873)
			p.expr(0)
		}
		p.SetState(876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserCOMMA || _la == SqlParserK_OFFSET {
			{
				p.SetState(874)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserCOMMA || _la == SqlParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(875)
				p.expr(0)
			}

		}

	}



	return localctx
}


// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_select_stmt
	return p
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) AllSelect_or_values() []ISelect_or_valuesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_or_valuesContext); ok {
			len++
		}
	}

	tst := make([]ISelect_or_valuesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_or_valuesContext); ok {
			tst[i] = t.(ISelect_or_valuesContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Select_or_values(i int) ISelect_or_valuesContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_or_valuesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_or_valuesContext)
}

func (s *Select_stmtContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITH, 0)
}

func (s *Select_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			len++
		}
	}

	tst := make([]ICompound_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompound_operatorContext); ok {
			tst[i] = t.(ICompound_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Select_stmtContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *Select_stmtContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Select_stmtContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Select_stmtContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *Select_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_stmtContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RECURSIVE, 0)
}

func (s *Select_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Select_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Select_stmtContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}




func (p *SqlParser) Select_stmt() (localctx ISelect_stmtContext) {
	this := p
	_ = this

	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SqlParserRULE_select_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(880)
			p.Match(SqlParserK_WITH)
		}
		p.SetState(882)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(881)
				p.Match(SqlParserK_RECURSIVE)
			}


		}
		{
			p.SetState(884)
			p.Common_table_expression()
		}
		p.SetState(889)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(885)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(886)
				p.Common_table_expression()
			}


			p.SetState(891)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(894)
		p.Select_or_values()
	}
	p.SetState(900)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(895)
				p.Compound_operator()
			}
			{
				p.SetState(896)
				p.Select_or_values()
			}


		}
		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())
	}
	p.SetState(913)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(903)
			p.Match(SqlParserK_ORDER)
		}
		{
			p.SetState(904)
			p.Match(SqlParserK_BY)
		}
		{
			p.SetState(905)
			p.Ordering_term()
		}
		p.SetState(910)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(906)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(907)
					p.Ordering_term()
				}


			}
			p.SetState(912)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())
		}


	}
	p.SetState(921)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(915)
			p.Match(SqlParserK_LIMIT)
		}
		{
			p.SetState(916)
			p.expr(0)
		}
		p.SetState(919)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(917)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserCOMMA || _la == SqlParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(918)
				p.expr(0)
			}


		}


	}



	return localctx
}


// ISelect_or_valuesContext is an interface to support dynamic dispatch.
type ISelect_or_valuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_or_valuesContext differentiates from other interfaces.
	IsSelect_or_valuesContext()
}

type Select_or_valuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_or_valuesContext() *Select_or_valuesContext {
	var p = new(Select_or_valuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_select_or_values
	return p
}

func (*Select_or_valuesContext) IsSelect_or_valuesContext() {}

func NewSelect_or_valuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_or_valuesContext {
	var p = new(Select_or_valuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_select_or_values

	return p
}

func (s *Select_or_valuesContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_or_valuesContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SELECT, 0)
}

func (s *Select_or_valuesContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_or_valuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Select_or_valuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Select_or_valuesContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FROM, 0)
}

func (s *Select_or_valuesContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Select_or_valuesContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_or_valuesContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_GROUP, 0)
}

func (s *Select_or_valuesContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Select_or_valuesContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DISTINCT, 0)
}

func (s *Select_or_valuesContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALL, 0)
}

func (s *Select_or_valuesContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Select_or_valuesContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Select_or_valuesContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_or_valuesContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SqlParserK_HAVING, 0)
}

func (s *Select_or_valuesContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VALUES, 0)
}

func (s *Select_or_valuesContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserOPEN_PAR)
}

func (s *Select_or_valuesContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, i)
}

func (s *Select_or_valuesContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCLOSE_PAR)
}

func (s *Select_or_valuesContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, i)
}

func (s *Select_or_valuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_or_valuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_or_valuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSelect_or_values(s)
	}
}

func (s *Select_or_valuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSelect_or_values(s)
	}
}




func (p *SqlParser) Select_or_values() (localctx ISelect_or_valuesContext) {
	this := p
	_ = this

	localctx = NewSelect_or_valuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SqlParserRULE_select_or_values)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(997)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(923)
			p.Match(SqlParserK_SELECT)
		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(924)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserK_ALL || _la == SqlParserK_DISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}


		}
		{
			p.SetState(927)
			p.Result_column()
		}
		p.SetState(932)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(928)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(929)
					p.Result_column()
				}


			}
			p.SetState(934)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext())
		}
		p.SetState(947)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(935)
				p.Match(SqlParserK_FROM)
			}
			p.SetState(945)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(936)
					p.Table_or_subquery()
				}
				p.SetState(941)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(937)
							p.Match(SqlParserCOMMA)
						}
						{
							p.SetState(938)
							p.Table_or_subquery()
						}


					}
					p.SetState(943)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
				}


			case 2:
				{
					p.SetState(944)
					p.Join_clause()
				}

			}


		}
		p.SetState(951)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(949)
				p.Match(SqlParserK_WHERE)
			}
			{
				p.SetState(950)
				p.expr(0)
			}


		}
		p.SetState(967)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(953)
				p.Match(SqlParserK_GROUP)
			}
			{
				p.SetState(954)
				p.Match(SqlParserK_BY)
			}
			{
				p.SetState(955)
				p.expr(0)
			}
			p.SetState(960)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(956)
						p.Match(SqlParserCOMMA)
					}
					{
						p.SetState(957)
						p.expr(0)
					}


				}
				p.SetState(962)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext())
			}
			p.SetState(965)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(963)
					p.Match(SqlParserK_HAVING)
				}
				{
					p.SetState(964)
					p.expr(0)
				}


			}


		}


	case SqlParserK_VALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(969)
			p.Match(SqlParserK_VALUES)
		}
		{
			p.SetState(970)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(971)
			p.expr(0)
		}
		p.SetState(976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(972)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(973)
				p.expr(0)
			}


			p.SetState(978)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(979)
			p.Match(SqlParserCLOSE_PAR)
		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(980)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(981)
					p.Match(SqlParserOPEN_PAR)
				}
				{
					p.SetState(982)
					p.expr(0)
				}
				p.SetState(987)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SqlParserCOMMA {
					{
						p.SetState(983)
						p.Match(SqlParserCOMMA)
					}
					{
						p.SetState(984)
						p.expr(0)
					}


					p.SetState(989)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(990)
					p.Match(SqlParserCLOSE_PAR)
				}


			}
			p.SetState(996)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext())
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUpdate_stmtContext is an interface to support dynamic dispatch.
type IUpdate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_stmtContext differentiates from other interfaces.
	IsUpdate_stmtContext()
}

type Update_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmtContext() *Update_stmtContext {
	var p = new(Update_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_update_stmt
	return p
}

func (*Update_stmtContext) IsUpdate_stmtContext() {}

func NewUpdate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmtContext {
	var p = new(Update_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_update_stmt

	return p
}

func (s *Update_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmtContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UPDATE, 0)
}

func (s *Update_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmtContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SET, 0)
}

func (s *Update_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmtContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SqlParserASSIGN)
}

func (s *Update_stmtContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserASSIGN, i)
}

func (s *Update_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmtContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OR, 0)
}

func (s *Update_stmtContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *Update_stmtContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ABORT, 0)
}

func (s *Update_stmtContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REPLACE, 0)
}

func (s *Update_stmtContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FAIL, 0)
}

func (s *Update_stmtContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IGNORE, 0)
}

func (s *Update_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Update_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Update_stmtContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Update_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Update_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitUpdate_stmt(s)
	}
}




func (p *SqlParser) Update_stmt() (localctx IUpdate_stmtContext) {
	this := p
	_ = this

	localctx = NewUpdate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SqlParserRULE_update_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(999)
			p.With_clause()
		}

	}
	{
		p.SetState(1002)
		p.Match(SqlParserK_UPDATE)
	}
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1003)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1004)
			p.Match(SqlParserK_ROLLBACK)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1005)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1006)
			p.Match(SqlParserK_ABORT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1007)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1008)
			p.Match(SqlParserK_REPLACE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(1009)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1010)
			p.Match(SqlParserK_FAIL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(1011)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1012)
			p.Match(SqlParserK_IGNORE)
		}


	}
	{
		p.SetState(1015)
		p.Qualified_table_name()
	}
	{
		p.SetState(1016)
		p.Match(SqlParserK_SET)
	}
	{
		p.SetState(1017)
		p.Column_name()
	}
	{
		p.SetState(1018)
		p.Match(SqlParserASSIGN)
	}
	{
		p.SetState(1019)
		p.expr(0)
	}
	p.SetState(1027)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1020)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1021)
			p.Column_name()
		}
		{
			p.SetState(1022)
			p.Match(SqlParserASSIGN)
		}
		{
			p.SetState(1023)
			p.expr(0)
		}


		p.SetState(1029)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WHERE {
		{
			p.SetState(1030)
			p.Match(SqlParserK_WHERE)
		}
		{
			p.SetState(1031)
			p.expr(0)
		}

	}



	return localctx
}


// IUpdate_stmt_limitedContext is an interface to support dynamic dispatch.
type IUpdate_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_stmt_limitedContext differentiates from other interfaces.
	IsUpdate_stmt_limitedContext()
}

type Update_stmt_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmt_limitedContext() *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_update_stmt_limited
	return p
}

func (*Update_stmt_limitedContext) IsUpdate_stmt_limitedContext() {}

func NewUpdate_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_update_stmt_limited

	return p
}

func (s *Update_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmt_limitedContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UPDATE, 0)
}

func (s *Update_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmt_limitedContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SET, 0)
}

func (s *Update_stmt_limitedContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmt_limitedContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SqlParserASSIGN)
}

func (s *Update_stmt_limitedContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserASSIGN, i)
}

func (s *Update_stmt_limitedContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmt_limitedContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OR, 0)
}

func (s *Update_stmt_limitedContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *Update_stmt_limitedContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ABORT, 0)
}

func (s *Update_stmt_limitedContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REPLACE, 0)
}

func (s *Update_stmt_limitedContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FAIL, 0)
}

func (s *Update_stmt_limitedContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IGNORE, 0)
}

func (s *Update_stmt_limitedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Update_stmt_limitedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Update_stmt_limitedContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Update_stmt_limitedContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *Update_stmt_limitedContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *Update_stmt_limitedContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Update_stmt_limitedContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Update_stmt_limitedContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *Update_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Update_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterUpdate_stmt_limited(s)
	}
}

func (s *Update_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitUpdate_stmt_limited(s)
	}
}




func (p *SqlParser) Update_stmt_limited() (localctx IUpdate_stmt_limitedContext) {
	this := p
	_ = this

	localctx = NewUpdate_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SqlParserRULE_update_stmt_limited)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WITH {
		{
			p.SetState(1034)
			p.With_clause()
		}

	}
	{
		p.SetState(1037)
		p.Match(SqlParserK_UPDATE)
	}
	p.SetState(1048)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1038)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1039)
			p.Match(SqlParserK_ROLLBACK)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1040)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1041)
			p.Match(SqlParserK_ABORT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1042)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1043)
			p.Match(SqlParserK_REPLACE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(1044)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1045)
			p.Match(SqlParserK_FAIL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 5 {
		{
			p.SetState(1046)
			p.Match(SqlParserK_OR)
		}
		{
			p.SetState(1047)
			p.Match(SqlParserK_IGNORE)
		}


	}
	{
		p.SetState(1050)
		p.Qualified_table_name()
	}
	{
		p.SetState(1051)
		p.Match(SqlParserK_SET)
	}
	{
		p.SetState(1052)
		p.Column_name()
	}
	{
		p.SetState(1053)
		p.Match(SqlParserASSIGN)
	}
	{
		p.SetState(1054)
		p.expr(0)
	}
	p.SetState(1062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1055)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1056)
			p.Column_name()
		}
		{
			p.SetState(1057)
			p.Match(SqlParserASSIGN)
		}
		{
			p.SetState(1058)
			p.expr(0)
		}


		p.SetState(1064)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1067)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_WHERE {
		{
			p.SetState(1065)
			p.Match(SqlParserK_WHERE)
		}
		{
			p.SetState(1066)
			p.expr(0)
		}

	}
	p.SetState(1087)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_LIMIT || _la == SqlParserK_ORDER {
		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_ORDER {
			{
				p.SetState(1069)
				p.Match(SqlParserK_ORDER)
			}
			{
				p.SetState(1070)
				p.Match(SqlParserK_BY)
			}
			{
				p.SetState(1071)
				p.Ordering_term()
			}
			p.SetState(1076)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(1072)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(1073)
					p.Ordering_term()
				}


				p.SetState(1078)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1081)
			p.Match(SqlParserK_LIMIT)
		}
		{
			p.SetState(1082)
			p.expr(0)
		}
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserCOMMA || _la == SqlParserK_OFFSET {
			{
				p.SetState(1083)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserCOMMA || _la == SqlParserK_OFFSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1084)
				p.expr(0)
			}

		}

	}



	return localctx
}


// IVacuum_stmtContext is an interface to support dynamic dispatch.
type IVacuum_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_stmtContext differentiates from other interfaces.
	IsVacuum_stmtContext()
}

type Vacuum_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_stmtContext() *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_vacuum_stmt
	return p
}

func (*Vacuum_stmtContext) IsVacuum_stmtContext() {}

func NewVacuum_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_vacuum_stmt

	return p
}

func (s *Vacuum_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_stmtContext) K_VACUUM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VACUUM, 0)
}

func (s *Vacuum_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Vacuum_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitVacuum_stmt(s)
	}
}




func (p *SqlParser) Vacuum_stmt() (localctx IVacuum_stmtContext) {
	this := p
	_ = this

	localctx = NewVacuum_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SqlParserRULE_vacuum_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1089)
		p.Match(SqlParserK_VACUUM)
	}



	return localctx
}


// IColumn_defContext is an interface to support dynamic dispatch.
type IColumn_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_defContext differentiates from other interfaces.
	IsColumn_defContext()
}

type Column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_defContext() *Column_defContext {
	var p = new(Column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_def
	return p
}

func (*Column_defContext) IsColumn_defContext() {}

func NewColumn_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defContext {
	var p = new(Column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_def

	return p
}

func (s *Column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_defContext) AllColumn_constraint() []IColumn_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			len++
		}
	}

	tst := make([]IColumn_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_constraintContext); ok {
			tst[i] = t.(IColumn_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Column_defContext) Column_constraint(i int) IColumn_constraintContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_defContext) AllType_name() []IType_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_nameContext); ok {
			len++
		}
	}

	tst := make([]IType_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_nameContext); ok {
			tst[i] = t.(IType_nameContext)
			i++
		}
	}

	return tst
}

func (s *Column_defContext) Type_name(i int) IType_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_def(s)
	}
}

func (s *Column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_def(s)
	}
}




func (p *SqlParser) Column_def() (localctx IColumn_defContext) {
	this := p
	_ = this

	localctx = NewColumn_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SqlParserRULE_column_def)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1091)
		p.Column_name()
	}
	p.SetState(1096)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1094)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1092)
					p.Column_constraint()
				}


			case 2:
				{
					p.SetState(1093)
					p.Type_name()
				}

			}

		}
		p.SetState(1098)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext())
	}



	return localctx
}


// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_type_name
	return p
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Type_nameContext) AllSigned_number() []ISigned_numberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISigned_numberContext); ok {
			len++
		}
	}

	tst := make([]ISigned_numberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISigned_numberContext); ok {
			tst[i] = t.(ISigned_numberContext)
			i++
		}
	}

	return tst
}

func (s *Type_nameContext) Signed_number(i int) ISigned_numberContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Type_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Type_nameContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, 0)
}

func (s *Type_nameContext) AllAny_name() []IAny_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAny_nameContext); ok {
			len++
		}
	}

	tst := make([]IAny_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAny_nameContext); ok {
			tst[i] = t.(IAny_nameContext)
			i++
		}
	}

	return tst
}

func (s *Type_nameContext) Any_name(i int) IAny_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitType_name(s)
	}
}




func (p *SqlParser) Type_name() (localctx IType_nameContext) {
	this := p
	_ = this

	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SqlParserRULE_type_name)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Name()
	}
	p.SetState(1119)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1100)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1101)
			p.Signed_number()
		}
		p.SetState(1103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserOPEN_PAR) | (1 << SqlParserK_ABORT) | (1 << SqlParserK_ACTION) | (1 << SqlParserK_ADD) | (1 << SqlParserK_AFTER) | (1 << SqlParserK_ALL) | (1 << SqlParserK_ALTER))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SqlParserK_ANALYZE - 32)) | (1 << (SqlParserK_AND - 32)) | (1 << (SqlParserK_AS - 32)) | (1 << (SqlParserK_ASC - 32)) | (1 << (SqlParserK_ATTACH - 32)) | (1 << (SqlParserK_AUTOINCREMENT - 32)) | (1 << (SqlParserK_BEFORE - 32)) | (1 << (SqlParserK_BEGIN - 32)) | (1 << (SqlParserK_BETWEEN - 32)) | (1 << (SqlParserK_BY - 32)) | (1 << (SqlParserK_CASCADE - 32)) | (1 << (SqlParserK_CASE - 32)) | (1 << (SqlParserK_CAST - 32)) | (1 << (SqlParserK_CHECK - 32)) | (1 << (SqlParserK_COLLATE - 32)) | (1 << (SqlParserK_COLUMN - 32)) | (1 << (SqlParserK_COMMIT - 32)) | (1 << (SqlParserK_CONFLICT - 32)) | (1 << (SqlParserK_CONSTRAINT - 32)) | (1 << (SqlParserK_CREATE - 32)) | (1 << (SqlParserK_CROSS - 32)) | (1 << (SqlParserK_CURRENT_DATE - 32)) | (1 << (SqlParserK_CURRENT_TIME - 32)) | (1 << (SqlParserK_CURRENT_TIMESTAMP - 32)) | (1 << (SqlParserK_DATABASE - 32)) | (1 << (SqlParserK_DEFAULT - 32)) | (1 << (SqlParserK_DEFERRABLE - 32)) | (1 << (SqlParserK_DEFERRED - 32)) | (1 << (SqlParserK_DELETE - 32)) | (1 << (SqlParserK_DESC - 32)) | (1 << (SqlParserK_DETACH - 32)) | (1 << (SqlParserK_DISTINCT - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SqlParserK_DROP - 64)) | (1 << (SqlParserK_EACH - 64)) | (1 << (SqlParserK_ELSE - 64)) | (1 << (SqlParserK_END - 64)) | (1 << (SqlParserK_ENABLE - 64)) | (1 << (SqlParserK_ESCAPE - 64)) | (1 << (SqlParserK_EXCEPT - 64)) | (1 << (SqlParserK_EXCLUSIVE - 64)) | (1 << (SqlParserK_EXISTS - 64)) | (1 << (SqlParserK_EXPLAIN - 64)) | (1 << (SqlParserK_FAIL - 64)) | (1 << (SqlParserK_FOR - 64)) | (1 << (SqlParserK_FOREIGN - 64)) | (1 << (SqlParserK_FROM - 64)) | (1 << (SqlParserK_FULL - 64)) | (1 << (SqlParserK_GLOB - 64)) | (1 << (SqlParserK_GROUP - 64)) | (1 << (SqlParserK_HAVING - 64)) | (1 << (SqlParserK_IF - 64)) | (1 << (SqlParserK_IGNORE - 64)) | (1 << (SqlParserK_IMMEDIATE - 64)) | (1 << (SqlParserK_IN - 64)) | (1 << (SqlParserK_INDEX - 64)) | (1 << (SqlParserK_INDEXED - 64)) | (1 << (SqlParserK_INITIALLY - 64)) | (1 << (SqlParserK_INNER - 64)) | (1 << (SqlParserK_INSERT - 64)) | (1 << (SqlParserK_INSTEAD - 64)) | (1 << (SqlParserK_INTERSECT - 64)) | (1 << (SqlParserK_INTO - 64)) | (1 << (SqlParserK_IS - 64)) | (1 << (SqlParserK_ISNULL - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SqlParserK_JOIN - 96)) | (1 << (SqlParserK_KEY - 96)) | (1 << (SqlParserK_LEFT - 96)) | (1 << (SqlParserK_LIKE - 96)) | (1 << (SqlParserK_LIMIT - 96)) | (1 << (SqlParserK_MATCH - 96)) | (1 << (SqlParserK_NATURAL - 96)) | (1 << (SqlParserK_NEXTVAL - 96)) | (1 << (SqlParserK_NO - 96)) | (1 << (SqlParserK_NOT - 96)) | (1 << (SqlParserK_NOTNULL - 96)) | (1 << (SqlParserK_NULL - 96)) | (1 << (SqlParserK_OF - 96)) | (1 << (SqlParserK_OFFSET - 96)) | (1 << (SqlParserK_ON - 96)) | (1 << (SqlParserK_OR - 96)) | (1 << (SqlParserK_ORDER - 96)) | (1 << (SqlParserK_OUTER - 96)) | (1 << (SqlParserK_PLAN - 96)) | (1 << (SqlParserK_PRAGMA - 96)) | (1 << (SqlParserK_PRIMARY - 96)) | (1 << (SqlParserK_QUERY - 96)) | (1 << (SqlParserK_RAISE - 96)) | (1 << (SqlParserK_RECURSIVE - 96)) | (1 << (SqlParserK_REFERENCES - 96)) | (1 << (SqlParserK_REGEXP - 96)) | (1 << (SqlParserK_REINDEX - 96)) | (1 << (SqlParserK_RELEASE - 96)) | (1 << (SqlParserK_RENAME - 96)) | (1 << (SqlParserK_REPLACE - 96)) | (1 << (SqlParserK_RESTRICT - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SqlParserK_RIGHT - 128)) | (1 << (SqlParserK_ROLLBACK - 128)) | (1 << (SqlParserK_ROW - 128)) | (1 << (SqlParserK_SAVEPOINT - 128)) | (1 << (SqlParserK_SELECT - 128)) | (1 << (SqlParserK_SET - 128)) | (1 << (SqlParserK_TABLE - 128)) | (1 << (SqlParserK_TEMP - 128)) | (1 << (SqlParserK_TEMPORARY - 128)) | (1 << (SqlParserK_THEN - 128)) | (1 << (SqlParserK_TO - 128)) | (1 << (SqlParserK_TRANSACTION - 128)) | (1 << (SqlParserK_TRIGGER - 128)) | (1 << (SqlParserK_UNION - 128)) | (1 << (SqlParserK_UNIQUE - 128)) | (1 << (SqlParserK_UPDATE - 128)) | (1 << (SqlParserK_USING - 128)) | (1 << (SqlParserK_VACUUM - 128)) | (1 << (SqlParserK_VALUES - 128)) | (1 << (SqlParserK_VIEW - 128)) | (1 << (SqlParserK_VIRTUAL - 128)) | (1 << (SqlParserK_WHEN - 128)) | (1 << (SqlParserK_WHERE - 128)) | (1 << (SqlParserK_WITH - 128)) | (1 << (SqlParserK_WITHOUT - 128)) | (1 << (SqlParserIDENTIFIER - 128)) | (1 << (SqlParserSTRING_LITERAL - 128)))) != 0) {
			{
				p.SetState(1102)
				p.Any_name()
			}

		}
		{
			p.SetState(1105)
			p.Match(SqlParserCLOSE_PAR)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1107)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1108)
			p.Signed_number()
		}
		p.SetState(1110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserOPEN_PAR) | (1 << SqlParserK_ABORT) | (1 << SqlParserK_ACTION) | (1 << SqlParserK_ADD) | (1 << SqlParserK_AFTER) | (1 << SqlParserK_ALL) | (1 << SqlParserK_ALTER))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SqlParserK_ANALYZE - 32)) | (1 << (SqlParserK_AND - 32)) | (1 << (SqlParserK_AS - 32)) | (1 << (SqlParserK_ASC - 32)) | (1 << (SqlParserK_ATTACH - 32)) | (1 << (SqlParserK_AUTOINCREMENT - 32)) | (1 << (SqlParserK_BEFORE - 32)) | (1 << (SqlParserK_BEGIN - 32)) | (1 << (SqlParserK_BETWEEN - 32)) | (1 << (SqlParserK_BY - 32)) | (1 << (SqlParserK_CASCADE - 32)) | (1 << (SqlParserK_CASE - 32)) | (1 << (SqlParserK_CAST - 32)) | (1 << (SqlParserK_CHECK - 32)) | (1 << (SqlParserK_COLLATE - 32)) | (1 << (SqlParserK_COLUMN - 32)) | (1 << (SqlParserK_COMMIT - 32)) | (1 << (SqlParserK_CONFLICT - 32)) | (1 << (SqlParserK_CONSTRAINT - 32)) | (1 << (SqlParserK_CREATE - 32)) | (1 << (SqlParserK_CROSS - 32)) | (1 << (SqlParserK_CURRENT_DATE - 32)) | (1 << (SqlParserK_CURRENT_TIME - 32)) | (1 << (SqlParserK_CURRENT_TIMESTAMP - 32)) | (1 << (SqlParserK_DATABASE - 32)) | (1 << (SqlParserK_DEFAULT - 32)) | (1 << (SqlParserK_DEFERRABLE - 32)) | (1 << (SqlParserK_DEFERRED - 32)) | (1 << (SqlParserK_DELETE - 32)) | (1 << (SqlParserK_DESC - 32)) | (1 << (SqlParserK_DETACH - 32)) | (1 << (SqlParserK_DISTINCT - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SqlParserK_DROP - 64)) | (1 << (SqlParserK_EACH - 64)) | (1 << (SqlParserK_ELSE - 64)) | (1 << (SqlParserK_END - 64)) | (1 << (SqlParserK_ENABLE - 64)) | (1 << (SqlParserK_ESCAPE - 64)) | (1 << (SqlParserK_EXCEPT - 64)) | (1 << (SqlParserK_EXCLUSIVE - 64)) | (1 << (SqlParserK_EXISTS - 64)) | (1 << (SqlParserK_EXPLAIN - 64)) | (1 << (SqlParserK_FAIL - 64)) | (1 << (SqlParserK_FOR - 64)) | (1 << (SqlParserK_FOREIGN - 64)) | (1 << (SqlParserK_FROM - 64)) | (1 << (SqlParserK_FULL - 64)) | (1 << (SqlParserK_GLOB - 64)) | (1 << (SqlParserK_GROUP - 64)) | (1 << (SqlParserK_HAVING - 64)) | (1 << (SqlParserK_IF - 64)) | (1 << (SqlParserK_IGNORE - 64)) | (1 << (SqlParserK_IMMEDIATE - 64)) | (1 << (SqlParserK_IN - 64)) | (1 << (SqlParserK_INDEX - 64)) | (1 << (SqlParserK_INDEXED - 64)) | (1 << (SqlParserK_INITIALLY - 64)) | (1 << (SqlParserK_INNER - 64)) | (1 << (SqlParserK_INSERT - 64)) | (1 << (SqlParserK_INSTEAD - 64)) | (1 << (SqlParserK_INTERSECT - 64)) | (1 << (SqlParserK_INTO - 64)) | (1 << (SqlParserK_IS - 64)) | (1 << (SqlParserK_ISNULL - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SqlParserK_JOIN - 96)) | (1 << (SqlParserK_KEY - 96)) | (1 << (SqlParserK_LEFT - 96)) | (1 << (SqlParserK_LIKE - 96)) | (1 << (SqlParserK_LIMIT - 96)) | (1 << (SqlParserK_MATCH - 96)) | (1 << (SqlParserK_NATURAL - 96)) | (1 << (SqlParserK_NEXTVAL - 96)) | (1 << (SqlParserK_NO - 96)) | (1 << (SqlParserK_NOT - 96)) | (1 << (SqlParserK_NOTNULL - 96)) | (1 << (SqlParserK_NULL - 96)) | (1 << (SqlParserK_OF - 96)) | (1 << (SqlParserK_OFFSET - 96)) | (1 << (SqlParserK_ON - 96)) | (1 << (SqlParserK_OR - 96)) | (1 << (SqlParserK_ORDER - 96)) | (1 << (SqlParserK_OUTER - 96)) | (1 << (SqlParserK_PLAN - 96)) | (1 << (SqlParserK_PRAGMA - 96)) | (1 << (SqlParserK_PRIMARY - 96)) | (1 << (SqlParserK_QUERY - 96)) | (1 << (SqlParserK_RAISE - 96)) | (1 << (SqlParserK_RECURSIVE - 96)) | (1 << (SqlParserK_REFERENCES - 96)) | (1 << (SqlParserK_REGEXP - 96)) | (1 << (SqlParserK_REINDEX - 96)) | (1 << (SqlParserK_RELEASE - 96)) | (1 << (SqlParserK_RENAME - 96)) | (1 << (SqlParserK_REPLACE - 96)) | (1 << (SqlParserK_RESTRICT - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SqlParserK_RIGHT - 128)) | (1 << (SqlParserK_ROLLBACK - 128)) | (1 << (SqlParserK_ROW - 128)) | (1 << (SqlParserK_SAVEPOINT - 128)) | (1 << (SqlParserK_SELECT - 128)) | (1 << (SqlParserK_SET - 128)) | (1 << (SqlParserK_TABLE - 128)) | (1 << (SqlParserK_TEMP - 128)) | (1 << (SqlParserK_TEMPORARY - 128)) | (1 << (SqlParserK_THEN - 128)) | (1 << (SqlParserK_TO - 128)) | (1 << (SqlParserK_TRANSACTION - 128)) | (1 << (SqlParserK_TRIGGER - 128)) | (1 << (SqlParserK_UNION - 128)) | (1 << (SqlParserK_UNIQUE - 128)) | (1 << (SqlParserK_UPDATE - 128)) | (1 << (SqlParserK_USING - 128)) | (1 << (SqlParserK_VACUUM - 128)) | (1 << (SqlParserK_VALUES - 128)) | (1 << (SqlParserK_VIEW - 128)) | (1 << (SqlParserK_VIRTUAL - 128)) | (1 << (SqlParserK_WHEN - 128)) | (1 << (SqlParserK_WHERE - 128)) | (1 << (SqlParserK_WITH - 128)) | (1 << (SqlParserK_WITHOUT - 128)) | (1 << (SqlParserIDENTIFIER - 128)) | (1 << (SqlParserSTRING_LITERAL - 128)))) != 0) {
			{
				p.SetState(1109)
				p.Any_name()
			}

		}
		{
			p.SetState(1112)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1113)
			p.Signed_number()
		}
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserOPEN_PAR) | (1 << SqlParserK_ABORT) | (1 << SqlParserK_ACTION) | (1 << SqlParserK_ADD) | (1 << SqlParserK_AFTER) | (1 << SqlParserK_ALL) | (1 << SqlParserK_ALTER))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SqlParserK_ANALYZE - 32)) | (1 << (SqlParserK_AND - 32)) | (1 << (SqlParserK_AS - 32)) | (1 << (SqlParserK_ASC - 32)) | (1 << (SqlParserK_ATTACH - 32)) | (1 << (SqlParserK_AUTOINCREMENT - 32)) | (1 << (SqlParserK_BEFORE - 32)) | (1 << (SqlParserK_BEGIN - 32)) | (1 << (SqlParserK_BETWEEN - 32)) | (1 << (SqlParserK_BY - 32)) | (1 << (SqlParserK_CASCADE - 32)) | (1 << (SqlParserK_CASE - 32)) | (1 << (SqlParserK_CAST - 32)) | (1 << (SqlParserK_CHECK - 32)) | (1 << (SqlParserK_COLLATE - 32)) | (1 << (SqlParserK_COLUMN - 32)) | (1 << (SqlParserK_COMMIT - 32)) | (1 << (SqlParserK_CONFLICT - 32)) | (1 << (SqlParserK_CONSTRAINT - 32)) | (1 << (SqlParserK_CREATE - 32)) | (1 << (SqlParserK_CROSS - 32)) | (1 << (SqlParserK_CURRENT_DATE - 32)) | (1 << (SqlParserK_CURRENT_TIME - 32)) | (1 << (SqlParserK_CURRENT_TIMESTAMP - 32)) | (1 << (SqlParserK_DATABASE - 32)) | (1 << (SqlParserK_DEFAULT - 32)) | (1 << (SqlParserK_DEFERRABLE - 32)) | (1 << (SqlParserK_DEFERRED - 32)) | (1 << (SqlParserK_DELETE - 32)) | (1 << (SqlParserK_DESC - 32)) | (1 << (SqlParserK_DETACH - 32)) | (1 << (SqlParserK_DISTINCT - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SqlParserK_DROP - 64)) | (1 << (SqlParserK_EACH - 64)) | (1 << (SqlParserK_ELSE - 64)) | (1 << (SqlParserK_END - 64)) | (1 << (SqlParserK_ENABLE - 64)) | (1 << (SqlParserK_ESCAPE - 64)) | (1 << (SqlParserK_EXCEPT - 64)) | (1 << (SqlParserK_EXCLUSIVE - 64)) | (1 << (SqlParserK_EXISTS - 64)) | (1 << (SqlParserK_EXPLAIN - 64)) | (1 << (SqlParserK_FAIL - 64)) | (1 << (SqlParserK_FOR - 64)) | (1 << (SqlParserK_FOREIGN - 64)) | (1 << (SqlParserK_FROM - 64)) | (1 << (SqlParserK_FULL - 64)) | (1 << (SqlParserK_GLOB - 64)) | (1 << (SqlParserK_GROUP - 64)) | (1 << (SqlParserK_HAVING - 64)) | (1 << (SqlParserK_IF - 64)) | (1 << (SqlParserK_IGNORE - 64)) | (1 << (SqlParserK_IMMEDIATE - 64)) | (1 << (SqlParserK_IN - 64)) | (1 << (SqlParserK_INDEX - 64)) | (1 << (SqlParserK_INDEXED - 64)) | (1 << (SqlParserK_INITIALLY - 64)) | (1 << (SqlParserK_INNER - 64)) | (1 << (SqlParserK_INSERT - 64)) | (1 << (SqlParserK_INSTEAD - 64)) | (1 << (SqlParserK_INTERSECT - 64)) | (1 << (SqlParserK_INTO - 64)) | (1 << (SqlParserK_IS - 64)) | (1 << (SqlParserK_ISNULL - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SqlParserK_JOIN - 96)) | (1 << (SqlParserK_KEY - 96)) | (1 << (SqlParserK_LEFT - 96)) | (1 << (SqlParserK_LIKE - 96)) | (1 << (SqlParserK_LIMIT - 96)) | (1 << (SqlParserK_MATCH - 96)) | (1 << (SqlParserK_NATURAL - 96)) | (1 << (SqlParserK_NEXTVAL - 96)) | (1 << (SqlParserK_NO - 96)) | (1 << (SqlParserK_NOT - 96)) | (1 << (SqlParserK_NOTNULL - 96)) | (1 << (SqlParserK_NULL - 96)) | (1 << (SqlParserK_OF - 96)) | (1 << (SqlParserK_OFFSET - 96)) | (1 << (SqlParserK_ON - 96)) | (1 << (SqlParserK_OR - 96)) | (1 << (SqlParserK_ORDER - 96)) | (1 << (SqlParserK_OUTER - 96)) | (1 << (SqlParserK_PLAN - 96)) | (1 << (SqlParserK_PRAGMA - 96)) | (1 << (SqlParserK_PRIMARY - 96)) | (1 << (SqlParserK_QUERY - 96)) | (1 << (SqlParserK_RAISE - 96)) | (1 << (SqlParserK_RECURSIVE - 96)) | (1 << (SqlParserK_REFERENCES - 96)) | (1 << (SqlParserK_REGEXP - 96)) | (1 << (SqlParserK_REINDEX - 96)) | (1 << (SqlParserK_RELEASE - 96)) | (1 << (SqlParserK_RENAME - 96)) | (1 << (SqlParserK_REPLACE - 96)) | (1 << (SqlParserK_RESTRICT - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SqlParserK_RIGHT - 128)) | (1 << (SqlParserK_ROLLBACK - 128)) | (1 << (SqlParserK_ROW - 128)) | (1 << (SqlParserK_SAVEPOINT - 128)) | (1 << (SqlParserK_SELECT - 128)) | (1 << (SqlParserK_SET - 128)) | (1 << (SqlParserK_TABLE - 128)) | (1 << (SqlParserK_TEMP - 128)) | (1 << (SqlParserK_TEMPORARY - 128)) | (1 << (SqlParserK_THEN - 128)) | (1 << (SqlParserK_TO - 128)) | (1 << (SqlParserK_TRANSACTION - 128)) | (1 << (SqlParserK_TRIGGER - 128)) | (1 << (SqlParserK_UNION - 128)) | (1 << (SqlParserK_UNIQUE - 128)) | (1 << (SqlParserK_UPDATE - 128)) | (1 << (SqlParserK_USING - 128)) | (1 << (SqlParserK_VACUUM - 128)) | (1 << (SqlParserK_VALUES - 128)) | (1 << (SqlParserK_VIEW - 128)) | (1 << (SqlParserK_VIRTUAL - 128)) | (1 << (SqlParserK_WHEN - 128)) | (1 << (SqlParserK_WHERE - 128)) | (1 << (SqlParserK_WITH - 128)) | (1 << (SqlParserK_WITHOUT - 128)) | (1 << (SqlParserIDENTIFIER - 128)) | (1 << (SqlParserSTRING_LITERAL - 128)))) != 0) {
			{
				p.SetState(1114)
				p.Any_name()
			}

		}
		{
			p.SetState(1117)
			p.Match(SqlParserCLOSE_PAR)
		}


	}



	return localctx
}


// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) Column_constraint_primary_key() IColumn_constraint_primary_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraint_primary_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraint_primary_keyContext)
}

func (s *Column_constraintContext) Column_constraint_foreign_key() IColumn_constraint_foreign_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraint_foreign_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraint_foreign_keyContext)
}

func (s *Column_constraintContext) Column_constraint_not_null() IColumn_constraint_not_nullContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraint_not_nullContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraint_not_nullContext)
}

func (s *Column_constraintContext) Column_constraint_null() IColumn_constraint_nullContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraint_nullContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraint_nullContext)
}

func (s *Column_constraintContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNIQUE, 0)
}

func (s *Column_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraintContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CHECK, 0)
}

func (s *Column_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Column_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Column_constraintContext) Column_default() IColumn_defaultContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defaultContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defaultContext)
}

func (s *Column_constraintContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLLATE, 0)
}

func (s *Column_constraintContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Column_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CONSTRAINT, 0)
}

func (s *Column_constraintContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}




func (p *SqlParser) Column_constraint() (localctx IColumn_constraintContext) {
	this := p
	_ = this

	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SqlParserRULE_column_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1123)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_CONSTRAINT {
		{
			p.SetState(1121)
			p.Match(SqlParserK_CONSTRAINT)
		}
		{
			p.SetState(1122)
			p.Name()
		}

	}
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_PRIMARY:
		{
			p.SetState(1125)
			p.Column_constraint_primary_key()
		}


	case SqlParserK_REFERENCES:
		{
			p.SetState(1126)
			p.Column_constraint_foreign_key()
		}


	case SqlParserK_NOT:
		{
			p.SetState(1127)
			p.Column_constraint_not_null()
		}


	case SqlParserK_NULL:
		{
			p.SetState(1128)
			p.Column_constraint_null()
		}


	case SqlParserK_UNIQUE:
		{
			p.SetState(1129)
			p.Match(SqlParserK_UNIQUE)
		}
		{
			p.SetState(1130)
			p.Conflict_clause()
		}


	case SqlParserK_CHECK:
		{
			p.SetState(1131)
			p.Match(SqlParserK_CHECK)
		}
		{
			p.SetState(1132)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1133)
			p.expr(0)
		}
		{
			p.SetState(1134)
			p.Match(SqlParserCLOSE_PAR)
		}


	case SqlParserK_DEFAULT:
		{
			p.SetState(1136)
			p.Column_default()
		}


	case SqlParserK_COLLATE:
		{
			p.SetState(1137)
			p.Match(SqlParserK_COLLATE)
		}
		{
			p.SetState(1138)
			p.Collation_name()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IColumn_constraint_primary_keyContext is an interface to support dynamic dispatch.
type IColumn_constraint_primary_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraint_primary_keyContext differentiates from other interfaces.
	IsColumn_constraint_primary_keyContext()
}

type Column_constraint_primary_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraint_primary_keyContext() *Column_constraint_primary_keyContext {
	var p = new(Column_constraint_primary_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_constraint_primary_key
	return p
}

func (*Column_constraint_primary_keyContext) IsColumn_constraint_primary_keyContext() {}

func NewColumn_constraint_primary_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraint_primary_keyContext {
	var p = new(Column_constraint_primary_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_constraint_primary_key

	return p
}

func (s *Column_constraint_primary_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraint_primary_keyContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PRIMARY, 0)
}

func (s *Column_constraint_primary_keyContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_KEY, 0)
}

func (s *Column_constraint_primary_keyContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraint_primary_keyContext) K_AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AUTOINCREMENT, 0)
}

func (s *Column_constraint_primary_keyContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ASC, 0)
}

func (s *Column_constraint_primary_keyContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DESC, 0)
}

func (s *Column_constraint_primary_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraint_primary_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_constraint_primary_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_constraint_primary_key(s)
	}
}

func (s *Column_constraint_primary_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_constraint_primary_key(s)
	}
}




func (p *SqlParser) Column_constraint_primary_key() (localctx IColumn_constraint_primary_keyContext) {
	this := p
	_ = this

	localctx = NewColumn_constraint_primary_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SqlParserRULE_column_constraint_primary_key)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1141)
		p.Match(SqlParserK_PRIMARY)
	}
	{
		p.SetState(1142)
		p.Match(SqlParserK_KEY)
	}
	p.SetState(1144)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1143)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_ASC || _la == SqlParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	}
	{
		p.SetState(1146)
		p.Conflict_clause()
	}
	p.SetState(1148)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1147)
			p.Match(SqlParserK_AUTOINCREMENT)
		}


	}



	return localctx
}


// IColumn_constraint_foreign_keyContext is an interface to support dynamic dispatch.
type IColumn_constraint_foreign_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraint_foreign_keyContext differentiates from other interfaces.
	IsColumn_constraint_foreign_keyContext()
}

type Column_constraint_foreign_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraint_foreign_keyContext() *Column_constraint_foreign_keyContext {
	var p = new(Column_constraint_foreign_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_constraint_foreign_key
	return p
}

func (*Column_constraint_foreign_keyContext) IsColumn_constraint_foreign_keyContext() {}

func NewColumn_constraint_foreign_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraint_foreign_keyContext {
	var p = new(Column_constraint_foreign_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_constraint_foreign_key

	return p
}

func (s *Column_constraint_foreign_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraint_foreign_keyContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Column_constraint_foreign_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraint_foreign_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_constraint_foreign_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_constraint_foreign_key(s)
	}
}

func (s *Column_constraint_foreign_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_constraint_foreign_key(s)
	}
}




func (p *SqlParser) Column_constraint_foreign_key() (localctx IColumn_constraint_foreign_keyContext) {
	this := p
	_ = this

	localctx = NewColumn_constraint_foreign_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SqlParserRULE_column_constraint_foreign_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1150)
		p.Foreign_key_clause()
	}



	return localctx
}


// IColumn_constraint_not_nullContext is an interface to support dynamic dispatch.
type IColumn_constraint_not_nullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraint_not_nullContext differentiates from other interfaces.
	IsColumn_constraint_not_nullContext()
}

type Column_constraint_not_nullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraint_not_nullContext() *Column_constraint_not_nullContext {
	var p = new(Column_constraint_not_nullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_constraint_not_null
	return p
}

func (*Column_constraint_not_nullContext) IsColumn_constraint_not_nullContext() {}

func NewColumn_constraint_not_nullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraint_not_nullContext {
	var p = new(Column_constraint_not_nullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_constraint_not_null

	return p
}

func (s *Column_constraint_not_nullContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraint_not_nullContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Column_constraint_not_nullContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NULL, 0)
}

func (s *Column_constraint_not_nullContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraint_not_nullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraint_not_nullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_constraint_not_nullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_constraint_not_null(s)
	}
}

func (s *Column_constraint_not_nullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_constraint_not_null(s)
	}
}




func (p *SqlParser) Column_constraint_not_null() (localctx IColumn_constraint_not_nullContext) {
	this := p
	_ = this

	localctx = NewColumn_constraint_not_nullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SqlParserRULE_column_constraint_not_null)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1152)
		p.Match(SqlParserK_NOT)
	}
	{
		p.SetState(1153)
		p.Match(SqlParserK_NULL)
	}
	{
		p.SetState(1154)
		p.Conflict_clause()
	}



	return localctx
}


// IColumn_constraint_nullContext is an interface to support dynamic dispatch.
type IColumn_constraint_nullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraint_nullContext differentiates from other interfaces.
	IsColumn_constraint_nullContext()
}

type Column_constraint_nullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraint_nullContext() *Column_constraint_nullContext {
	var p = new(Column_constraint_nullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_constraint_null
	return p
}

func (*Column_constraint_nullContext) IsColumn_constraint_nullContext() {}

func NewColumn_constraint_nullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraint_nullContext {
	var p = new(Column_constraint_nullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_constraint_null

	return p
}

func (s *Column_constraint_nullContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraint_nullContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NULL, 0)
}

func (s *Column_constraint_nullContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraint_nullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraint_nullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_constraint_nullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_constraint_null(s)
	}
}

func (s *Column_constraint_nullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_constraint_null(s)
	}
}




func (p *SqlParser) Column_constraint_null() (localctx IColumn_constraint_nullContext) {
	this := p
	_ = this

	localctx = NewColumn_constraint_nullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SqlParserRULE_column_constraint_null)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1156)
		p.Match(SqlParserK_NULL)
	}
	{
		p.SetState(1157)
		p.Conflict_clause()
	}



	return localctx
}


// IColumn_defaultContext is an interface to support dynamic dispatch.
type IColumn_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_defaultContext differentiates from other interfaces.
	IsColumn_defaultContext()
}

type Column_defaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_defaultContext() *Column_defaultContext {
	var p = new(Column_defaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_default
	return p
}

func (*Column_defaultContext) IsColumn_defaultContext() {}

func NewColumn_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defaultContext {
	var p = new(Column_defaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_default

	return p
}

func (s *Column_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defaultContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFAULT, 0)
}

func (s *Column_defaultContext) Column_default_value() IColumn_default_valueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_default_valueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_default_valueContext)
}

func (s *Column_defaultContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Column_defaultContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_defaultContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Column_defaultContext) K_NEXTVAL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NEXTVAL, 0)
}

func (s *Column_defaultContext) AllAny_name() []IAny_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAny_nameContext); ok {
			len++
		}
	}

	tst := make([]IAny_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAny_nameContext); ok {
			tst[i] = t.(IAny_nameContext)
			i++
		}
	}

	return tst
}

func (s *Column_defaultContext) Any_name(i int) IAny_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Column_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_default(s)
	}
}

func (s *Column_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_default(s)
	}
}




func (p *SqlParser) Column_default() (localctx IColumn_defaultContext) {
	this := p
	_ = this

	localctx = NewColumn_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SqlParserRULE_column_default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1159)
		p.Match(SqlParserK_DEFAULT)
	}
	p.SetState(1171)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1160)
			p.Column_default_value()
		}


	case 2:
		{
			p.SetState(1161)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1162)
			p.expr(0)
		}
		{
			p.SetState(1163)
			p.Match(SqlParserCLOSE_PAR)
		}


	case 3:
		{
			p.SetState(1165)
			p.Match(SqlParserK_NEXTVAL)
		}
		{
			p.SetState(1166)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1167)
			p.expr(0)
		}
		{
			p.SetState(1168)
			p.Match(SqlParserCLOSE_PAR)
		}


	case 4:
		{
			p.SetState(1170)
			p.Any_name()
		}

	}
	p.SetState(1179)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1173)
			p.Match(SqlParserT__0)
		}
		p.SetState(1175)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(1174)
						p.Any_name()
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1177)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())
		}


	}



	return localctx
}


// IColumn_default_valueContext is an interface to support dynamic dispatch.
type IColumn_default_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_default_valueContext differentiates from other interfaces.
	IsColumn_default_valueContext()
}

type Column_default_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_default_valueContext() *Column_default_valueContext {
	var p = new(Column_default_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_default_value
	return p
}

func (*Column_default_valueContext) IsColumn_default_valueContext() {}

func NewColumn_default_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_default_valueContext {
	var p = new(Column_default_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_default_value

	return p
}

func (s *Column_default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_default_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Column_default_valueContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Column_default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_default_value(s)
	}
}

func (s *Column_default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_default_value(s)
	}
}




func (p *SqlParser) Column_default_value() (localctx IColumn_default_valueContext) {
	this := p
	_ = this

	localctx = NewColumn_default_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SqlParserRULE_column_default_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1183)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1181)
			p.Signed_number()
		}


	case 2:
		{
			p.SetState(1182)
			p.Literal_value()
		}

	}



	return localctx
}


// IConflict_clauseContext is an interface to support dynamic dispatch.
type IConflict_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConflict_clauseContext differentiates from other interfaces.
	IsConflict_clauseContext()
}

type Conflict_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_clauseContext() *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_conflict_clause
	return p
}

func (*Conflict_clauseContext) IsConflict_clauseContext() {}

func NewConflict_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_conflict_clause

	return p
}

func (s *Conflict_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_clauseContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ON, 0)
}

func (s *Conflict_clauseContext) K_CONFLICT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CONFLICT, 0)
}

func (s *Conflict_clauseContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *Conflict_clauseContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ABORT, 0)
}

func (s *Conflict_clauseContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FAIL, 0)
}

func (s *Conflict_clauseContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IGNORE, 0)
}

func (s *Conflict_clauseContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REPLACE, 0)
}

func (s *Conflict_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Conflict_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitConflict_clause(s)
	}
}




func (p *SqlParser) Conflict_clause() (localctx IConflict_clauseContext) {
	this := p
	_ = this

	localctx = NewConflict_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SqlParserRULE_conflict_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1188)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1185)
			p.Match(SqlParserK_ON)
		}
		{
			p.SetState(1186)
			p.Match(SqlParserK_CONFLICT)
		}
		{
			p.SetState(1187)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_ABORT || _la == SqlParserK_FAIL || _la == SqlParserK_IGNORE || _la == SqlParserK_REPLACE || _la == SqlParserK_ROLLBACK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	}



	return localctx
}


// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *ExprContext) BIND_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SqlParserBIND_PARAMETER, 0)
}

func (s *ExprContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *ExprContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ExprContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SqlParserDOT)
}

func (s *ExprContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, i)
}

func (s *ExprContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *ExprContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) Function_name() IFunction_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_nameContext)
}

func (s *ExprContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *ExprContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *ExprContext) STAR() antlr.TerminalNode {
	return s.GetToken(SqlParserSTAR, 0)
}

func (s *ExprContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DISTINCT, 0)
}

func (s *ExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *ExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *ExprContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CAST, 0)
}

func (s *ExprContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *ExprContext) Type_name() IType_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *ExprContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *ExprContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *ExprContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *ExprContext) K_CASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CASE, 0)
}

func (s *ExprContext) K_END() antlr.TerminalNode {
	return s.GetToken(SqlParserK_END, 0)
}

func (s *ExprContext) AllK_WHEN() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_WHEN)
}

func (s *ExprContext) K_WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHEN, i)
}

func (s *ExprContext) AllK_THEN() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_THEN)
}

func (s *ExprContext) K_THEN(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_THEN, i)
}

func (s *ExprContext) K_ELSE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ELSE, 0)
}

func (s *ExprContext) Raise_function() IRaise_functionContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaise_functionContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaise_functionContext)
}

func (s *ExprContext) PIPE2() antlr.TerminalNode {
	return s.GetToken(SqlParserPIPE2, 0)
}

func (s *ExprContext) DIV() antlr.TerminalNode {
	return s.GetToken(SqlParserDIV, 0)
}

func (s *ExprContext) MOD() antlr.TerminalNode {
	return s.GetToken(SqlParserMOD, 0)
}

func (s *ExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SqlParserPLUS, 0)
}

func (s *ExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SqlParserMINUS, 0)
}

func (s *ExprContext) LT2() antlr.TerminalNode {
	return s.GetToken(SqlParserLT2, 0)
}

func (s *ExprContext) GT2() antlr.TerminalNode {
	return s.GetToken(SqlParserGT2, 0)
}

func (s *ExprContext) AMP() antlr.TerminalNode {
	return s.GetToken(SqlParserAMP, 0)
}

func (s *ExprContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SqlParserPIPE, 0)
}

func (s *ExprContext) LT() antlr.TerminalNode {
	return s.GetToken(SqlParserLT, 0)
}

func (s *ExprContext) LT_EQ() antlr.TerminalNode {
	return s.GetToken(SqlParserLT_EQ, 0)
}

func (s *ExprContext) GT() antlr.TerminalNode {
	return s.GetToken(SqlParserGT, 0)
}

func (s *ExprContext) GT_EQ() antlr.TerminalNode {
	return s.GetToken(SqlParserGT_EQ, 0)
}

func (s *ExprContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SqlParserASSIGN, 0)
}

func (s *ExprContext) EQ() antlr.TerminalNode {
	return s.GetToken(SqlParserEQ, 0)
}

func (s *ExprContext) NOT_EQ1() antlr.TerminalNode {
	return s.GetToken(SqlParserNOT_EQ1, 0)
}

func (s *ExprContext) NOT_EQ2() antlr.TerminalNode {
	return s.GetToken(SqlParserNOT_EQ2, 0)
}

func (s *ExprContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IS, 0)
}

func (s *ExprContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IN, 0)
}

func (s *ExprContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIKE, 0)
}

func (s *ExprContext) K_GLOB() antlr.TerminalNode {
	return s.GetToken(SqlParserK_GLOB, 0)
}

func (s *ExprContext) K_MATCH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_MATCH, 0)
}

func (s *ExprContext) K_REGEXP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REGEXP, 0)
}

func (s *ExprContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AND, 0)
}

func (s *ExprContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OR, 0)
}

func (s *ExprContext) K_BETWEEN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BETWEEN, 0)
}

func (s *ExprContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLLATE, 0)
}

func (s *ExprContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *ExprContext) K_ESCAPE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ESCAPE, 0)
}

func (s *ExprContext) K_ISNULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ISNULL, 0)
}

func (s *ExprContext) K_NOTNULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOTNULL, 0)
}

func (s *ExprContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NULL, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitExpr(s)
	}
}





func (p *SqlParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *SqlParser) expr(_p int) (localctx IExprContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 94
	p.EnterRecursionRule(localctx, 94, SqlParserRULE_expr, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1191)
			p.Literal_value()
		}


	case 2:
		{
			p.SetState(1192)
			p.Match(SqlParserBIND_PARAMETER)
		}


	case 3:
		p.SetState(1201)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
			p.SetState(1196)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1193)
					p.Database_name()
				}
				{
					p.SetState(1194)
					p.Match(SqlParserDOT)
				}


			}
			{
				p.SetState(1198)
				p.Table_name()
			}
			{
				p.SetState(1199)
				p.Match(SqlParserDOT)
			}


		}
		{
			p.SetState(1203)
			p.Column_name()
		}


	case 4:
		{
			p.SetState(1204)
			p.Unary_operator()
		}
		{
			p.SetState(1205)
			p.expr(21)
		}


	case 5:
		{
			p.SetState(1207)
			p.Function_name()
		}
		{
			p.SetState(1208)
			p.Match(SqlParserOPEN_PAR)
		}
		p.SetState(1221)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SqlParserOPEN_PAR, SqlParserPLUS, SqlParserMINUS, SqlParserTILDE, SqlParserK_ABORT, SqlParserK_ACTION, SqlParserK_ADD, SqlParserK_AFTER, SqlParserK_ALL, SqlParserK_ALTER, SqlParserK_ANALYZE, SqlParserK_AND, SqlParserK_AS, SqlParserK_ASC, SqlParserK_ATTACH, SqlParserK_AUTOINCREMENT, SqlParserK_BEFORE, SqlParserK_BEGIN, SqlParserK_BETWEEN, SqlParserK_BY, SqlParserK_CASCADE, SqlParserK_CASE, SqlParserK_CAST, SqlParserK_CHECK, SqlParserK_COLLATE, SqlParserK_COLUMN, SqlParserK_COMMIT, SqlParserK_CONFLICT, SqlParserK_CONSTRAINT, SqlParserK_CREATE, SqlParserK_CROSS, SqlParserK_CURRENT_DATE, SqlParserK_CURRENT_TIME, SqlParserK_CURRENT_TIMESTAMP, SqlParserK_DATABASE, SqlParserK_DEFAULT, SqlParserK_DEFERRABLE, SqlParserK_DEFERRED, SqlParserK_DELETE, SqlParserK_DESC, SqlParserK_DETACH, SqlParserK_DISTINCT, SqlParserK_DROP, SqlParserK_EACH, SqlParserK_ELSE, SqlParserK_END, SqlParserK_ENABLE, SqlParserK_ESCAPE, SqlParserK_EXCEPT, SqlParserK_EXCLUSIVE, SqlParserK_EXISTS, SqlParserK_EXPLAIN, SqlParserK_FAIL, SqlParserK_FOR, SqlParserK_FOREIGN, SqlParserK_FROM, SqlParserK_FULL, SqlParserK_GLOB, SqlParserK_GROUP, SqlParserK_HAVING, SqlParserK_IF, SqlParserK_IGNORE, SqlParserK_IMMEDIATE, SqlParserK_IN, SqlParserK_INDEX, SqlParserK_INDEXED, SqlParserK_INITIALLY, SqlParserK_INNER, SqlParserK_INSERT, SqlParserK_INSTEAD, SqlParserK_INTERSECT, SqlParserK_INTO, SqlParserK_IS, SqlParserK_ISNULL, SqlParserK_JOIN, SqlParserK_KEY, SqlParserK_LEFT, SqlParserK_LIKE, SqlParserK_LIMIT, SqlParserK_MATCH, SqlParserK_NATURAL, SqlParserK_NEXTVAL, SqlParserK_NO, SqlParserK_NOT, SqlParserK_NOTNULL, SqlParserK_NULL, SqlParserK_OF, SqlParserK_OFFSET, SqlParserK_ON, SqlParserK_OR, SqlParserK_ORDER, SqlParserK_OUTER, SqlParserK_PLAN, SqlParserK_PRAGMA, SqlParserK_PRIMARY, SqlParserK_QUERY, SqlParserK_RAISE, SqlParserK_RECURSIVE, SqlParserK_REFERENCES, SqlParserK_REGEXP, SqlParserK_REINDEX, SqlParserK_RELEASE, SqlParserK_RENAME, SqlParserK_REPLACE, SqlParserK_RESTRICT, SqlParserK_RIGHT, SqlParserK_ROLLBACK, SqlParserK_ROW, SqlParserK_SAVEPOINT, SqlParserK_SELECT, SqlParserK_SET, SqlParserK_TABLE, SqlParserK_TEMP, SqlParserK_TEMPORARY, SqlParserK_THEN, SqlParserK_TO, SqlParserK_TRANSACTION, SqlParserK_TRIGGER, SqlParserK_UNION, SqlParserK_UNIQUE, SqlParserK_UPDATE, SqlParserK_USING, SqlParserK_VACUUM, SqlParserK_VALUES, SqlParserK_VIEW, SqlParserK_VIRTUAL, SqlParserK_WHEN, SqlParserK_WHERE, SqlParserK_WITH, SqlParserK_WITHOUT, SqlParserIDENTIFIER, SqlParserNUMERIC_LITERAL, SqlParserBIND_PARAMETER, SqlParserSTRING_LITERAL, SqlParserBLOB_LITERAL:
			p.SetState(1210)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1209)
					p.Match(SqlParserK_DISTINCT)
				}


			}
			{
				p.SetState(1212)
				p.expr(0)
			}
			p.SetState(1217)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(1213)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(1214)
					p.expr(0)
				}


				p.SetState(1219)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}


		case SqlParserSTAR:
			{
				p.SetState(1220)
				p.Match(SqlParserSTAR)
			}


		case SqlParserCLOSE_PAR:



		default:
		}
		{
			p.SetState(1223)
			p.Match(SqlParserCLOSE_PAR)
		}


	case 6:
		{
			p.SetState(1225)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1226)
			p.expr(0)
		}
		{
			p.SetState(1227)
			p.Match(SqlParserCLOSE_PAR)
		}


	case 7:
		{
			p.SetState(1229)
			p.Match(SqlParserK_CAST)
		}
		{
			p.SetState(1230)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1231)
			p.expr(0)
		}
		{
			p.SetState(1232)
			p.Match(SqlParserK_AS)
		}
		{
			p.SetState(1233)
			p.Type_name()
		}
		{
			p.SetState(1234)
			p.Match(SqlParserCLOSE_PAR)
		}


	case 8:
		p.SetState(1240)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_EXISTS || _la == SqlParserK_NOT {
			p.SetState(1237)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SqlParserK_NOT {
				{
					p.SetState(1236)
					p.Match(SqlParserK_NOT)
				}

			}
			{
				p.SetState(1239)
				p.Match(SqlParserK_EXISTS)
			}

		}
		{
			p.SetState(1242)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1243)
			p.Select_stmt()
		}
		{
			p.SetState(1244)
			p.Match(SqlParserCLOSE_PAR)
		}


	case 9:
		{
			p.SetState(1246)
			p.Match(SqlParserK_CASE)
		}
		p.SetState(1248)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1247)
				p.expr(0)
			}


		}
		p.SetState(1255)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SqlParserK_WHEN {
			{
				p.SetState(1250)
				p.Match(SqlParserK_WHEN)
			}
			{
				p.SetState(1251)
				p.expr(0)
			}
			{
				p.SetState(1252)
				p.Match(SqlParserK_THEN)
			}
			{
				p.SetState(1253)
				p.expr(0)
			}


			p.SetState(1257)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_ELSE {
			{
				p.SetState(1259)
				p.Match(SqlParserK_ELSE)
			}
			{
				p.SetState(1260)
				p.expr(0)
			}

		}
		{
			p.SetState(1263)
			p.Match(SqlParserK_END)
		}


	case 10:
		{
			p.SetState(1265)
			p.Raise_function()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1368)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1366)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1268)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(1269)
					p.Match(SqlParserPIPE2)
				}
				{
					p.SetState(1270)
					p.expr(21)
				}


			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1271)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(1272)
					_la = p.GetTokenStream().LA(1)

					if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserSTAR) | (1 << SqlParserDIV) | (1 << SqlParserMOD))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1273)
					p.expr(20)
				}


			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1274)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(1275)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SqlParserPLUS || _la == SqlParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1276)
					p.expr(19)
				}


			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1277)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1278)
					_la = p.GetTokenStream().LA(1)

					if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserLT2) | (1 << SqlParserGT2) | (1 << SqlParserAMP) | (1 << SqlParserPIPE))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1279)
					p.expr(18)
				}


			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1280)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1281)
					_la = p.GetTokenStream().LA(1)

					if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserLT) | (1 << SqlParserLT_EQ) | (1 << SqlParserGT) | (1 << SqlParserGT_EQ))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1282)
					p.expr(17)
				}


			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1283)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				p.SetState(1296)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1284)
						p.Match(SqlParserASSIGN)
					}


				case 2:
					{
						p.SetState(1285)
						p.Match(SqlParserEQ)
					}


				case 3:
					{
						p.SetState(1286)
						p.Match(SqlParserNOT_EQ1)
					}


				case 4:
					{
						p.SetState(1287)
						p.Match(SqlParserNOT_EQ2)
					}


				case 5:
					{
						p.SetState(1288)
						p.Match(SqlParserK_IS)
					}


				case 6:
					{
						p.SetState(1289)
						p.Match(SqlParserK_IS)
					}
					{
						p.SetState(1290)
						p.Match(SqlParserK_NOT)
					}


				case 7:
					{
						p.SetState(1291)
						p.Match(SqlParserK_IN)
					}


				case 8:
					{
						p.SetState(1292)
						p.Match(SqlParserK_LIKE)
					}


				case 9:
					{
						p.SetState(1293)
						p.Match(SqlParserK_GLOB)
					}


				case 10:
					{
						p.SetState(1294)
						p.Match(SqlParserK_MATCH)
					}


				case 11:
					{
						p.SetState(1295)
						p.Match(SqlParserK_REGEXP)
					}

				}
				{
					p.SetState(1298)
					p.expr(16)
				}


			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1299)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1300)
					p.Match(SqlParserK_AND)
				}
				{
					p.SetState(1301)
					p.expr(15)
				}


			case 8:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1302)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1303)
					p.Match(SqlParserK_OR)
				}
				{
					p.SetState(1304)
					p.expr(14)
				}


			case 9:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1305)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1306)
					p.Match(SqlParserK_IS)
				}
				p.SetState(1308)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1307)
						p.Match(SqlParserK_NOT)
					}


				}
				{
					p.SetState(1310)
					p.expr(7)
				}


			case 10:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1311)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(1313)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SqlParserK_NOT {
					{
						p.SetState(1312)
						p.Match(SqlParserK_NOT)
					}

				}
				{
					p.SetState(1315)
					p.Match(SqlParserK_BETWEEN)
				}
				{
					p.SetState(1316)
					p.expr(0)
				}
				{
					p.SetState(1317)
					p.Match(SqlParserK_AND)
				}
				{
					p.SetState(1318)
					p.expr(6)
				}


			case 11:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1320)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1321)
					p.Match(SqlParserK_COLLATE)
				}
				{
					p.SetState(1322)
					p.Collation_name()
				}


			case 12:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1323)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				p.SetState(1325)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SqlParserK_NOT {
					{
						p.SetState(1324)
						p.Match(SqlParserK_NOT)
					}

				}
				{
					p.SetState(1327)
					_la = p.GetTokenStream().LA(1)

					if !(((((_la - 79)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 79))) & ((1 << (SqlParserK_GLOB - 79)) | (1 << (SqlParserK_LIKE - 79)) | (1 << (SqlParserK_MATCH - 79)))) != 0) || _la == SqlParserK_REGEXP) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1328)
					p.expr(0)
				}
				p.SetState(1331)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1329)
						p.Match(SqlParserK_ESCAPE)
					}
					{
						p.SetState(1330)
						p.expr(0)
					}


				}


			case 13:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1333)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				p.SetState(1338)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SqlParserK_ISNULL:
					{
						p.SetState(1334)
						p.Match(SqlParserK_ISNULL)
					}


				case SqlParserK_NOTNULL:
					{
						p.SetState(1335)
						p.Match(SqlParserK_NOTNULL)
					}


				case SqlParserK_NOT:
					{
						p.SetState(1336)
						p.Match(SqlParserK_NOT)
					}
					{
						p.SetState(1337)
						p.Match(SqlParserK_NULL)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}


			case 14:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SqlParserRULE_expr)
				p.SetState(1340)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(1342)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SqlParserK_NOT {
					{
						p.SetState(1341)
						p.Match(SqlParserK_NOT)
					}

				}
				{
					p.SetState(1344)
					p.Match(SqlParserK_IN)
				}
				p.SetState(1364)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1345)
						p.Match(SqlParserOPEN_PAR)
					}
					p.SetState(1355)
					p.GetErrorHandler().Sync(p)


					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1346)
							p.Select_stmt()
						}

					} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 2 {
						{
							p.SetState(1347)
							p.expr(0)
						}
						p.SetState(1352)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)


						for _la == SqlParserCOMMA {
							{
								p.SetState(1348)
								p.Match(SqlParserCOMMA)
							}
							{
								p.SetState(1349)
								p.expr(0)
							}


							p.SetState(1354)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)
						}


					}
					{
						p.SetState(1357)
						p.Match(SqlParserCLOSE_PAR)
					}


				case 2:
					p.SetState(1361)
					p.GetErrorHandler().Sync(p)


					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1358)
							p.Database_name()
						}
						{
							p.SetState(1359)
							p.Match(SqlParserDOT)
						}


					}
					{
						p.SetState(1363)
						p.Table_name()
					}

				}

			}

		}
		p.SetState(1370)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())
	}



	return localctx
}


// IForeign_key_clauseContext is an interface to support dynamic dispatch.
type IForeign_key_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_key_clauseContext differentiates from other interfaces.
	IsForeign_key_clauseContext()
}

type Foreign_key_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_clauseContext() *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_foreign_key_clause
	return p
}

func (*Foreign_key_clauseContext) IsForeign_key_clauseContext() {}

func NewForeign_key_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_foreign_key_clause

	return p
}

func (s *Foreign_key_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_clauseContext) K_REFERENCES() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REFERENCES, 0)
}

func (s *Foreign_key_clauseContext) Foreign_table() IForeign_tableContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_tableContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_tableContext)
}

func (s *Foreign_key_clauseContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Foreign_key_clauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Foreign_key_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Foreign_key_clauseContext) AllFk_target_column_name() []IFk_target_column_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFk_target_column_nameContext); ok {
			len++
		}
	}

	tst := make([]IFk_target_column_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFk_target_column_nameContext); ok {
			tst[i] = t.(IFk_target_column_nameContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Fk_target_column_name(i int) IFk_target_column_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFk_target_column_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFk_target_column_nameContext)
}

func (s *Foreign_key_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Foreign_key_clauseContext) K_DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFERRABLE, 0)
}

func (s *Foreign_key_clauseContext) AllK_ON() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_ON)
}

func (s *Foreign_key_clauseContext) K_ON(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_ON, i)
}

func (s *Foreign_key_clauseContext) AllK_MATCH() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_MATCH)
}

func (s *Foreign_key_clauseContext) K_MATCH(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_MATCH, i)
}

func (s *Foreign_key_clauseContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Name(i int) INameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Foreign_key_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Foreign_key_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Foreign_key_clauseContext) AllK_DELETE() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_DELETE)
}

func (s *Foreign_key_clauseContext) K_DELETE(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_DELETE, i)
}

func (s *Foreign_key_clauseContext) AllK_UPDATE() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_UPDATE)
}

func (s *Foreign_key_clauseContext) K_UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_UPDATE, i)
}

func (s *Foreign_key_clauseContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Foreign_key_clauseContext) K_INITIALLY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INITIALLY, 0)
}

func (s *Foreign_key_clauseContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFERRED, 0)
}

func (s *Foreign_key_clauseContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IMMEDIATE, 0)
}

func (s *Foreign_key_clauseContext) K_ENABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ENABLE, 0)
}

func (s *Foreign_key_clauseContext) AllK_SET() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_SET)
}

func (s *Foreign_key_clauseContext) K_SET(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_SET, i)
}

func (s *Foreign_key_clauseContext) AllK_NULL() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_NULL)
}

func (s *Foreign_key_clauseContext) K_NULL(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_NULL, i)
}

func (s *Foreign_key_clauseContext) AllK_DEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_DEFAULT)
}

func (s *Foreign_key_clauseContext) K_DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFAULT, i)
}

func (s *Foreign_key_clauseContext) AllK_CASCADE() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_CASCADE)
}

func (s *Foreign_key_clauseContext) K_CASCADE(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_CASCADE, i)
}

func (s *Foreign_key_clauseContext) AllK_RESTRICT() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_RESTRICT)
}

func (s *Foreign_key_clauseContext) K_RESTRICT(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_RESTRICT, i)
}

func (s *Foreign_key_clauseContext) AllK_NO() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_NO)
}

func (s *Foreign_key_clauseContext) K_NO(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_NO, i)
}

func (s *Foreign_key_clauseContext) AllK_ACTION() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_ACTION)
}

func (s *Foreign_key_clauseContext) K_ACTION(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_ACTION, i)
}

func (s *Foreign_key_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Foreign_key_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitForeign_key_clause(s)
	}
}




func (p *SqlParser) Foreign_key_clause() (localctx IForeign_key_clauseContext) {
	this := p
	_ = this

	localctx = NewForeign_key_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SqlParserRULE_foreign_key_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1371)
		p.Match(SqlParserK_REFERENCES)
	}
	p.SetState(1375)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1372)
			p.Database_name()
		}
		{
			p.SetState(1373)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(1377)
		p.Foreign_table()
	}
	p.SetState(1389)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1378)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1379)
			p.Fk_target_column_name()
		}
		p.SetState(1384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1380)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1381)
				p.Fk_target_column_name()
			}


			p.SetState(1386)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1387)
			p.Match(SqlParserCLOSE_PAR)
		}


	}
	p.SetState(1409)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1405)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SqlParserK_ON:
				{
					p.SetState(1391)
					p.Match(SqlParserK_ON)
				}
				{
					p.SetState(1392)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SqlParserK_DELETE || _la == SqlParserK_UPDATE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				p.SetState(1401)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1393)
						p.Match(SqlParserK_SET)
					}
					{
						p.SetState(1394)
						p.Match(SqlParserK_NULL)
					}


				case 2:
					{
						p.SetState(1395)
						p.Match(SqlParserK_SET)
					}
					{
						p.SetState(1396)
						p.Match(SqlParserK_DEFAULT)
					}


				case 3:
					{
						p.SetState(1397)
						p.Match(SqlParserK_CASCADE)
					}


				case 4:
					{
						p.SetState(1398)
						p.Match(SqlParserK_RESTRICT)
					}


				case 5:
					{
						p.SetState(1399)
						p.Match(SqlParserK_NO)
					}
					{
						p.SetState(1400)
						p.Match(SqlParserK_ACTION)
					}

				}


			case SqlParserK_MATCH:
				{
					p.SetState(1403)
					p.Match(SqlParserK_MATCH)
				}
				{
					p.SetState(1404)
					p.Name()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}


		}
		p.SetState(1411)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext())
	}
	p.SetState(1425)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
		p.SetState(1413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_NOT {
			{
				p.SetState(1412)
				p.Match(SqlParserK_NOT)
			}

		}
		{
			p.SetState(1415)
			p.Match(SqlParserK_DEFERRABLE)
		}
		p.SetState(1420)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1416)
				p.Match(SqlParserK_INITIALLY)
			}
			{
				p.SetState(1417)
				p.Match(SqlParserK_DEFERRED)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1418)
				p.Match(SqlParserK_INITIALLY)
			}
			{
				p.SetState(1419)
				p.Match(SqlParserK_IMMEDIATE)
			}


		}
		p.SetState(1423)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1422)
				p.Match(SqlParserK_ENABLE)
			}


		}


	}



	return localctx
}


// IFk_target_column_nameContext is an interface to support dynamic dispatch.
type IFk_target_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFk_target_column_nameContext differentiates from other interfaces.
	IsFk_target_column_nameContext()
}

type Fk_target_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFk_target_column_nameContext() *Fk_target_column_nameContext {
	var p = new(Fk_target_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_fk_target_column_name
	return p
}

func (*Fk_target_column_nameContext) IsFk_target_column_nameContext() {}

func NewFk_target_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fk_target_column_nameContext {
	var p = new(Fk_target_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_fk_target_column_name

	return p
}

func (s *Fk_target_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Fk_target_column_nameContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Fk_target_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fk_target_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Fk_target_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterFk_target_column_name(s)
	}
}

func (s *Fk_target_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitFk_target_column_name(s)
	}
}




func (p *SqlParser) Fk_target_column_name() (localctx IFk_target_column_nameContext) {
	this := p
	_ = this

	localctx = NewFk_target_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SqlParserRULE_fk_target_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1427)
		p.Name()
	}



	return localctx
}


// IRaise_functionContext is an interface to support dynamic dispatch.
type IRaise_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRaise_functionContext differentiates from other interfaces.
	IsRaise_functionContext()
}

type Raise_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_functionContext() *Raise_functionContext {
	var p = new(Raise_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_raise_function
	return p
}

func (*Raise_functionContext) IsRaise_functionContext() {}

func NewRaise_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_functionContext {
	var p = new(Raise_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_raise_function

	return p
}

func (s *Raise_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_functionContext) K_RAISE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RAISE, 0)
}

func (s *Raise_functionContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Raise_functionContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Raise_functionContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IGNORE, 0)
}

func (s *Raise_functionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, 0)
}

func (s *Raise_functionContext) Error_message() IError_messageContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IError_messageContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IError_messageContext)
}

func (s *Raise_functionContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *Raise_functionContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ABORT, 0)
}

func (s *Raise_functionContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FAIL, 0)
}

func (s *Raise_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Raise_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterRaise_function(s)
	}
}

func (s *Raise_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitRaise_function(s)
	}
}




func (p *SqlParser) Raise_function() (localctx IRaise_functionContext) {
	this := p
	_ = this

	localctx = NewRaise_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SqlParserRULE_raise_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1429)
		p.Match(SqlParserK_RAISE)
	}
	{
		p.SetState(1430)
		p.Match(SqlParserOPEN_PAR)
	}
	p.SetState(1435)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_IGNORE:
		{
			p.SetState(1431)
			p.Match(SqlParserK_IGNORE)
		}


	case SqlParserK_ABORT, SqlParserK_FAIL, SqlParserK_ROLLBACK:
		{
			p.SetState(1432)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_ABORT || _la == SqlParserK_FAIL || _la == SqlParserK_ROLLBACK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1433)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1434)
			p.Error_message()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1437)
		p.Match(SqlParserCLOSE_PAR)
	}



	return localctx
}


// IIndexed_columnContext is an interface to support dynamic dispatch.
type IIndexed_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexed_columnContext differentiates from other interfaces.
	IsIndexed_columnContext()
}

type Indexed_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexed_columnContext() *Indexed_columnContext {
	var p = new(Indexed_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_indexed_column
	return p
}

func (*Indexed_columnContext) IsIndexed_columnContext() {}

func NewIndexed_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indexed_columnContext {
	var p = new(Indexed_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_indexed_column

	return p
}

func (s *Indexed_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Indexed_columnContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Indexed_columnContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLLATE, 0)
}

func (s *Indexed_columnContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Indexed_columnContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ASC, 0)
}

func (s *Indexed_columnContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DESC, 0)
}

func (s *Indexed_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indexed_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Indexed_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterIndexed_column(s)
	}
}

func (s *Indexed_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitIndexed_column(s)
	}
}




func (p *SqlParser) Indexed_column() (localctx IIndexed_columnContext) {
	this := p
	_ = this

	localctx = NewIndexed_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SqlParserRULE_indexed_column)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1439)
		p.Column_name()
	}
	p.SetState(1442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_COLLATE {
		{
			p.SetState(1440)
			p.Match(SqlParserK_COLLATE)
		}
		{
			p.SetState(1441)
			p.Collation_name()
		}

	}
	p.SetState(1445)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_ASC || _la == SqlParserK_DESC {
		{
			p.SetState(1444)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_ASC || _la == SqlParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}



	return localctx
}


// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) Table_constraint_primary_key() ITable_constraint_primary_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_primary_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_primary_keyContext)
}

func (s *Table_constraintContext) Table_constraint_key() ITable_constraint_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_keyContext)
}

func (s *Table_constraintContext) Table_constraint_unique() ITable_constraint_uniqueContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_uniqueContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_uniqueContext)
}

func (s *Table_constraintContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CHECK, 0)
}

func (s *Table_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Table_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Table_constraintContext) Table_constraint_foreign_key() ITable_constraint_foreign_keyContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_foreign_keyContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_foreign_keyContext)
}

func (s *Table_constraintContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CONSTRAINT, 0)
}

func (s *Table_constraintContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}




func (p *SqlParser) Table_constraint() (localctx ITable_constraintContext) {
	this := p
	_ = this

	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SqlParserRULE_table_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserK_CONSTRAINT {
		{
			p.SetState(1447)
			p.Match(SqlParserK_CONSTRAINT)
		}
		{
			p.SetState(1448)
			p.Name()
		}

	}
	p.SetState(1460)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_PRIMARY:
		{
			p.SetState(1451)
			p.Table_constraint_primary_key()
		}


	case SqlParserK_KEY:
		{
			p.SetState(1452)
			p.Table_constraint_key()
		}


	case SqlParserK_UNIQUE:
		{
			p.SetState(1453)
			p.Table_constraint_unique()
		}


	case SqlParserK_CHECK:
		{
			p.SetState(1454)
			p.Match(SqlParserK_CHECK)
		}
		{
			p.SetState(1455)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1456)
			p.expr(0)
		}
		{
			p.SetState(1457)
			p.Match(SqlParserCLOSE_PAR)
		}


	case SqlParserK_FOREIGN:
		{
			p.SetState(1459)
			p.Table_constraint_foreign_key()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ITable_constraint_primary_keyContext is an interface to support dynamic dispatch.
type ITable_constraint_primary_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraint_primary_keyContext differentiates from other interfaces.
	IsTable_constraint_primary_keyContext()
}

type Table_constraint_primary_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_primary_keyContext() *Table_constraint_primary_keyContext {
	var p = new(Table_constraint_primary_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_constraint_primary_key
	return p
}

func (*Table_constraint_primary_keyContext) IsTable_constraint_primary_keyContext() {}

func NewTable_constraint_primary_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_primary_keyContext {
	var p = new(Table_constraint_primary_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_constraint_primary_key

	return p
}

func (s *Table_constraint_primary_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_primary_keyContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PRIMARY, 0)
}

func (s *Table_constraint_primary_keyContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_KEY, 0)
}

func (s *Table_constraint_primary_keyContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Table_constraint_primary_keyContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraint_primary_keyContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Table_constraint_primary_keyContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Table_constraint_primary_keyContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Table_constraint_primary_keyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Table_constraint_primary_keyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Table_constraint_primary_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_primary_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_constraint_primary_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_constraint_primary_key(s)
	}
}

func (s *Table_constraint_primary_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_constraint_primary_key(s)
	}
}




func (p *SqlParser) Table_constraint_primary_key() (localctx ITable_constraint_primary_keyContext) {
	this := p
	_ = this

	localctx = NewTable_constraint_primary_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SqlParserRULE_table_constraint_primary_key)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1462)
		p.Match(SqlParserK_PRIMARY)
	}
	{
		p.SetState(1463)
		p.Match(SqlParserK_KEY)
	}
	{
		p.SetState(1464)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(1465)
		p.Indexed_column()
	}
	p.SetState(1470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1466)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1467)
			p.Indexed_column()
		}


		p.SetState(1472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1473)
		p.Match(SqlParserCLOSE_PAR)
	}
	{
		p.SetState(1474)
		p.Conflict_clause()
	}



	return localctx
}


// ITable_constraint_foreign_keyContext is an interface to support dynamic dispatch.
type ITable_constraint_foreign_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraint_foreign_keyContext differentiates from other interfaces.
	IsTable_constraint_foreign_keyContext()
}

type Table_constraint_foreign_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_foreign_keyContext() *Table_constraint_foreign_keyContext {
	var p = new(Table_constraint_foreign_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_constraint_foreign_key
	return p
}

func (*Table_constraint_foreign_keyContext) IsTable_constraint_foreign_keyContext() {}

func NewTable_constraint_foreign_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_foreign_keyContext {
	var p = new(Table_constraint_foreign_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_constraint_foreign_key

	return p
}

func (s *Table_constraint_foreign_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_foreign_keyContext) K_FOREIGN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FOREIGN, 0)
}

func (s *Table_constraint_foreign_keyContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_KEY, 0)
}

func (s *Table_constraint_foreign_keyContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Table_constraint_foreign_keyContext) AllFk_origin_column_name() []IFk_origin_column_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFk_origin_column_nameContext); ok {
			len++
		}
	}

	tst := make([]IFk_origin_column_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFk_origin_column_nameContext); ok {
			tst[i] = t.(IFk_origin_column_nameContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraint_foreign_keyContext) Fk_origin_column_name(i int) IFk_origin_column_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFk_origin_column_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFk_origin_column_nameContext)
}

func (s *Table_constraint_foreign_keyContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Table_constraint_foreign_keyContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Table_constraint_foreign_keyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Table_constraint_foreign_keyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Table_constraint_foreign_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_foreign_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_constraint_foreign_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_constraint_foreign_key(s)
	}
}

func (s *Table_constraint_foreign_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_constraint_foreign_key(s)
	}
}




func (p *SqlParser) Table_constraint_foreign_key() (localctx ITable_constraint_foreign_keyContext) {
	this := p
	_ = this

	localctx = NewTable_constraint_foreign_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SqlParserRULE_table_constraint_foreign_key)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1476)
		p.Match(SqlParserK_FOREIGN)
	}
	{
		p.SetState(1477)
		p.Match(SqlParserK_KEY)
	}
	{
		p.SetState(1478)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(1479)
		p.Fk_origin_column_name()
	}
	p.SetState(1484)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1480)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1481)
			p.Fk_origin_column_name()
		}


		p.SetState(1486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1487)
		p.Match(SqlParserCLOSE_PAR)
	}
	{
		p.SetState(1488)
		p.Foreign_key_clause()
	}



	return localctx
}


// ITable_constraint_uniqueContext is an interface to support dynamic dispatch.
type ITable_constraint_uniqueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraint_uniqueContext differentiates from other interfaces.
	IsTable_constraint_uniqueContext()
}

type Table_constraint_uniqueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_uniqueContext() *Table_constraint_uniqueContext {
	var p = new(Table_constraint_uniqueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_constraint_unique
	return p
}

func (*Table_constraint_uniqueContext) IsTable_constraint_uniqueContext() {}

func NewTable_constraint_uniqueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_uniqueContext {
	var p = new(Table_constraint_uniqueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_constraint_unique

	return p
}

func (s *Table_constraint_uniqueContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_uniqueContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNIQUE, 0)
}

func (s *Table_constraint_uniqueContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Table_constraint_uniqueContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraint_uniqueContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Table_constraint_uniqueContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Table_constraint_uniqueContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Table_constraint_uniqueContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_KEY, 0)
}

func (s *Table_constraint_uniqueContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraint_uniqueContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Table_constraint_uniqueContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Table_constraint_uniqueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_uniqueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_constraint_uniqueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_constraint_unique(s)
	}
}

func (s *Table_constraint_uniqueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_constraint_unique(s)
	}
}




func (p *SqlParser) Table_constraint_unique() (localctx ITable_constraint_uniqueContext) {
	this := p
	_ = this

	localctx = NewTable_constraint_uniqueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SqlParserRULE_table_constraint_unique)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1490)
		p.Match(SqlParserK_UNIQUE)
	}
	p.SetState(1492)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1491)
			p.Match(SqlParserK_KEY)
		}


	}
	p.SetState(1495)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1494)
			p.Name()
		}


	}
	{
		p.SetState(1497)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(1498)
		p.Indexed_column()
	}
	p.SetState(1503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1499)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1500)
			p.Indexed_column()
		}


		p.SetState(1505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1506)
		p.Match(SqlParserCLOSE_PAR)
	}
	{
		p.SetState(1507)
		p.Conflict_clause()
	}



	return localctx
}


// ITable_constraint_keyContext is an interface to support dynamic dispatch.
type ITable_constraint_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraint_keyContext differentiates from other interfaces.
	IsTable_constraint_keyContext()
}

type Table_constraint_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_keyContext() *Table_constraint_keyContext {
	var p = new(Table_constraint_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_constraint_key
	return p
}

func (*Table_constraint_keyContext) IsTable_constraint_keyContext() {}

func NewTable_constraint_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_keyContext {
	var p = new(Table_constraint_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_constraint_key

	return p
}

func (s *Table_constraint_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_keyContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_KEY, 0)
}

func (s *Table_constraint_keyContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Table_constraint_keyContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraint_keyContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Table_constraint_keyContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Table_constraint_keyContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Table_constraint_keyContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraint_keyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Table_constraint_keyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Table_constraint_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_constraint_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_constraint_key(s)
	}
}

func (s *Table_constraint_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_constraint_key(s)
	}
}




func (p *SqlParser) Table_constraint_key() (localctx ITable_constraint_keyContext) {
	this := p
	_ = this

	localctx = NewTable_constraint_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SqlParserRULE_table_constraint_key)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1509)
		p.Match(SqlParserK_KEY)
	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1510)
			p.Name()
		}


	}
	{
		p.SetState(1513)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(1514)
		p.Indexed_column()
	}
	p.SetState(1519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1515)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1516)
			p.Indexed_column()
		}


		p.SetState(1521)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1522)
		p.Match(SqlParserCLOSE_PAR)
	}
	{
		p.SetState(1523)
		p.Conflict_clause()
	}



	return localctx
}


// IFk_origin_column_nameContext is an interface to support dynamic dispatch.
type IFk_origin_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFk_origin_column_nameContext differentiates from other interfaces.
	IsFk_origin_column_nameContext()
}

type Fk_origin_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFk_origin_column_nameContext() *Fk_origin_column_nameContext {
	var p = new(Fk_origin_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_fk_origin_column_name
	return p
}

func (*Fk_origin_column_nameContext) IsFk_origin_column_nameContext() {}

func NewFk_origin_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fk_origin_column_nameContext {
	var p = new(Fk_origin_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_fk_origin_column_name

	return p
}

func (s *Fk_origin_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Fk_origin_column_nameContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Fk_origin_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fk_origin_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Fk_origin_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterFk_origin_column_name(s)
	}
}

func (s *Fk_origin_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitFk_origin_column_name(s)
	}
}




func (p *SqlParser) Fk_origin_column_name() (localctx IFk_origin_column_nameContext) {
	this := p
	_ = this

	localctx = NewFk_origin_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SqlParserRULE_fk_origin_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1525)
		p.Column_name()
	}



	return localctx
}


// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_with_clause
	return p
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITH, 0)
}

func (s *With_clauseContext) AllCte_table_name() []ICte_table_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICte_table_nameContext); ok {
			len++
		}
	}

	tst := make([]ICte_table_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICte_table_nameContext); ok {
			tst[i] = t.(ICte_table_nameContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Cte_table_name(i int) ICte_table_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICte_table_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICte_table_nameContext)
}

func (s *With_clauseContext) AllK_AS() []antlr.TerminalNode {
	return s.GetTokens(SqlParserK_AS)
}

func (s *With_clauseContext) K_AS(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, i)
}

func (s *With_clauseContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserOPEN_PAR)
}

func (s *With_clauseContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, i)
}

func (s *With_clauseContext) AllSelect_stmt() []ISelect_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISelect_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_stmtContext); ok {
			tst[i] = t.(ISelect_stmtContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Select_stmt(i int) ISelect_stmtContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *With_clauseContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCLOSE_PAR)
}

func (s *With_clauseContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, i)
}

func (s *With_clauseContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RECURSIVE, 0)
}

func (s *With_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *With_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitWith_clause(s)
	}
}




func (p *SqlParser) With_clause() (localctx IWith_clauseContext) {
	this := p
	_ = this

	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SqlParserRULE_with_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1527)
		p.Match(SqlParserK_WITH)
	}
	p.SetState(1529)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1528)
			p.Match(SqlParserK_RECURSIVE)
		}


	}
	{
		p.SetState(1531)
		p.Cte_table_name()
	}
	{
		p.SetState(1532)
		p.Match(SqlParserK_AS)
	}
	{
		p.SetState(1533)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(1534)
		p.Select_stmt()
	}
	{
		p.SetState(1535)
		p.Match(SqlParserCLOSE_PAR)
	}
	p.SetState(1545)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SqlParserCOMMA {
		{
			p.SetState(1536)
			p.Match(SqlParserCOMMA)
		}
		{
			p.SetState(1537)
			p.Cte_table_name()
		}
		{
			p.SetState(1538)
			p.Match(SqlParserK_AS)
		}
		{
			p.SetState(1539)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1540)
			p.Select_stmt()
		}
		{
			p.SetState(1541)
			p.Match(SqlParserCLOSE_PAR)
		}


		p.SetState(1547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IQualified_table_nameContext is an interface to support dynamic dispatch.
type IQualified_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualified_table_nameContext differentiates from other interfaces.
	IsQualified_table_nameContext()
}

type Qualified_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualified_table_nameContext() *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_qualified_table_name
	return p
}

func (*Qualified_table_nameContext) IsQualified_table_nameContext() {}

func NewQualified_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_qualified_table_name

	return p
}

func (s *Qualified_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualified_table_nameContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Qualified_table_nameContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Qualified_table_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Qualified_table_nameContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INDEXED, 0)
}

func (s *Qualified_table_nameContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Qualified_table_nameContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Qualified_table_nameContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Qualified_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualified_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Qualified_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitQualified_table_name(s)
	}
}




func (p *SqlParser) Qualified_table_name() (localctx IQualified_table_nameContext) {
	this := p
	_ = this

	localctx = NewQualified_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SqlParserRULE_qualified_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1548)
			p.Database_name()
		}
		{
			p.SetState(1549)
			p.Match(SqlParserDOT)
		}


	}
	{
		p.SetState(1553)
		p.Table_name()
	}
	p.SetState(1559)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_INDEXED:
		{
			p.SetState(1554)
			p.Match(SqlParserK_INDEXED)
		}
		{
			p.SetState(1555)
			p.Match(SqlParserK_BY)
		}
		{
			p.SetState(1556)
			p.Index_name()
		}


	case SqlParserK_NOT:
		{
			p.SetState(1557)
			p.Match(SqlParserK_NOT)
		}
		{
			p.SetState(1558)
			p.Match(SqlParserK_INDEXED)
		}


	case SqlParserEOF, SqlParserSCOL, SqlParserK_ALTER, SqlParserK_ANALYZE, SqlParserK_ATTACH, SqlParserK_BEGIN, SqlParserK_COMMIT, SqlParserK_CREATE, SqlParserK_DELETE, SqlParserK_DETACH, SqlParserK_DROP, SqlParserK_END, SqlParserK_EXPLAIN, SqlParserK_INSERT, SqlParserK_LIMIT, SqlParserK_ORDER, SqlParserK_PRAGMA, SqlParserK_REINDEX, SqlParserK_RELEASE, SqlParserK_REPLACE, SqlParserK_ROLLBACK, SqlParserK_SAVEPOINT, SqlParserK_SELECT, SqlParserK_SET, SqlParserK_UPDATE, SqlParserK_VACUUM, SqlParserK_VALUES, SqlParserK_WHERE, SqlParserK_WITH, SqlParserUNEXPECTED_CHAR:



	default:
	}



	return localctx
}


// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_ordering_term
	return p
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ordering_termContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLLATE, 0)
}

func (s *Ordering_termContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Ordering_termContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ASC, 0)
}

func (s *Ordering_termContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DESC, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Ordering_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterOrdering_term(s)
	}
}

func (s *Ordering_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitOrdering_term(s)
	}
}




func (p *SqlParser) Ordering_term() (localctx IOrdering_termContext) {
	this := p
	_ = this

	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SqlParserRULE_ordering_term)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1561)
		p.expr(0)
	}
	p.SetState(1564)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1562)
			p.Match(SqlParserK_COLLATE)
		}
		{
			p.SetState(1563)
			p.Collation_name()
		}


	}
	p.SetState(1567)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1566)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SqlParserK_ASC || _la == SqlParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	}



	return localctx
}


// IPragma_valueContext is an interface to support dynamic dispatch.
type IPragma_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_valueContext differentiates from other interfaces.
	IsPragma_valueContext()
}

type Pragma_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_valueContext() *Pragma_valueContext {
	var p = new(Pragma_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_pragma_value
	return p
}

func (*Pragma_valueContext) IsPragma_valueContext() {}

func NewPragma_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_valueContext {
	var p = new(Pragma_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_pragma_value

	return p
}

func (s *Pragma_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Pragma_valueContext) Name() INameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Pragma_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserSTRING_LITERAL, 0)
}

func (s *Pragma_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Pragma_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterPragma_value(s)
	}
}

func (s *Pragma_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitPragma_value(s)
	}
}




func (p *SqlParser) Pragma_value() (localctx IPragma_valueContext) {
	this := p
	_ = this

	localctx = NewPragma_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SqlParserRULE_pragma_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1569)
			p.Signed_number()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1570)
			p.Name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1571)
			p.Match(SqlParserSTRING_LITERAL)
		}

	}


	return localctx
}


// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Common_table_expressionContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *Common_table_expressionContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserOPEN_PAR)
}

func (s *Common_table_expressionContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, i)
}

func (s *Common_table_expressionContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Common_table_expressionContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCLOSE_PAR)
}

func (s *Common_table_expressionContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, i)
}

func (s *Common_table_expressionContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Common_table_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Common_table_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}




func (p *SqlParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	this := p
	_ = this

	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SqlParserRULE_common_table_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1574)
		p.Table_name()
	}
	p.SetState(1586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserOPEN_PAR {
		{
			p.SetState(1575)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1576)
			p.Column_name()
		}
		p.SetState(1581)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1577)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1578)
				p.Column_name()
			}


			p.SetState(1583)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1584)
			p.Match(SqlParserCLOSE_PAR)
		}

	}
	{
		p.SetState(1588)
		p.Match(SqlParserK_AS)
	}
	{
		p.SetState(1589)
		p.Match(SqlParserOPEN_PAR)
	}
	{
		p.SetState(1590)
		p.Select_stmt()
	}
	{
		p.SetState(1591)
		p.Match(SqlParserCLOSE_PAR)
	}



	return localctx
}


// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_result_column
	return p
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) STAR() antlr.TerminalNode {
	return s.GetToken(SqlParserSTAR, 0)
}

func (s *Result_columnContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Result_columnContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Result_columnContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Result_columnContext) Column_alias() IColumn_aliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_aliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Result_columnContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Result_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterResult_column(s)
	}
}

func (s *Result_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitResult_column(s)
	}
}




func (p *SqlParser) Result_column() (localctx IResult_columnContext) {
	this := p
	_ = this

	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SqlParserRULE_result_column)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1593)
			p.Match(SqlParserSTAR)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1594)
			p.Table_name()
		}
		{
			p.SetState(1595)
			p.Match(SqlParserDOT)
		}
		{
			p.SetState(1596)
			p.Match(SqlParserSTAR)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1598)
			p.expr(0)
		}
		p.SetState(1603)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
			p.SetState(1600)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SqlParserK_AS {
				{
					p.SetState(1599)
					p.Match(SqlParserK_AS)
				}

			}
			{
				p.SetState(1602)
				p.Column_alias()
			}


		}

	}


	return localctx
}


// ITable_or_subqueryContext is an interface to support dynamic dispatch.
type ITable_or_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_subqueryContext differentiates from other interfaces.
	IsTable_or_subqueryContext()
}

type Table_or_subqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_subqueryContext() *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_or_subquery
	return p
}

func (*Table_or_subqueryContext) IsTable_or_subqueryContext() {}

func NewTable_or_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_or_subquery

	return p
}

func (s *Table_or_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_subqueryContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_or_subqueryContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Table_or_subqueryContext) DOT() antlr.TerminalNode {
	return s.GetToken(SqlParserDOT, 0)
}

func (s *Table_or_subqueryContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_or_subqueryContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INDEXED, 0)
}

func (s *Table_or_subqueryContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Table_or_subqueryContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Table_or_subqueryContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Table_or_subqueryContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *Table_or_subqueryContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Table_or_subqueryContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Table_or_subqueryContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Table_or_subqueryContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Table_or_subqueryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Table_or_subqueryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Table_or_subqueryContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Table_or_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_or_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_or_subquery(s)
	}
}




func (p *SqlParser) Table_or_subquery() (localctx ITable_or_subqueryContext) {
	this := p
	_ = this

	localctx = NewTable_or_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SqlParserRULE_table_or_subquery)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1654)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1610)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1607)
				p.Database_name()
			}
			{
				p.SetState(1608)
				p.Match(SqlParserDOT)
			}


		}
		{
			p.SetState(1612)
			p.Table_name()
		}
		p.SetState(1617)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext()) == 1 {
			p.SetState(1614)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1613)
					p.Match(SqlParserK_AS)
				}


			}
			{
				p.SetState(1616)
				p.Table_alias()
			}


		}
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1619)
				p.Match(SqlParserK_INDEXED)
			}
			{
				p.SetState(1620)
				p.Match(SqlParserK_BY)
			}
			{
				p.SetState(1621)
				p.Index_name()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1622)
				p.Match(SqlParserK_NOT)
			}
			{
				p.SetState(1623)
				p.Match(SqlParserK_INDEXED)
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1626)
			p.Match(SqlParserOPEN_PAR)
		}
		p.SetState(1636)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1627)
				p.Table_or_subquery()
			}
			p.SetState(1632)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(1628)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(1629)
					p.Table_or_subquery()
				}


				p.SetState(1634)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}


		case 2:
			{
				p.SetState(1635)
				p.Join_clause()
			}

		}
		{
			p.SetState(1638)
			p.Match(SqlParserCLOSE_PAR)
		}
		p.SetState(1643)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) == 1 {
			p.SetState(1640)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1639)
					p.Match(SqlParserK_AS)
				}


			}
			{
				p.SetState(1642)
				p.Table_alias()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1645)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1646)
			p.Select_stmt()
		}
		{
			p.SetState(1647)
			p.Match(SqlParserCLOSE_PAR)
		}
		p.SetState(1652)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
			p.SetState(1649)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1648)
					p.Match(SqlParserK_AS)
				}


			}
			{
				p.SetState(1651)
				p.Table_alias()
			}


		}

	}


	return localctx
}


// IJoin_clauseContext is an interface to support dynamic dispatch.
type IJoin_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_clauseContext differentiates from other interfaces.
	IsJoin_clauseContext()
}

type Join_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_clauseContext() *Join_clauseContext {
	var p = new(Join_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_join_clause
	return p
}

func (*Join_clauseContext) IsJoin_clauseContext() {}

func NewJoin_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_clauseContext {
	var p = new(Join_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_join_clause

	return p
}

func (s *Join_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_clauseContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Join_clauseContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Join_clauseContext) AllJoin_operator() []IJoin_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_operatorContext); ok {
			len++
		}
	}

	tst := make([]IJoin_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_operatorContext); ok {
			tst[i] = t.(IJoin_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_operator(i int) IJoin_operatorContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_operatorContext)
}

func (s *Join_clauseContext) AllJoin_constraint() []IJoin_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_constraintContext); ok {
			len++
		}
	}

	tst := make([]IJoin_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_constraintContext); ok {
			tst[i] = t.(IJoin_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_constraint(i int) IJoin_constraintContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_constraintContext)
}

func (s *Join_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Join_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterJoin_clause(s)
	}
}

func (s *Join_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitJoin_clause(s)
	}
}




func (p *SqlParser) Join_clause() (localctx IJoin_clauseContext) {
	this := p
	_ = this

	localctx = NewJoin_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SqlParserRULE_join_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1656)
		p.Table_or_subquery()
	}
	p.SetState(1663)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1657)
				p.Join_operator()
			}
			{
				p.SetState(1658)
				p.Table_or_subquery()
			}
			{
				p.SetState(1659)
				p.Join_constraint()
			}


		}
		p.SetState(1665)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext())
	}



	return localctx
}


// IJoin_operatorContext is an interface to support dynamic dispatch.
type IJoin_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_operatorContext differentiates from other interfaces.
	IsJoin_operatorContext()
}

type Join_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_operatorContext() *Join_operatorContext {
	var p = new(Join_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_join_operator
	return p
}

func (*Join_operatorContext) IsJoin_operatorContext() {}

func NewJoin_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_operatorContext {
	var p = new(Join_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_join_operator

	return p
}

func (s *Join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_operatorContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, 0)
}

func (s *Join_operatorContext) K_JOIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_JOIN, 0)
}

func (s *Join_operatorContext) K_NATURAL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NATURAL, 0)
}

func (s *Join_operatorContext) K_LEFT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LEFT, 0)
}

func (s *Join_operatorContext) K_INNER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INNER, 0)
}

func (s *Join_operatorContext) K_CROSS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CROSS, 0)
}

func (s *Join_operatorContext) K_OUTER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OUTER, 0)
}

func (s *Join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterJoin_operator(s)
	}
}

func (s *Join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitJoin_operator(s)
	}
}




func (p *SqlParser) Join_operator() (localctx IJoin_operatorContext) {
	this := p
	_ = this

	localctx = NewJoin_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SqlParserRULE_join_operator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1679)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1666)
			p.Match(SqlParserCOMMA)
		}


	case SqlParserK_CROSS, SqlParserK_INNER, SqlParserK_JOIN, SqlParserK_LEFT, SqlParserK_NATURAL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_NATURAL {
			{
				p.SetState(1667)
				p.Match(SqlParserK_NATURAL)
			}

		}
		p.SetState(1676)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SqlParserK_LEFT:
			{
				p.SetState(1670)
				p.Match(SqlParserK_LEFT)
			}
			p.SetState(1672)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SqlParserK_OUTER {
				{
					p.SetState(1671)
					p.Match(SqlParserK_OUTER)
				}

			}


		case SqlParserK_INNER:
			{
				p.SetState(1674)
				p.Match(SqlParserK_INNER)
			}


		case SqlParserK_CROSS:
			{
				p.SetState(1675)
				p.Match(SqlParserK_CROSS)
			}


		case SqlParserK_JOIN:



		default:
		}
		{
			p.SetState(1678)
			p.Match(SqlParserK_JOIN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IJoin_constraintContext is an interface to support dynamic dispatch.
type IJoin_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_constraintContext differentiates from other interfaces.
	IsJoin_constraintContext()
}

type Join_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_constraintContext() *Join_constraintContext {
	var p = new(Join_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_join_constraint
	return p
}

func (*Join_constraintContext) IsJoin_constraintContext() {}

func NewJoin_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_constraintContext {
	var p = new(Join_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_join_constraint

	return p
}

func (s *Join_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_constraintContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ON, 0)
}

func (s *Join_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Join_constraintContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SqlParserK_USING, 0)
}

func (s *Join_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Join_constraintContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Join_constraintContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Join_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Join_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Join_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Join_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Join_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterJoin_constraint(s)
	}
}

func (s *Join_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitJoin_constraint(s)
	}
}




func (p *SqlParser) Join_constraint() (localctx IJoin_constraintContext) {
	this := p
	_ = this

	localctx = NewJoin_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SqlParserRULE_join_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1695)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1681)
			p.Match(SqlParserK_ON)
		}
		{
			p.SetState(1682)
			p.expr(0)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1683)
			p.Match(SqlParserK_USING)
		}
		{
			p.SetState(1684)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1685)
			p.Column_name()
		}
		p.SetState(1690)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1686)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1687)
				p.Column_name()
			}


			p.SetState(1692)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1693)
			p.Match(SqlParserCLOSE_PAR)
		}


	}



	return localctx
}


// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_select_core
	return p
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SELECT, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Select_coreContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Select_coreContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FROM, 0)
}

func (s *Select_coreContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *Select_coreContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Expr(i int) IExprContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_coreContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_GROUP, 0)
}

func (s *Select_coreContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *Select_coreContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DISTINCT, 0)
}

func (s *Select_coreContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALL, 0)
}

func (s *Select_coreContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Select_coreContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_coreContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SqlParserK_HAVING, 0)
}

func (s *Select_coreContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VALUES, 0)
}

func (s *Select_coreContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserOPEN_PAR)
}

func (s *Select_coreContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, i)
}

func (s *Select_coreContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCLOSE_PAR)
}

func (s *Select_coreContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, i)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_coreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSelect_core(s)
	}
}

func (s *Select_coreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSelect_core(s)
	}
}




func (p *SqlParser) Select_core() (localctx ISelect_coreContext) {
	this := p
	_ = this

	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SqlParserRULE_select_core)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1771)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserK_SELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1697)
			p.Match(SqlParserK_SELECT)
		}
		p.SetState(1699)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1698)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserK_ALL || _la == SqlParserK_DISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}


		}
		{
			p.SetState(1701)
			p.Result_column()
		}
		p.SetState(1706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1702)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1703)
				p.Result_column()
			}


			p.SetState(1708)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1721)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_FROM {
			{
				p.SetState(1709)
				p.Match(SqlParserK_FROM)
			}
			p.SetState(1719)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1710)
					p.Table_or_subquery()
				}
				p.SetState(1715)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SqlParserCOMMA {
					{
						p.SetState(1711)
						p.Match(SqlParserCOMMA)
					}
					{
						p.SetState(1712)
						p.Table_or_subquery()
					}


					p.SetState(1717)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}


			case 2:
				{
					p.SetState(1718)
					p.Join_clause()
				}

			}

		}
		p.SetState(1725)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_WHERE {
			{
				p.SetState(1723)
				p.Match(SqlParserK_WHERE)
			}
			{
				p.SetState(1724)
				p.expr(0)
			}

		}
		p.SetState(1741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserK_GROUP {
			{
				p.SetState(1727)
				p.Match(SqlParserK_GROUP)
			}
			{
				p.SetState(1728)
				p.Match(SqlParserK_BY)
			}
			{
				p.SetState(1729)
				p.expr(0)
			}
			p.SetState(1734)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(1730)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(1731)
					p.expr(0)
				}


				p.SetState(1736)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(1739)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SqlParserK_HAVING {
				{
					p.SetState(1737)
					p.Match(SqlParserK_HAVING)
				}
				{
					p.SetState(1738)
					p.expr(0)
				}

			}

		}


	case SqlParserK_VALUES:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1743)
			p.Match(SqlParserK_VALUES)
		}
		{
			p.SetState(1744)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1745)
			p.expr(0)
		}
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1746)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1747)
				p.expr(0)
			}


			p.SetState(1752)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1753)
			p.Match(SqlParserCLOSE_PAR)
		}
		p.SetState(1768)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1754)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1755)
				p.Match(SqlParserOPEN_PAR)
			}
			{
				p.SetState(1756)
				p.expr(0)
			}
			p.SetState(1761)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SqlParserCOMMA {
				{
					p.SetState(1757)
					p.Match(SqlParserCOMMA)
				}
				{
					p.SetState(1758)
					p.expr(0)
				}


				p.SetState(1763)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1764)
				p.Match(SqlParserCLOSE_PAR)
			}


			p.SetState(1770)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_compound_operator
	return p
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) K_UNION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNION, 0)
}

func (s *Compound_operatorContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALL, 0)
}

func (s *Compound_operatorContext) K_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INTERSECT, 0)
}

func (s *Compound_operatorContext) K_EXCEPT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXCEPT, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Compound_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCompound_operator(s)
	}
}

func (s *Compound_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCompound_operator(s)
	}
}




func (p *SqlParser) Compound_operator() (localctx ICompound_operatorContext) {
	this := p
	_ = this

	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SqlParserRULE_compound_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1778)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1773)
			p.Match(SqlParserK_UNION)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1774)
			p.Match(SqlParserK_UNION)
		}
		{
			p.SetState(1775)
			p.Match(SqlParserK_ALL)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1776)
			p.Match(SqlParserK_INTERSECT)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1777)
			p.Match(SqlParserK_EXCEPT)
		}

	}


	return localctx
}


// ICte_table_nameContext is an interface to support dynamic dispatch.
type ICte_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCte_table_nameContext differentiates from other interfaces.
	IsCte_table_nameContext()
}

type Cte_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCte_table_nameContext() *Cte_table_nameContext {
	var p = new(Cte_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_cte_table_name
	return p
}

func (*Cte_table_nameContext) IsCte_table_nameContext() {}

func NewCte_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cte_table_nameContext {
	var p = new(Cte_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_cte_table_name

	return p
}

func (s *Cte_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cte_table_nameContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Cte_table_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Cte_table_nameContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Cte_table_nameContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext;
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext);
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Cte_table_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Cte_table_nameContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SqlParserCOMMA)
}

func (s *Cte_table_nameContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SqlParserCOMMA, i)
}

func (s *Cte_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cte_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cte_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCte_table_name(s)
	}
}

func (s *Cte_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCte_table_name(s)
	}
}




func (p *SqlParser) Cte_table_name() (localctx ICte_table_nameContext) {
	this := p
	_ = this

	localctx = NewCte_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SqlParserRULE_cte_table_name)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1780)
		p.Table_name()
	}
	p.SetState(1792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SqlParserOPEN_PAR {
		{
			p.SetState(1781)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1782)
			p.Column_name()
		}
		p.SetState(1787)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SqlParserCOMMA {
			{
				p.SetState(1783)
				p.Match(SqlParserCOMMA)
			}
			{
				p.SetState(1784)
				p.Column_name()
			}


			p.SetState(1789)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1790)
			p.Match(SqlParserCLOSE_PAR)
		}

	}



	return localctx
}


// ISigned_numberContext is an interface to support dynamic dispatch.
type ISigned_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSigned_numberContext differentiates from other interfaces.
	IsSigned_numberContext()
}

type Signed_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numberContext() *Signed_numberContext {
	var p = new(Signed_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_signed_number
	return p
}

func (*Signed_numberContext) IsSigned_numberContext() {}

func NewSigned_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numberContext {
	var p = new(Signed_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_signed_number

	return p
}

func (s *Signed_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numberContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserNUMERIC_LITERAL, 0)
}

func (s *Signed_numberContext) STAR() antlr.TerminalNode {
	return s.GetToken(SqlParserSTAR, 0)
}

func (s *Signed_numberContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SqlParserPLUS, 0)
}

func (s *Signed_numberContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SqlParserMINUS, 0)
}

func (s *Signed_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Signed_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSigned_number(s)
	}
}

func (s *Signed_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSigned_number(s)
	}
}




func (p *SqlParser) Signed_number() (localctx ISigned_numberContext) {
	this := p
	_ = this

	localctx = NewSigned_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SqlParserRULE_signed_number)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserPLUS, SqlParserMINUS, SqlParserNUMERIC_LITERAL:
		p.SetState(1795)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SqlParserPLUS || _la == SqlParserMINUS {
			{
				p.SetState(1794)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SqlParserPLUS || _la == SqlParserMINUS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1797)
			p.Match(SqlParserNUMERIC_LITERAL)
		}


	case SqlParserSTAR:
		{
			p.SetState(1798)
			p.Match(SqlParserSTAR)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ILiteral_valueContext is an interface to support dynamic dispatch.
type ILiteral_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteral_valueContext differentiates from other interfaces.
	IsLiteral_valueContext()
}

type Literal_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteral_valueContext() *Literal_valueContext {
	var p = new(Literal_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_literal_value
	return p
}

func (*Literal_valueContext) IsLiteral_valueContext() {}

func NewLiteral_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Literal_valueContext {
	var p = new(Literal_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_literal_value

	return p
}

func (s *Literal_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Literal_valueContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserNUMERIC_LITERAL, 0)
}

func (s *Literal_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserSTRING_LITERAL, 0)
}

func (s *Literal_valueContext) BLOB_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserBLOB_LITERAL, 0)
}

func (s *Literal_valueContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NULL, 0)
}

func (s *Literal_valueContext) K_CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CURRENT_TIME, 0)
}

func (s *Literal_valueContext) K_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CURRENT_DATE, 0)
}

func (s *Literal_valueContext) K_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CURRENT_TIMESTAMP, 0)
}

func (s *Literal_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Literal_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterLiteral_value(s)
	}
}

func (s *Literal_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitLiteral_value(s)
	}
}




func (p *SqlParser) Literal_value() (localctx ILiteral_valueContext) {
	this := p
	_ = this

	localctx = NewLiteral_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SqlParserRULE_literal_value)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1801)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 53)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 53))) & ((1 << (SqlParserK_CURRENT_DATE - 53)) | (1 << (SqlParserK_CURRENT_TIME - 53)) | (1 << (SqlParserK_CURRENT_TIMESTAMP - 53)))) != 0) || _la == SqlParserK_NULL || ((((_la - 154)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 154))) & ((1 << (SqlParserNUMERIC_LITERAL - 154)) | (1 << (SqlParserSTRING_LITERAL - 154)) | (1 << (SqlParserBLOB_LITERAL - 154)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_unary_operator
	return p
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SqlParserMINUS, 0)
}

func (s *Unary_operatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SqlParserPLUS, 0)
}

func (s *Unary_operatorContext) TILDE() antlr.TerminalNode {
	return s.GetToken(SqlParserTILDE, 0)
}

func (s *Unary_operatorContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}




func (p *SqlParser) Unary_operator() (localctx IUnary_operatorContext) {
	this := p
	_ = this

	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SqlParserRULE_unary_operator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1803)
		_la = p.GetTokenStream().LA(1)

		if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SqlParserPLUS) | (1 << SqlParserMINUS) | (1 << SqlParserTILDE))) != 0) || _la == SqlParserK_NOT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IError_messageContext is an interface to support dynamic dispatch.
type IError_messageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsError_messageContext differentiates from other interfaces.
	IsError_messageContext()
}

type Error_messageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyError_messageContext() *Error_messageContext {
	var p = new(Error_messageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_error_message
	return p
}

func (*Error_messageContext) IsError_messageContext() {}

func NewError_messageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Error_messageContext {
	var p = new(Error_messageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_error_message

	return p
}

func (s *Error_messageContext) GetParser() antlr.Parser { return s.parser }

func (s *Error_messageContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserSTRING_LITERAL, 0)
}

func (s *Error_messageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Error_messageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Error_messageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterError_message(s)
	}
}

func (s *Error_messageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitError_message(s)
	}
}




func (p *SqlParser) Error_message() (localctx IError_messageContext) {
	this := p
	_ = this

	localctx = NewError_messageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SqlParserRULE_error_message)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1805)
		p.Match(SqlParserSTRING_LITERAL)
	}



	return localctx
}


// IModule_argumentContext is an interface to support dynamic dispatch.
type IModule_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_argumentContext differentiates from other interfaces.
	IsModule_argumentContext()
}

type Module_argumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_argumentContext() *Module_argumentContext {
	var p = new(Module_argumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_module_argument
	return p
}

func (*Module_argumentContext) IsModule_argumentContext() {}

func NewModule_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_argumentContext {
	var p = new(Module_argumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_module_argument

	return p
}

func (s *Module_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_argumentContext) Expr() IExprContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Module_argumentContext) Column_def() IColumn_defContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Module_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Module_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterModule_argument(s)
	}
}

func (s *Module_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitModule_argument(s)
	}
}




func (p *SqlParser) Module_argument() (localctx IModule_argumentContext) {
	this := p
	_ = this

	localctx = NewModule_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SqlParserRULE_module_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1809)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1807)
			p.expr(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1808)
			p.Column_def()
		}

	}


	return localctx
}


// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlParserIDENTIFIER, 0)
}

func (s *Column_aliasContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserSTRING_LITERAL, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}




func (p *SqlParser) Column_alias() (localctx IColumn_aliasContext) {
	this := p
	_ = this

	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SqlParserRULE_column_alias)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1811)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SqlParserIDENTIFIER || _la == SqlParserSTRING_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_keyword
	return p
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) K_ABORT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ABORT, 0)
}

func (s *KeywordContext) K_ACTION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ACTION, 0)
}

func (s *KeywordContext) K_ADD() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ADD, 0)
}

func (s *KeywordContext) K_AFTER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AFTER, 0)
}

func (s *KeywordContext) K_ALL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALL, 0)
}

func (s *KeywordContext) K_ALTER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ALTER, 0)
}

func (s *KeywordContext) K_ANALYZE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ANALYZE, 0)
}

func (s *KeywordContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AND, 0)
}

func (s *KeywordContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AS, 0)
}

func (s *KeywordContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ASC, 0)
}

func (s *KeywordContext) K_ATTACH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ATTACH, 0)
}

func (s *KeywordContext) K_AUTOINCREMENT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_AUTOINCREMENT, 0)
}

func (s *KeywordContext) K_BEFORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BEFORE, 0)
}

func (s *KeywordContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BEGIN, 0)
}

func (s *KeywordContext) K_BETWEEN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BETWEEN, 0)
}

func (s *KeywordContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_BY, 0)
}

func (s *KeywordContext) K_CASCADE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CASCADE, 0)
}

func (s *KeywordContext) K_CASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CASE, 0)
}

func (s *KeywordContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CAST, 0)
}

func (s *KeywordContext) K_CHECK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CHECK, 0)
}

func (s *KeywordContext) K_COLLATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLLATE, 0)
}

func (s *KeywordContext) K_COLUMN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COLUMN, 0)
}

func (s *KeywordContext) K_COMMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_COMMIT, 0)
}

func (s *KeywordContext) K_CONFLICT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CONFLICT, 0)
}

func (s *KeywordContext) K_CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CONSTRAINT, 0)
}

func (s *KeywordContext) K_CREATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CREATE, 0)
}

func (s *KeywordContext) K_CROSS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CROSS, 0)
}

func (s *KeywordContext) K_CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CURRENT_DATE, 0)
}

func (s *KeywordContext) K_CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CURRENT_TIME, 0)
}

func (s *KeywordContext) K_CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_CURRENT_TIMESTAMP, 0)
}

func (s *KeywordContext) K_DATABASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DATABASE, 0)
}

func (s *KeywordContext) K_DEFAULT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFAULT, 0)
}

func (s *KeywordContext) K_DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFERRABLE, 0)
}

func (s *KeywordContext) K_DEFERRED() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DEFERRED, 0)
}

func (s *KeywordContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DELETE, 0)
}

func (s *KeywordContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DESC, 0)
}

func (s *KeywordContext) K_DETACH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DETACH, 0)
}

func (s *KeywordContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DISTINCT, 0)
}

func (s *KeywordContext) K_DROP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_DROP, 0)
}

func (s *KeywordContext) K_EACH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EACH, 0)
}

func (s *KeywordContext) K_ELSE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ELSE, 0)
}

func (s *KeywordContext) K_END() antlr.TerminalNode {
	return s.GetToken(SqlParserK_END, 0)
}

func (s *KeywordContext) K_ENABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ENABLE, 0)
}

func (s *KeywordContext) K_ESCAPE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ESCAPE, 0)
}

func (s *KeywordContext) K_EXCEPT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXCEPT, 0)
}

func (s *KeywordContext) K_EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXCLUSIVE, 0)
}

func (s *KeywordContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXISTS, 0)
}

func (s *KeywordContext) K_EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_EXPLAIN, 0)
}

func (s *KeywordContext) K_FAIL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FAIL, 0)
}

func (s *KeywordContext) K_FOR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FOR, 0)
}

func (s *KeywordContext) K_FOREIGN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FOREIGN, 0)
}

func (s *KeywordContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FROM, 0)
}

func (s *KeywordContext) K_FULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_FULL, 0)
}

func (s *KeywordContext) K_GLOB() antlr.TerminalNode {
	return s.GetToken(SqlParserK_GLOB, 0)
}

func (s *KeywordContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_GROUP, 0)
}

func (s *KeywordContext) K_HAVING() antlr.TerminalNode {
	return s.GetToken(SqlParserK_HAVING, 0)
}

func (s *KeywordContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IF, 0)
}

func (s *KeywordContext) K_IGNORE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IGNORE, 0)
}

func (s *KeywordContext) K_IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IMMEDIATE, 0)
}

func (s *KeywordContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IN, 0)
}

func (s *KeywordContext) K_INDEX() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INDEX, 0)
}

func (s *KeywordContext) K_INDEXED() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INDEXED, 0)
}

func (s *KeywordContext) K_INITIALLY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INITIALLY, 0)
}

func (s *KeywordContext) K_INNER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INNER, 0)
}

func (s *KeywordContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INSERT, 0)
}

func (s *KeywordContext) K_INSTEAD() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INSTEAD, 0)
}

func (s *KeywordContext) K_INTERSECT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INTERSECT, 0)
}

func (s *KeywordContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SqlParserK_INTO, 0)
}

func (s *KeywordContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SqlParserK_IS, 0)
}

func (s *KeywordContext) K_ISNULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ISNULL, 0)
}

func (s *KeywordContext) K_JOIN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_JOIN, 0)
}

func (s *KeywordContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_KEY, 0)
}

func (s *KeywordContext) K_LEFT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LEFT, 0)
}

func (s *KeywordContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIKE, 0)
}

func (s *KeywordContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_LIMIT, 0)
}

func (s *KeywordContext) K_MATCH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_MATCH, 0)
}

func (s *KeywordContext) K_NATURAL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NATURAL, 0)
}

func (s *KeywordContext) K_NO() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NO, 0)
}

func (s *KeywordContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOT, 0)
}

func (s *KeywordContext) K_NOTNULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NOTNULL, 0)
}

func (s *KeywordContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NULL, 0)
}

func (s *KeywordContext) K_OF() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OF, 0)
}

func (s *KeywordContext) K_OFFSET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OFFSET, 0)
}

func (s *KeywordContext) K_ON() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ON, 0)
}

func (s *KeywordContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OR, 0)
}

func (s *KeywordContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ORDER, 0)
}

func (s *KeywordContext) K_OUTER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_OUTER, 0)
}

func (s *KeywordContext) K_PLAN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PLAN, 0)
}

func (s *KeywordContext) K_PRAGMA() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PRAGMA, 0)
}

func (s *KeywordContext) K_PRIMARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_PRIMARY, 0)
}

func (s *KeywordContext) K_QUERY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_QUERY, 0)
}

func (s *KeywordContext) K_RAISE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RAISE, 0)
}

func (s *KeywordContext) K_RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RECURSIVE, 0)
}

func (s *KeywordContext) K_REFERENCES() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REFERENCES, 0)
}

func (s *KeywordContext) K_REGEXP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REGEXP, 0)
}

func (s *KeywordContext) K_REINDEX() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REINDEX, 0)
}

func (s *KeywordContext) K_RELEASE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RELEASE, 0)
}

func (s *KeywordContext) K_RENAME() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RENAME, 0)
}

func (s *KeywordContext) K_REPLACE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_REPLACE, 0)
}

func (s *KeywordContext) K_RESTRICT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RESTRICT, 0)
}

func (s *KeywordContext) K_RIGHT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_RIGHT, 0)
}

func (s *KeywordContext) K_ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROLLBACK, 0)
}

func (s *KeywordContext) K_ROW() antlr.TerminalNode {
	return s.GetToken(SqlParserK_ROW, 0)
}

func (s *KeywordContext) K_SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SAVEPOINT, 0)
}

func (s *KeywordContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SELECT, 0)
}

func (s *KeywordContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SqlParserK_SET, 0)
}

func (s *KeywordContext) K_TABLE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TABLE, 0)
}

func (s *KeywordContext) K_TEMP() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMP, 0)
}

func (s *KeywordContext) K_TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TEMPORARY, 0)
}

func (s *KeywordContext) K_THEN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_THEN, 0)
}

func (s *KeywordContext) K_TO() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TO, 0)
}

func (s *KeywordContext) K_TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRANSACTION, 0)
}

func (s *KeywordContext) K_TRIGGER() antlr.TerminalNode {
	return s.GetToken(SqlParserK_TRIGGER, 0)
}

func (s *KeywordContext) K_UNION() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNION, 0)
}

func (s *KeywordContext) K_UNIQUE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UNIQUE, 0)
}

func (s *KeywordContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_UPDATE, 0)
}

func (s *KeywordContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SqlParserK_USING, 0)
}

func (s *KeywordContext) K_VACUUM() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VACUUM, 0)
}

func (s *KeywordContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VALUES, 0)
}

func (s *KeywordContext) K_VIEW() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VIEW, 0)
}

func (s *KeywordContext) K_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_VIRTUAL, 0)
}

func (s *KeywordContext) K_WHEN() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHEN, 0)
}

func (s *KeywordContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WHERE, 0)
}

func (s *KeywordContext) K_WITH() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITH, 0)
}

func (s *KeywordContext) K_WITHOUT() antlr.TerminalNode {
	return s.GetToken(SqlParserK_WITHOUT, 0)
}

func (s *KeywordContext) K_NEXTVAL() antlr.TerminalNode {
	return s.GetToken(SqlParserK_NEXTVAL, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *KeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterKeyword(s)
	}
}

func (s *KeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitKeyword(s)
	}
}




func (p *SqlParser) Keyword() (localctx IKeywordContext) {
	this := p
	_ = this

	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SqlParserRULE_keyword)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1813)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 26)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 26))) & ((1 << (SqlParserK_ABORT - 26)) | (1 << (SqlParserK_ACTION - 26)) | (1 << (SqlParserK_ADD - 26)) | (1 << (SqlParserK_AFTER - 26)) | (1 << (SqlParserK_ALL - 26)) | (1 << (SqlParserK_ALTER - 26)) | (1 << (SqlParserK_ANALYZE - 26)) | (1 << (SqlParserK_AND - 26)) | (1 << (SqlParserK_AS - 26)) | (1 << (SqlParserK_ASC - 26)) | (1 << (SqlParserK_ATTACH - 26)) | (1 << (SqlParserK_AUTOINCREMENT - 26)) | (1 << (SqlParserK_BEFORE - 26)) | (1 << (SqlParserK_BEGIN - 26)) | (1 << (SqlParserK_BETWEEN - 26)) | (1 << (SqlParserK_BY - 26)) | (1 << (SqlParserK_CASCADE - 26)) | (1 << (SqlParserK_CASE - 26)) | (1 << (SqlParserK_CAST - 26)) | (1 << (SqlParserK_CHECK - 26)) | (1 << (SqlParserK_COLLATE - 26)) | (1 << (SqlParserK_COLUMN - 26)) | (1 << (SqlParserK_COMMIT - 26)) | (1 << (SqlParserK_CONFLICT - 26)) | (1 << (SqlParserK_CONSTRAINT - 26)) | (1 << (SqlParserK_CREATE - 26)) | (1 << (SqlParserK_CROSS - 26)) | (1 << (SqlParserK_CURRENT_DATE - 26)) | (1 << (SqlParserK_CURRENT_TIME - 26)) | (1 << (SqlParserK_CURRENT_TIMESTAMP - 26)) | (1 << (SqlParserK_DATABASE - 26)) | (1 << (SqlParserK_DEFAULT - 26)))) != 0) || ((((_la - 58)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 58))) & ((1 << (SqlParserK_DEFERRABLE - 58)) | (1 << (SqlParserK_DEFERRED - 58)) | (1 << (SqlParserK_DELETE - 58)) | (1 << (SqlParserK_DESC - 58)) | (1 << (SqlParserK_DETACH - 58)) | (1 << (SqlParserK_DISTINCT - 58)) | (1 << (SqlParserK_DROP - 58)) | (1 << (SqlParserK_EACH - 58)) | (1 << (SqlParserK_ELSE - 58)) | (1 << (SqlParserK_END - 58)) | (1 << (SqlParserK_ENABLE - 58)) | (1 << (SqlParserK_ESCAPE - 58)) | (1 << (SqlParserK_EXCEPT - 58)) | (1 << (SqlParserK_EXCLUSIVE - 58)) | (1 << (SqlParserK_EXISTS - 58)) | (1 << (SqlParserK_EXPLAIN - 58)) | (1 << (SqlParserK_FAIL - 58)) | (1 << (SqlParserK_FOR - 58)) | (1 << (SqlParserK_FOREIGN - 58)) | (1 << (SqlParserK_FROM - 58)) | (1 << (SqlParserK_FULL - 58)) | (1 << (SqlParserK_GLOB - 58)) | (1 << (SqlParserK_GROUP - 58)) | (1 << (SqlParserK_HAVING - 58)) | (1 << (SqlParserK_IF - 58)) | (1 << (SqlParserK_IGNORE - 58)) | (1 << (SqlParserK_IMMEDIATE - 58)) | (1 << (SqlParserK_IN - 58)) | (1 << (SqlParserK_INDEX - 58)) | (1 << (SqlParserK_INDEXED - 58)) | (1 << (SqlParserK_INITIALLY - 58)) | (1 << (SqlParserK_INNER - 58)))) != 0) || ((((_la - 90)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 90))) & ((1 << (SqlParserK_INSERT - 90)) | (1 << (SqlParserK_INSTEAD - 90)) | (1 << (SqlParserK_INTERSECT - 90)) | (1 << (SqlParserK_INTO - 90)) | (1 << (SqlParserK_IS - 90)) | (1 << (SqlParserK_ISNULL - 90)) | (1 << (SqlParserK_JOIN - 90)) | (1 << (SqlParserK_KEY - 90)) | (1 << (SqlParserK_LEFT - 90)) | (1 << (SqlParserK_LIKE - 90)) | (1 << (SqlParserK_LIMIT - 90)) | (1 << (SqlParserK_MATCH - 90)) | (1 << (SqlParserK_NATURAL - 90)) | (1 << (SqlParserK_NEXTVAL - 90)) | (1 << (SqlParserK_NO - 90)) | (1 << (SqlParserK_NOT - 90)) | (1 << (SqlParserK_NOTNULL - 90)) | (1 << (SqlParserK_NULL - 90)) | (1 << (SqlParserK_OF - 90)) | (1 << (SqlParserK_OFFSET - 90)) | (1 << (SqlParserK_ON - 90)) | (1 << (SqlParserK_OR - 90)) | (1 << (SqlParserK_ORDER - 90)) | (1 << (SqlParserK_OUTER - 90)) | (1 << (SqlParserK_PLAN - 90)) | (1 << (SqlParserK_PRAGMA - 90)) | (1 << (SqlParserK_PRIMARY - 90)) | (1 << (SqlParserK_QUERY - 90)) | (1 << (SqlParserK_RAISE - 90)) | (1 << (SqlParserK_RECURSIVE - 90)) | (1 << (SqlParserK_REFERENCES - 90)))) != 0) || ((((_la - 122)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 122))) & ((1 << (SqlParserK_REGEXP - 122)) | (1 << (SqlParserK_REINDEX - 122)) | (1 << (SqlParserK_RELEASE - 122)) | (1 << (SqlParserK_RENAME - 122)) | (1 << (SqlParserK_REPLACE - 122)) | (1 << (SqlParserK_RESTRICT - 122)) | (1 << (SqlParserK_RIGHT - 122)) | (1 << (SqlParserK_ROLLBACK - 122)) | (1 << (SqlParserK_ROW - 122)) | (1 << (SqlParserK_SAVEPOINT - 122)) | (1 << (SqlParserK_SELECT - 122)) | (1 << (SqlParserK_SET - 122)) | (1 << (SqlParserK_TABLE - 122)) | (1 << (SqlParserK_TEMP - 122)) | (1 << (SqlParserK_TEMPORARY - 122)) | (1 << (SqlParserK_THEN - 122)) | (1 << (SqlParserK_TO - 122)) | (1 << (SqlParserK_TRANSACTION - 122)) | (1 << (SqlParserK_TRIGGER - 122)) | (1 << (SqlParserK_UNION - 122)) | (1 << (SqlParserK_UNIQUE - 122)) | (1 << (SqlParserK_UPDATE - 122)) | (1 << (SqlParserK_USING - 122)) | (1 << (SqlParserK_VACUUM - 122)) | (1 << (SqlParserK_VALUES - 122)) | (1 << (SqlParserK_VIEW - 122)) | (1 << (SqlParserK_VIRTUAL - 122)) | (1 << (SqlParserK_WHEN - 122)) | (1 << (SqlParserK_WHERE - 122)) | (1 << (SqlParserK_WITH - 122)) | (1 << (SqlParserK_WITHOUT - 122)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IUnknownContext is an interface to support dynamic dispatch.
type IUnknownContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnknownContext differentiates from other interfaces.
	IsUnknownContext()
}

type UnknownContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnknownContext() *UnknownContext {
	var p = new(UnknownContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_unknown
	return p
}

func (*UnknownContext) IsUnknownContext() {}

func NewUnknownContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnknownContext {
	var p = new(UnknownContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_unknown

	return p
}

func (s *UnknownContext) GetParser() antlr.Parser { return s.parser }
func (s *UnknownContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnknownContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *UnknownContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterUnknown(s)
	}
}

func (s *UnknownContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitUnknown(s)
	}
}




func (p *SqlParser) Unknown() (localctx IUnknownContext) {
	this := p
	_ = this

	localctx = NewUnknownContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SqlParserRULE_unknown)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1816)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
				p.SetState(1815)
				p.MatchWildcard()





		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1818)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext())
	}



	return localctx
}


// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitName(s)
	}
}




func (p *SqlParser) Name() (localctx INameContext) {
	this := p
	_ = this

	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SqlParserRULE_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1820)
		p.Any_name()
	}



	return localctx
}


// IFunction_nameContext is an interface to support dynamic dispatch.
type IFunction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_nameContext differentiates from other interfaces.
	IsFunction_nameContext()
}

type Function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_nameContext() *Function_nameContext {
	var p = new(Function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_function_name
	return p
}

func (*Function_nameContext) IsFunction_nameContext() {}

func NewFunction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_nameContext {
	var p = new(Function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_function_name

	return p
}

func (s *Function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterFunction_name(s)
	}
}

func (s *Function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitFunction_name(s)
	}
}




func (p *SqlParser) Function_name() (localctx IFunction_nameContext) {
	this := p
	_ = this

	localctx = NewFunction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SqlParserRULE_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1822)
		p.Any_name()
	}



	return localctx
}


// IDatabase_nameContext is an interface to support dynamic dispatch.
type IDatabase_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_nameContext differentiates from other interfaces.
	IsDatabase_nameContext()
}

type Database_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_nameContext() *Database_nameContext {
	var p = new(Database_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_database_name
	return p
}

func (*Database_nameContext) IsDatabase_nameContext() {}

func NewDatabase_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_nameContext {
	var p = new(Database_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_database_name

	return p
}

func (s *Database_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Database_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Database_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterDatabase_name(s)
	}
}

func (s *Database_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitDatabase_name(s)
	}
}




func (p *SqlParser) Database_name() (localctx IDatabase_nameContext) {
	this := p
	_ = this

	localctx = NewDatabase_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SqlParserRULE_database_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1824)
		p.Any_name()
	}



	return localctx
}


// ISource_table_nameContext is an interface to support dynamic dispatch.
type ISource_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSource_table_nameContext differentiates from other interfaces.
	IsSource_table_nameContext()
}

type Source_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySource_table_nameContext() *Source_table_nameContext {
	var p = new(Source_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_source_table_name
	return p
}

func (*Source_table_nameContext) IsSource_table_nameContext() {}

func NewSource_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Source_table_nameContext {
	var p = new(Source_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_source_table_name

	return p
}

func (s *Source_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Source_table_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Source_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Source_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Source_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSource_table_name(s)
	}
}

func (s *Source_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSource_table_name(s)
	}
}




func (p *SqlParser) Source_table_name() (localctx ISource_table_nameContext) {
	this := p
	_ = this

	localctx = NewSource_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SqlParserRULE_source_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1826)
		p.Any_name()
	}



	return localctx
}


// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_name(s)
	}
}




func (p *SqlParser) Table_name() (localctx ITable_nameContext) {
	this := p
	_ = this

	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SqlParserRULE_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1828)
		p.Any_name()
	}



	return localctx
}


// ITable_or_index_nameContext is an interface to support dynamic dispatch.
type ITable_or_index_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_or_index_nameContext differentiates from other interfaces.
	IsTable_or_index_nameContext()
}

type Table_or_index_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_index_nameContext() *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_or_index_name
	return p
}

func (*Table_or_index_nameContext) IsTable_or_index_nameContext() {}

func NewTable_or_index_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_or_index_name

	return p
}

func (s *Table_or_index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_index_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_or_index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_or_index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_or_index_name(s)
	}
}




func (p *SqlParser) Table_or_index_name() (localctx ITable_or_index_nameContext) {
	this := p
	_ = this

	localctx = NewTable_or_index_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SqlParserRULE_table_or_index_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1830)
		p.Any_name()
	}



	return localctx
}


// INew_table_nameContext is an interface to support dynamic dispatch.
type INew_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNew_table_nameContext differentiates from other interfaces.
	IsNew_table_nameContext()
}

type New_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_table_nameContext() *New_table_nameContext {
	var p = new(New_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_new_table_name
	return p
}

func (*New_table_nameContext) IsNew_table_nameContext() {}

func NewNew_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_table_nameContext {
	var p = new(New_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_new_table_name

	return p
}

func (s *New_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *New_table_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *New_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *New_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterNew_table_name(s)
	}
}

func (s *New_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitNew_table_name(s)
	}
}




func (p *SqlParser) New_table_name() (localctx INew_table_nameContext) {
	this := p
	_ = this

	localctx = NewNew_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SqlParserRULE_new_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1832)
		p.Any_name()
	}



	return localctx
}


// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_column_name
	return p
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitColumn_name(s)
	}
}




func (p *SqlParser) Column_name() (localctx IColumn_nameContext) {
	this := p
	_ = this

	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SqlParserRULE_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1834)
		p.Any_name()
	}



	return localctx
}


// ICollation_nameContext is an interface to support dynamic dispatch.
type ICollation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollation_nameContext differentiates from other interfaces.
	IsCollation_nameContext()
}

type Collation_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_nameContext() *Collation_nameContext {
	var p = new(Collation_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_collation_name
	return p
}

func (*Collation_nameContext) IsCollation_nameContext() {}

func NewCollation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_nameContext {
	var p = new(Collation_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_collation_name

	return p
}

func (s *Collation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Collation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Collation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterCollation_name(s)
	}
}

func (s *Collation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitCollation_name(s)
	}
}




func (p *SqlParser) Collation_name() (localctx ICollation_nameContext) {
	this := p
	_ = this

	localctx = NewCollation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SqlParserRULE_collation_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1836)
		p.Any_name()
	}



	return localctx
}


// IForeign_tableContext is an interface to support dynamic dispatch.
type IForeign_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_tableContext differentiates from other interfaces.
	IsForeign_tableContext()
}

type Foreign_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_tableContext() *Foreign_tableContext {
	var p = new(Foreign_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_foreign_table
	return p
}

func (*Foreign_tableContext) IsForeign_tableContext() {}

func NewForeign_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_tableContext {
	var p = new(Foreign_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_foreign_table

	return p
}

func (s *Foreign_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_tableContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Foreign_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Foreign_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterForeign_table(s)
	}
}

func (s *Foreign_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitForeign_table(s)
	}
}




func (p *SqlParser) Foreign_table() (localctx IForeign_tableContext) {
	this := p
	_ = this

	localctx = NewForeign_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SqlParserRULE_foreign_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1838)
		p.Any_name()
	}



	return localctx
}


// IIndex_nameContext is an interface to support dynamic dispatch.
type IIndex_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_nameContext differentiates from other interfaces.
	IsIndex_nameContext()
}

type Index_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_nameContext() *Index_nameContext {
	var p = new(Index_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_index_name
	return p
}

func (*Index_nameContext) IsIndex_nameContext() {}

func NewIndex_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_nameContext {
	var p = new(Index_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_index_name

	return p
}

func (s *Index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterIndex_name(s)
	}
}

func (s *Index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitIndex_name(s)
	}
}




func (p *SqlParser) Index_name() (localctx IIndex_nameContext) {
	this := p
	_ = this

	localctx = NewIndex_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SqlParserRULE_index_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1840)
		p.Any_name()
	}



	return localctx
}


// ITrigger_nameContext is an interface to support dynamic dispatch.
type ITrigger_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrigger_nameContext differentiates from other interfaces.
	IsTrigger_nameContext()
}

type Trigger_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_nameContext() *Trigger_nameContext {
	var p = new(Trigger_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_trigger_name
	return p
}

func (*Trigger_nameContext) IsTrigger_nameContext() {}

func NewTrigger_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_nameContext {
	var p = new(Trigger_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_trigger_name

	return p
}

func (s *Trigger_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Trigger_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Trigger_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTrigger_name(s)
	}
}

func (s *Trigger_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTrigger_name(s)
	}
}




func (p *SqlParser) Trigger_name() (localctx ITrigger_nameContext) {
	this := p
	_ = this

	localctx = NewTrigger_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SqlParserRULE_trigger_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1842)
		p.Any_name()
	}



	return localctx
}


// IView_nameContext is an interface to support dynamic dispatch.
type IView_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_nameContext differentiates from other interfaces.
	IsView_nameContext()
}

type View_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_nameContext() *View_nameContext {
	var p = new(View_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_view_name
	return p
}

func (*View_nameContext) IsView_nameContext() {}

func NewView_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_nameContext {
	var p = new(View_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_view_name

	return p
}

func (s *View_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *View_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *View_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *View_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterView_name(s)
	}
}

func (s *View_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitView_name(s)
	}
}




func (p *SqlParser) View_name() (localctx IView_nameContext) {
	this := p
	_ = this

	localctx = NewView_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SqlParserRULE_view_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1844)
		p.Any_name()
	}



	return localctx
}


// IModule_nameContext is an interface to support dynamic dispatch.
type IModule_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModule_nameContext differentiates from other interfaces.
	IsModule_nameContext()
}

type Module_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_nameContext() *Module_nameContext {
	var p = new(Module_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_module_name
	return p
}

func (*Module_nameContext) IsModule_nameContext() {}

func NewModule_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_nameContext {
	var p = new(Module_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_module_name

	return p
}

func (s *Module_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Module_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Module_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterModule_name(s)
	}
}

func (s *Module_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitModule_name(s)
	}
}




func (p *SqlParser) Module_name() (localctx IModule_nameContext) {
	this := p
	_ = this

	localctx = NewModule_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SqlParserRULE_module_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1846)
		p.Any_name()
	}



	return localctx
}


// IPragma_nameContext is an interface to support dynamic dispatch.
type IPragma_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragma_nameContext differentiates from other interfaces.
	IsPragma_nameContext()
}

type Pragma_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_nameContext() *Pragma_nameContext {
	var p = new(Pragma_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_pragma_name
	return p
}

func (*Pragma_nameContext) IsPragma_nameContext() {}

func NewPragma_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_nameContext {
	var p = new(Pragma_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_pragma_name

	return p
}

func (s *Pragma_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Pragma_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Pragma_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterPragma_name(s)
	}
}

func (s *Pragma_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitPragma_name(s)
	}
}




func (p *SqlParser) Pragma_name() (localctx IPragma_nameContext) {
	this := p
	_ = this

	localctx = NewPragma_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SqlParserRULE_pragma_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1848)
		p.Any_name()
	}



	return localctx
}


// ISavepoint_nameContext is an interface to support dynamic dispatch.
type ISavepoint_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_nameContext differentiates from other interfaces.
	IsSavepoint_nameContext()
}

type Savepoint_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_nameContext() *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_savepoint_name
	return p
}

func (*Savepoint_nameContext) IsSavepoint_nameContext() {}

func NewSavepoint_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_savepoint_name

	return p
}

func (s *Savepoint_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Savepoint_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Savepoint_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitSavepoint_name(s)
	}
}




func (p *SqlParser) Savepoint_name() (localctx ISavepoint_nameContext) {
	this := p
	_ = this

	localctx = NewSavepoint_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SqlParserRULE_savepoint_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1850)
		p.Any_name()
	}



	return localctx
}


// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_table_alias
	return p
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTable_alias(s)
	}
}




func (p *SqlParser) Table_alias() (localctx ITable_aliasContext) {
	this := p
	_ = this

	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SqlParserRULE_table_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1852)
		p.Any_name()
	}



	return localctx
}


// ITransaction_nameContext is an interface to support dynamic dispatch.
type ITransaction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_nameContext differentiates from other interfaces.
	IsTransaction_nameContext()
}

type Transaction_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_nameContext() *Transaction_nameContext {
	var p = new(Transaction_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_transaction_name
	return p
}

func (*Transaction_nameContext) IsTransaction_nameContext() {}

func NewTransaction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_nameContext {
	var p = new(Transaction_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_transaction_name

	return p
}

func (s *Transaction_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Transaction_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Transaction_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterTransaction_name(s)
	}
}

func (s *Transaction_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitTransaction_name(s)
	}
}




func (p *SqlParser) Transaction_name() (localctx ITransaction_nameContext) {
	this := p
	_ = this

	localctx = NewTransaction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SqlParserRULE_transaction_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1854)
		p.Any_name()
	}



	return localctx
}


// IAny_nameContext is an interface to support dynamic dispatch.
type IAny_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_nameContext differentiates from other interfaces.
	IsAny_nameContext()
}

type Any_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_nameContext() *Any_nameContext {
	var p = new(Any_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SqlParserRULE_any_name
	return p
}

func (*Any_nameContext) IsAny_nameContext() {}

func NewAny_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_nameContext {
	var p = new(Any_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SqlParserRULE_any_name

	return p
}

func (s *Any_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_nameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SqlParserIDENTIFIER, 0)
}

func (s *Any_nameContext) Keyword() IKeywordContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *Any_nameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SqlParserSTRING_LITERAL, 0)
}

func (s *Any_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserOPEN_PAR, 0)
}

func (s *Any_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext;
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext);
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Any_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SqlParserCLOSE_PAR, 0)
}

func (s *Any_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Any_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.EnterAny_name(s)
	}
}

func (s *Any_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SqlListener); ok {
		listenerT.ExitAny_name(s)
	}
}




func (p *SqlParser) Any_name() (localctx IAny_nameContext) {
	this := p
	_ = this

	localctx = NewAny_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, SqlParserRULE_any_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1863)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SqlParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1856)
			p.Match(SqlParserIDENTIFIER)
		}


	case SqlParserK_ABORT, SqlParserK_ACTION, SqlParserK_ADD, SqlParserK_AFTER, SqlParserK_ALL, SqlParserK_ALTER, SqlParserK_ANALYZE, SqlParserK_AND, SqlParserK_AS, SqlParserK_ASC, SqlParserK_ATTACH, SqlParserK_AUTOINCREMENT, SqlParserK_BEFORE, SqlParserK_BEGIN, SqlParserK_BETWEEN, SqlParserK_BY, SqlParserK_CASCADE, SqlParserK_CASE, SqlParserK_CAST, SqlParserK_CHECK, SqlParserK_COLLATE, SqlParserK_COLUMN, SqlParserK_COMMIT, SqlParserK_CONFLICT, SqlParserK_CONSTRAINT, SqlParserK_CREATE, SqlParserK_CROSS, SqlParserK_CURRENT_DATE, SqlParserK_CURRENT_TIME, SqlParserK_CURRENT_TIMESTAMP, SqlParserK_DATABASE, SqlParserK_DEFAULT, SqlParserK_DEFERRABLE, SqlParserK_DEFERRED, SqlParserK_DELETE, SqlParserK_DESC, SqlParserK_DETACH, SqlParserK_DISTINCT, SqlParserK_DROP, SqlParserK_EACH, SqlParserK_ELSE, SqlParserK_END, SqlParserK_ENABLE, SqlParserK_ESCAPE, SqlParserK_EXCEPT, SqlParserK_EXCLUSIVE, SqlParserK_EXISTS, SqlParserK_EXPLAIN, SqlParserK_FAIL, SqlParserK_FOR, SqlParserK_FOREIGN, SqlParserK_FROM, SqlParserK_FULL, SqlParserK_GLOB, SqlParserK_GROUP, SqlParserK_HAVING, SqlParserK_IF, SqlParserK_IGNORE, SqlParserK_IMMEDIATE, SqlParserK_IN, SqlParserK_INDEX, SqlParserK_INDEXED, SqlParserK_INITIALLY, SqlParserK_INNER, SqlParserK_INSERT, SqlParserK_INSTEAD, SqlParserK_INTERSECT, SqlParserK_INTO, SqlParserK_IS, SqlParserK_ISNULL, SqlParserK_JOIN, SqlParserK_KEY, SqlParserK_LEFT, SqlParserK_LIKE, SqlParserK_LIMIT, SqlParserK_MATCH, SqlParserK_NATURAL, SqlParserK_NEXTVAL, SqlParserK_NO, SqlParserK_NOT, SqlParserK_NOTNULL, SqlParserK_NULL, SqlParserK_OF, SqlParserK_OFFSET, SqlParserK_ON, SqlParserK_OR, SqlParserK_ORDER, SqlParserK_OUTER, SqlParserK_PLAN, SqlParserK_PRAGMA, SqlParserK_PRIMARY, SqlParserK_QUERY, SqlParserK_RAISE, SqlParserK_RECURSIVE, SqlParserK_REFERENCES, SqlParserK_REGEXP, SqlParserK_REINDEX, SqlParserK_RELEASE, SqlParserK_RENAME, SqlParserK_REPLACE, SqlParserK_RESTRICT, SqlParserK_RIGHT, SqlParserK_ROLLBACK, SqlParserK_ROW, SqlParserK_SAVEPOINT, SqlParserK_SELECT, SqlParserK_SET, SqlParserK_TABLE, SqlParserK_TEMP, SqlParserK_TEMPORARY, SqlParserK_THEN, SqlParserK_TO, SqlParserK_TRANSACTION, SqlParserK_TRIGGER, SqlParserK_UNION, SqlParserK_UNIQUE, SqlParserK_UPDATE, SqlParserK_USING, SqlParserK_VACUUM, SqlParserK_VALUES, SqlParserK_VIEW, SqlParserK_VIRTUAL, SqlParserK_WHEN, SqlParserK_WHERE, SqlParserK_WITH, SqlParserK_WITHOUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1857)
			p.Keyword()
		}


	case SqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1858)
			p.Match(SqlParserSTRING_LITERAL)
		}


	case SqlParserOPEN_PAR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1859)
			p.Match(SqlParserOPEN_PAR)
		}
		{
			p.SetState(1860)
			p.Any_name()
		}
		{
			p.SetState(1861)
			p.Match(SqlParserCLOSE_PAR)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


func (p *SqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 47:
			var t *ExprContext = nil
			if localctx != nil { t = localctx.(*ExprContext) }
			return p.Expr_Sempred(t, predIndex)


	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SqlParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
			return p.Precpred(p.GetParserRuleContext(), 20)

	case 1:
			return p.Precpred(p.GetParserRuleContext(), 19)

	case 2:
			return p.Precpred(p.GetParserRuleContext(), 18)

	case 3:
			return p.Precpred(p.GetParserRuleContext(), 17)

	case 4:
			return p.Precpred(p.GetParserRuleContext(), 16)

	case 5:
			return p.Precpred(p.GetParserRuleContext(), 15)

	case 6:
			return p.Precpred(p.GetParserRuleContext(), 14)

	case 7:
			return p.Precpred(p.GetParserRuleContext(), 13)

	case 8:
			return p.Precpred(p.GetParserRuleContext(), 6)

	case 9:
			return p.Precpred(p.GetParserRuleContext(), 5)

	case 10:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 11:
			return p.Precpred(p.GetParserRuleContext(), 8)

	case 12:
			return p.Precpred(p.GetParserRuleContext(), 7)

	case 13:
			return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}


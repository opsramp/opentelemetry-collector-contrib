//
// This computer program is the confidential information and proprietary trade
// secret of OpsRamp, Inc. Possessions and use of this program must  conform
// strictly to the license agreement between the user and OpsRamp, Inc., and
// receipt or possession does not convey any rights to divulge, reproduce,  or
// allow others to use this program without specific written authorization  of
// OpsRamp, Inc.
//
// Copyright (c) 2022 OpsRamp, Inc. All rights reserved.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.24.4
// source: aflow.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "github.com/open-telemetry/opentelemetry-collector-contrib/exporter/opsrampflowexporter/internal/aflow/common"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Meta_AzureFlowDir int32

const (
	Meta_AZURE_FLOW_DIR_UNSPECIFIED Meta_AzureFlowDir = 0
	Meta_AZURE_FLOW_DIR_INCOMING    Meta_AzureFlowDir = 1
	Meta_AZURE_FLOW_DIR_OUTGOING    Meta_AzureFlowDir = 2
)

// Enum value maps for Meta_AzureFlowDir.
var (
	Meta_AzureFlowDir_name = map[int32]string{
		0: "AZURE_FLOW_DIR_UNSPECIFIED",
		1: "AZURE_FLOW_DIR_INCOMING",
		2: "AZURE_FLOW_DIR_OUTGOING",
	}
	Meta_AzureFlowDir_value = map[string]int32{
		"AZURE_FLOW_DIR_UNSPECIFIED": 0,
		"AZURE_FLOW_DIR_INCOMING":    1,
		"AZURE_FLOW_DIR_OUTGOING":    2,
	}
)

func (x Meta_AzureFlowDir) Enum() *Meta_AzureFlowDir {
	p := new(Meta_AzureFlowDir)
	*p = x
	return p
}

func (x Meta_AzureFlowDir) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Meta_AzureFlowDir) Descriptor() protoreflect.EnumDescriptor {
	return file_aflow_proto_enumTypes[0].Descriptor()
}

func (Meta_AzureFlowDir) Type() protoreflect.EnumType {
	return &file_aflow_proto_enumTypes[0]
}

func (x Meta_AzureFlowDir) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Meta_AzureFlowDir.Descriptor instead.
func (Meta_AzureFlowDir) EnumDescriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 0}
}

type Meta_AzureFlowState int32

const (
	Meta_AZURE_FLOW_STATE_UNSPECIFIED Meta_AzureFlowState = 0
	Meta_AZURE_FLOW_STATE_BEGIN       Meta_AzureFlowState = 1
	Meta_AZURE_FLOW_STATE_CONTINUING  Meta_AzureFlowState = 2
	Meta_AZURE_FLOW_STATE_END         Meta_AzureFlowState = 3
)

// Enum value maps for Meta_AzureFlowState.
var (
	Meta_AzureFlowState_name = map[int32]string{
		0: "AZURE_FLOW_STATE_UNSPECIFIED",
		1: "AZURE_FLOW_STATE_BEGIN",
		2: "AZURE_FLOW_STATE_CONTINUING",
		3: "AZURE_FLOW_STATE_END",
	}
	Meta_AzureFlowState_value = map[string]int32{
		"AZURE_FLOW_STATE_UNSPECIFIED": 0,
		"AZURE_FLOW_STATE_BEGIN":       1,
		"AZURE_FLOW_STATE_CONTINUING":  2,
		"AZURE_FLOW_STATE_END":         3,
	}
)

func (x Meta_AzureFlowState) Enum() *Meta_AzureFlowState {
	p := new(Meta_AzureFlowState)
	*p = x
	return p
}

func (x Meta_AzureFlowState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Meta_AzureFlowState) Descriptor() protoreflect.EnumDescriptor {
	return file_aflow_proto_enumTypes[1].Descriptor()
}

func (Meta_AzureFlowState) Type() protoreflect.EnumType {
	return &file_aflow_proto_enumTypes[1]
}

func (x Meta_AzureFlowState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Meta_AzureFlowState.Descriptor instead.
func (Meta_AzureFlowState) EnumDescriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 1}
}

type Flow_Kind int32

const (
	Flow_KIND_UNSPECIFIED   Flow_Kind = 0
	Flow_KIND_NETFLOW_5     Flow_Kind = 1
	Flow_KIND_NETFLOW_9     Flow_Kind = 2
	Flow_KIND_NETFLOW_IPFIX Flow_Kind = 3
	Flow_KIND_SFLOW         Flow_Kind = 7
	Flow_KIND_AWS           Flow_Kind = 11
	Flow_KIND_AZURE         Flow_Kind = 12
	Flow_KIND_GCP           Flow_Kind = 13
)

// Enum value maps for Flow_Kind.
var (
	Flow_Kind_name = map[int32]string{
		0:  "KIND_UNSPECIFIED",
		1:  "KIND_NETFLOW_5",
		2:  "KIND_NETFLOW_9",
		3:  "KIND_NETFLOW_IPFIX",
		7:  "KIND_SFLOW",
		11: "KIND_AWS",
		12: "KIND_AZURE",
		13: "KIND_GCP",
	}
	Flow_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED":   0,
		"KIND_NETFLOW_5":     1,
		"KIND_NETFLOW_9":     2,
		"KIND_NETFLOW_IPFIX": 3,
		"KIND_SFLOW":         7,
		"KIND_AWS":           11,
		"KIND_AZURE":         12,
		"KIND_GCP":           13,
	}
)

func (x Flow_Kind) Enum() *Flow_Kind {
	p := new(Flow_Kind)
	*p = x
	return p
}

func (x Flow_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flow_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_aflow_proto_enumTypes[2].Descriptor()
}

func (Flow_Kind) Type() protoreflect.EnumType {
	return &file_aflow_proto_enumTypes[2]
}

func (x Flow_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flow_Kind.Descriptor instead.
func (Flow_Kind) EnumDescriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{7, 0}
}

type NetflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId string `protobuf:"bytes,1,opt,name=responseId,proto3" json:"responseId,omitempty"`
}

func (x *NetflowResponse) Reset() {
	*x = NetflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetflowResponse) ProtoMessage() {}

func (x *NetflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetflowResponse.ProtoReflect.Descriptor instead.
func (*NetflowResponse) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{0}
}

func (x *NetflowResponse) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

// Following Flow hierarchy is being defined.
// Aggregator
//
//	Collector1
//	   Exporter1
//	   Exporter2
//	Collector2
//	   Exporter3
//	   Exporter4
//
// Exporters are the end devices that collect flows using NetFlow, sFlow or IPFIX (or eBPF based kernel programs)
// Collectors are typically OpsRamp Gateways or Agents on servers.
// Aggregators could be next-level consolidators. May be running on each datacenter, or a site or clound instance.
type AggregatedFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationInterval uint32            `protobuf:"varint,1,opt,name=aggregation_interval,json=aggregationInterval,proto3" json:"aggregation_interval,omitempty"`
	CollectorFlows      []*CollectorFlows `protobuf:"bytes,2,rep,name=collector_flows,json=collectorFlows,proto3" json:"collector_flows,omitempty"`
}

func (x *AggregatedFlows) Reset() {
	*x = AggregatedFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedFlows) ProtoMessage() {}

func (x *AggregatedFlows) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedFlows.ProtoReflect.Descriptor instead.
func (*AggregatedFlows) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{1}
}

func (x *AggregatedFlows) GetAggregationInterval() uint32 {
	if x != nil {
		return x.AggregationInterval
	}
	return 0
}

func (x *AggregatedFlows) GetCollectorFlows() []*CollectorFlows {
	if x != nil {
		return x.CollectorFlows
	}
	return nil
}

// Collector is identified by hostname, ip and uuid in opsramp resource database.
type Collector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname  string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Uuid      string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SysUptime int64  `protobuf:"varint,4,opt,name=sys_uptime,json=sysUptime,proto3" json:"sys_uptime,omitempty"`
	SchemaUrl string `protobuf:"bytes,5,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (x *Collector) Reset() {
	*x = Collector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collector) ProtoMessage() {}

func (x *Collector) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collector.ProtoReflect.Descriptor instead.
func (*Collector) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{2}
}

func (x *Collector) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Collector) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Collector) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Collector) GetSysUptime() int64 {
	if x != nil {
		return x.SysUptime
	}
	return 0
}

func (x *Collector) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// A collection of Flows from a Collector
type CollectorFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collector *Collector `protobuf:"bytes,1,opt,name=collector,proto3" json:"collector,omitempty"`
	// A list of exporters that send flows
	ExporterFlows []*ExporterFlows `protobuf:"bytes,2,rep,name=exporter_flows,json=exporterFlows,proto3" json:"exporter_flows,omitempty"`
	// This schema_url applies to the data in the "collector" field. It does not apply
	// to the data in the "exporter_flows" field which can have their own schema_url field.
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (x *CollectorFlows) Reset() {
	*x = CollectorFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorFlows) ProtoMessage() {}

func (x *CollectorFlows) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorFlows.ProtoReflect.Descriptor instead.
func (*CollectorFlows) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{3}
}

func (x *CollectorFlows) GetCollector() *Collector {
	if x != nil {
		return x.Collector
	}
	return nil
}

func (x *CollectorFlows) GetExporterFlows() []*ExporterFlows {
	if x != nil {
		return x.ExporterFlows
	}
	return nil
}

func (x *CollectorFlows) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

type Exporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Uuid     string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// repeated opentelemetry.proto.common.v1.KeyValue attributes = 99;
	SchemaUrl string `protobuf:"bytes,4,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (x *Exporter) Reset() {
	*x = Exporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exporter) ProtoMessage() {}

func (x *Exporter) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exporter.ProtoReflect.Descriptor instead.
func (*Exporter) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{4}
}

func (x *Exporter) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Exporter) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Exporter) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Exporter) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

// A collection of flows produced by an Exporter.
type ExporterFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
	Exporter *Exporter `protobuf:"bytes,1,opt,name=exporter,proto3" json:"exporter,omitempty"`
	Flows    []*Flow   `protobuf:"bytes,2,rep,name=flows,proto3" json:"flows,omitempty"`
	// This schema_url applies to the exporter
	SchemaUrl string `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
}

func (x *ExporterFlows) Reset() {
	*x = ExporterFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExporterFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExporterFlows) ProtoMessage() {}

func (x *ExporterFlows) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExporterFlows.ProtoReflect.Descriptor instead.
func (*ExporterFlows) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{5}
}

func (x *ExporterFlows) GetExporter() *Exporter {
	if x != nil {
		return x.Exporter
	}
	return nil
}

func (x *ExporterFlows) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *ExporterFlows) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics *Meta_Metrics    `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Native  *Meta_NativeInfo `protobuf:"bytes,2,opt,name=native,proto3" json:"native,omitempty"`
	NatInfo *Meta_NATInfo    `protobuf:"bytes,3,opt,name=natInfo,proto3" json:"natInfo,omitempty"`
	Aws     *Meta_Aws        `protobuf:"bytes,4,opt,name=aws,proto3" json:"aws,omitempty"`
	Gcp     *Meta_Gcp        `protobuf:"bytes,5,opt,name=gcp,proto3" json:"gcp,omitempty"`
	Azure   *Meta_Azure      `protobuf:"bytes,6,opt,name=azure,proto3" json:"azure,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6}
}

func (x *Meta) GetMetrics() *Meta_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Meta) GetNative() *Meta_NativeInfo {
	if x != nil {
		return x.Native
	}
	return nil
}

func (x *Meta) GetNatInfo() *Meta_NATInfo {
	if x != nil {
		return x.NatInfo
	}
	return nil
}

func (x *Meta) GetAws() *Meta_Aws {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *Meta) GetGcp() *Meta_Gcp {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *Meta) GetAzure() *Meta_Azure {
	if x != nil {
		return x.Azure
	}
	return nil
}

// Flow defitions. Captures the 5-tuple and additional meta-data
type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                     Flow_Kind          `protobuf:"varint,1,opt,name=kind,proto3,enum=Flow_Kind" json:"kind,omitempty"`
	SamplingRate             uint32             `protobuf:"varint,2,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	SampleCount              uint32             `protobuf:"varint,3,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
	IpVersion                uint32             `protobuf:"varint,4,opt,name=ip_version,json=ipVersion,proto3" json:"ip_version,omitempty"`
	Protocol                 uint32             `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	EthernetType             string             `protobuf:"bytes,6,opt,name=ethernet_type,json=ethernetType,proto3" json:"ethernet_type,omitempty"`
	SrcAddr                  string             `protobuf:"bytes,7,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr                  string             `protobuf:"bytes,8,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	SrcPort                  uint32             `protobuf:"varint,9,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort                  uint32             `protobuf:"varint,10,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	SrcDns                   string             `protobuf:"bytes,11,opt,name=src_dns,json=srcDns,proto3" json:"src_dns,omitempty"`
	DstDns                   string             `protobuf:"bytes,12,opt,name=dst_dns,json=dstDns,proto3" json:"dst_dns,omitempty"`
	IpTos                    uint32             `protobuf:"varint,13,opt,name=ip_tos,json=ipTos,proto3" json:"ip_tos,omitempty"`
	TcpFlags                 uint32             `protobuf:"varint,14,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	Meta                     *Meta              `protobuf:"bytes,15,opt,name=meta,proto3" json:"meta,omitempty"`
	FlowTimeReceivedUnixNano uint64             `protobuf:"fixed64,16,opt,name=flow_time_received_unix_nano,json=flowTimeReceivedUnixNano,proto3" json:"flow_time_received_unix_nano,omitempty"`
	FlowTimeStartUnixNano    uint64             `protobuf:"fixed64,17,opt,name=flow_time_start_unix_nano,json=flowTimeStartUnixNano,proto3" json:"flow_time_start_unix_nano,omitempty"`
	FlowTimeEndUnixNano      uint64             `protobuf:"fixed64,18,opt,name=flow_time_end_unix_nano,json=flowTimeEndUnixNano,proto3" json:"flow_time_end_unix_nano,omitempty"`
	CollectorTimeUnixNano    uint64             `protobuf:"fixed64,19,opt,name=collector_time_unix_nano,json=collectorTimeUnixNano,proto3" json:"collector_time_unix_nano,omitempty"`
	ExporterIp               string             `protobuf:"bytes,20,opt,name=exporter_ip,json=exporterIp,proto3" json:"exporter_ip,omitempty"`
	SrcAs                    uint32             `protobuf:"varint,21,opt,name=src_as,json=srcAs,proto3" json:"src_as,omitempty"`
	DestAs                   uint32             `protobuf:"varint,22,opt,name=dest_as,json=destAs,proto3" json:"dest_as,omitempty"`
	Attributes               []*common.KeyValue `protobuf:"bytes,99,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{7}
}

func (x *Flow) GetKind() Flow_Kind {
	if x != nil {
		return x.Kind
	}
	return Flow_KIND_UNSPECIFIED
}

func (x *Flow) GetSamplingRate() uint32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *Flow) GetSampleCount() uint32 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

func (x *Flow) GetIpVersion() uint32 {
	if x != nil {
		return x.IpVersion
	}
	return 0
}

func (x *Flow) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Flow) GetEthernetType() string {
	if x != nil {
		return x.EthernetType
	}
	return ""
}

func (x *Flow) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *Flow) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *Flow) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Flow) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Flow) GetSrcDns() string {
	if x != nil {
		return x.SrcDns
	}
	return ""
}

func (x *Flow) GetDstDns() string {
	if x != nil {
		return x.DstDns
	}
	return ""
}

func (x *Flow) GetIpTos() uint32 {
	if x != nil {
		return x.IpTos
	}
	return 0
}

func (x *Flow) GetTcpFlags() uint32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (x *Flow) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Flow) GetFlowTimeReceivedUnixNano() uint64 {
	if x != nil {
		return x.FlowTimeReceivedUnixNano
	}
	return 0
}

func (x *Flow) GetFlowTimeStartUnixNano() uint64 {
	if x != nil {
		return x.FlowTimeStartUnixNano
	}
	return 0
}

func (x *Flow) GetFlowTimeEndUnixNano() uint64 {
	if x != nil {
		return x.FlowTimeEndUnixNano
	}
	return 0
}

func (x *Flow) GetCollectorTimeUnixNano() uint64 {
	if x != nil {
		return x.CollectorTimeUnixNano
	}
	return 0
}

func (x *Flow) GetExporterIp() string {
	if x != nil {
		return x.ExporterIp
	}
	return ""
}

func (x *Flow) GetSrcAs() uint32 {
	if x != nil {
		return x.SrcAs
	}
	return 0
}

func (x *Flow) GetDestAs() uint32 {
	if x != nil {
		return x.DestAs
	}
	return 0
}

func (x *Flow) GetAttributes() []*common.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Meta_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkts  uint32 `protobuf:"varint,1,opt,name=pkts,proto3" json:"pkts,omitempty"`
	Bytes uint64 `protobuf:"fixed64,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Meta_Metrics) Reset() {
	*x = Meta_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Metrics) ProtoMessage() {}

func (x *Meta_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Metrics.ProtoReflect.Descriptor instead.
func (*Meta_Metrics) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Meta_Metrics) GetPkts() uint32 {
	if x != nil {
		return x.Pkts
	}
	return 0
}

func (x *Meta_Metrics) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type Meta_NativeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InIfName   string `protobuf:"bytes,1,opt,name=in_if_name,json=inIfName,proto3" json:"in_if_name,omitempty"`
	InIfIndex  uint32 `protobuf:"varint,2,opt,name=in_if_index,json=inIfIndex,proto3" json:"in_if_index,omitempty"`
	OutIfName  string `protobuf:"bytes,3,opt,name=out_if_name,json=outIfName,proto3" json:"out_if_name,omitempty"`
	OutIfIndex uint32 `protobuf:"varint,4,opt,name=out_if_index,json=outIfIndex,proto3" json:"out_if_index,omitempty"`
	Nexthop    string `protobuf:"bytes,5,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
}

func (x *Meta_NativeInfo) Reset() {
	*x = Meta_NativeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_NativeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_NativeInfo) ProtoMessage() {}

func (x *Meta_NativeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_NativeInfo.ProtoReflect.Descriptor instead.
func (*Meta_NativeInfo) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Meta_NativeInfo) GetInIfName() string {
	if x != nil {
		return x.InIfName
	}
	return ""
}

func (x *Meta_NativeInfo) GetInIfIndex() uint32 {
	if x != nil {
		return x.InIfIndex
	}
	return 0
}

func (x *Meta_NativeInfo) GetOutIfName() string {
	if x != nil {
		return x.OutIfName
	}
	return ""
}

func (x *Meta_NativeInfo) GetOutIfIndex() uint32 {
	if x != nil {
		return x.OutIfIndex
	}
	return 0
}

func (x *Meta_NativeInfo) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

type Meta_NATInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostNatSourceIpv4Addr       string `protobuf:"bytes,1,opt,name=post_nat_source_ipv4_addr,json=postNatSourceIpv4Addr,proto3" json:"post_nat_source_ipv4_addr,omitempty"`
	PostNatDestIpv4Addr         string `protobuf:"bytes,2,opt,name=post_nat_dest_ipv4_addr,json=postNatDestIpv4Addr,proto3" json:"post_nat_dest_ipv4_addr,omitempty"`
	PostNaptSourceTransportPort uint32 `protobuf:"varint,3,opt,name=post_napt_source_transport_port,json=postNaptSourceTransportPort,proto3" json:"post_napt_source_transport_port,omitempty"`
	PostNaptDestTransportPort   uint32 `protobuf:"varint,4,opt,name=post_napt_dest_transport_port,json=postNaptDestTransportPort,proto3" json:"post_napt_dest_transport_port,omitempty"`
}

func (x *Meta_NATInfo) Reset() {
	*x = Meta_NATInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_NATInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_NATInfo) ProtoMessage() {}

func (x *Meta_NATInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_NATInfo.ProtoReflect.Descriptor instead.
func (*Meta_NATInfo) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 2}
}

func (x *Meta_NATInfo) GetPostNatSourceIpv4Addr() string {
	if x != nil {
		return x.PostNatSourceIpv4Addr
	}
	return ""
}

func (x *Meta_NATInfo) GetPostNatDestIpv4Addr() string {
	if x != nil {
		return x.PostNatDestIpv4Addr
	}
	return ""
}

func (x *Meta_NATInfo) GetPostNaptSourceTransportPort() uint32 {
	if x != nil {
		return x.PostNaptSourceTransportPort
	}
	return 0
}

func (x *Meta_NATInfo) GetPostNaptDestTransportPort() uint32 {
	if x != nil {
		return x.PostNaptDestTransportPort
	}
	return 0
}

type Meta_Aws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Meta_Aws) Reset() {
	*x = Meta_Aws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Aws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Aws) ProtoMessage() {}

func (x *Meta_Aws) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Aws.ProtoReflect.Descriptor instead.
func (*Meta_Aws) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 3}
}

type Meta_Gcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *Meta_Gcp_Base     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Instance *Meta_Gcp_Instance `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Vpc      *Meta_Gcp_Vpc      `protobuf:"bytes,3,opt,name=vpc,proto3" json:"vpc,omitempty"`
	Gke      *Meta_Gcp_Gke      `protobuf:"bytes,4,opt,name=gke,proto3" json:"gke,omitempty"`
}

func (x *Meta_Gcp) Reset() {
	*x = Meta_Gcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Gcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Gcp) ProtoMessage() {}

func (x *Meta_Gcp) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Gcp.ProtoReflect.Descriptor instead.
func (*Meta_Gcp) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 4}
}

func (x *Meta_Gcp) GetBase() *Meta_Gcp_Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Meta_Gcp) GetInstance() *Meta_Gcp_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Meta_Gcp) GetVpc() *Meta_Gcp_Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *Meta_Gcp) GetGke() *Meta_Gcp_Gke {
	if x != nil {
		return x.Gke
	}
	return nil
}

type Meta_Azure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowDir   Meta_AzureFlowDir   `protobuf:"varint,1,opt,name=flow_dir,json=flowDir,proto3,enum=Meta_AzureFlowDir" json:"flow_dir,omitempty"`
	FlowState Meta_AzureFlowState `protobuf:"varint,2,opt,name=flow_state,json=flowState,proto3,enum=Meta_AzureFlowState" json:"flow_state,omitempty"`
	ToSrc     *Meta_Metrics       `protobuf:"bytes,3,opt,name=to_src,json=toSrc,proto3" json:"to_src,omitempty"`
	ToDst     *Meta_Metrics       `protobuf:"bytes,4,opt,name=to_dst,json=toDst,proto3" json:"to_dst,omitempty"`
}

func (x *Meta_Azure) Reset() {
	*x = Meta_Azure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Azure) ProtoMessage() {}

func (x *Meta_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Azure.ProtoReflect.Descriptor instead.
func (*Meta_Azure) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 5}
}

func (x *Meta_Azure) GetFlowDir() Meta_AzureFlowDir {
	if x != nil {
		return x.FlowDir
	}
	return Meta_AZURE_FLOW_DIR_UNSPECIFIED
}

func (x *Meta_Azure) GetFlowState() Meta_AzureFlowState {
	if x != nil {
		return x.FlowState
	}
	return Meta_AZURE_FLOW_STATE_UNSPECIFIED
}

func (x *Meta_Azure) GetToSrc() *Meta_Metrics {
	if x != nil {
		return x.ToSrc
	}
	return nil
}

func (x *Meta_Azure) GetToDst() *Meta_Metrics {
	if x != nil {
		return x.ToDst
	}
	return nil
}

type Meta_Gcp_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Meta_Gcp_Base) Reset() {
	*x = Meta_Gcp_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Gcp_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Gcp_Base) ProtoMessage() {}

func (x *Meta_Gcp_Base) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Gcp_Base.ProtoReflect.Descriptor instead.
func (*Meta_Gcp_Base) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 4, 0}
}

type Meta_Gcp_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Meta_Gcp_Instance) Reset() {
	*x = Meta_Gcp_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Gcp_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Gcp_Instance) ProtoMessage() {}

func (x *Meta_Gcp_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Gcp_Instance.ProtoReflect.Descriptor instead.
func (*Meta_Gcp_Instance) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 4, 1}
}

type Meta_Gcp_Vpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Meta_Gcp_Vpc) Reset() {
	*x = Meta_Gcp_Vpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Gcp_Vpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Gcp_Vpc) ProtoMessage() {}

func (x *Meta_Gcp_Vpc) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Gcp_Vpc.ProtoReflect.Descriptor instead.
func (*Meta_Gcp_Vpc) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 4, 2}
}

type Meta_Gcp_Gke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Meta_Gcp_Gke) Reset() {
	*x = Meta_Gcp_Gke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta_Gcp_Gke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta_Gcp_Gke) ProtoMessage() {}

func (x *Meta_Gcp_Gke) ProtoReflect() protoreflect.Message {
	mi := &file_aflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta_Gcp_Gke.ProtoReflect.Descriptor instead.
func (*Meta_Gcp_Gke) Descriptor() ([]byte, []int) {
	return file_aflow_proto_rawDescGZIP(), []int{6, 4, 3}
}

var File_aflow_proto protoreflect.FileDescriptor

var file_aflow_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x31, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x79, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x22, 0x98,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x12, 0x28, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72,
	0x6c, 0x4a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xe9, 0x07, 0x22, 0x69, 0x0a, 0x08, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0x72, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x22, 0xb8, 0x0a, 0x0a, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4e, 0x41, 0x54,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x03, 0x61, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x03, 0x67, 0x63,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x47,
	0x63, 0x70, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x1a, 0x33, 0x0a, 0x07, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6b, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a,
	0xa6, 0x01, 0x0a, 0x0a, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x69, 0x6e, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x6e, 0x49, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x49, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x1a, 0x81, 0x02, 0x0a, 0x07, 0x4e, 0x41, 0x54,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x34,
	0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x44, 0x65, 0x73, 0x74, 0x49, 0x70, 0x76, 0x34,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x70,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x70, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x70, 0x74, 0x44, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x05, 0x0a, 0x03,
	0x41, 0x77, 0x73, 0x1a, 0xbd, 0x01, 0x0a, 0x03, 0x47, 0x63, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x47, 0x63, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x63, 0x70, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x47, 0x63, 0x70, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63,
	0x12, 0x1f, 0x0a, 0x03, 0x67, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x63, 0x70, 0x2e, 0x47, 0x6b, 0x65, 0x52, 0x03, 0x67, 0x6b,
	0x65, 0x1a, 0x06, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x05, 0x0a, 0x03, 0x56, 0x70, 0x63, 0x1a, 0x05, 0x0a, 0x03,
	0x47, 0x6b, 0x65, 0x1a, 0xb7, 0x01, 0x0a, 0x05, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x44, 0x69, 0x72, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x12, 0x33, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x53, 0x72, 0x63, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x64, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x44, 0x73, 0x74, 0x22, 0x68, 0x0a,
	0x0c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x5a,
	0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x4f, 0x55, 0x54,
	0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x5a,
	0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x5a, 0x55, 0x52,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x5a, 0x55,
	0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0x03, 0x22, 0xc8, 0x07, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x44, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74,
	0x5f, 0x64, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x74, 0x44,
	0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x70, 0x54, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x63, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x63,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x38, 0x0a, 0x19, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x34, 0x0a, 0x17, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x72, 0x63, 0x5f, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x72, 0x63,
	0x41, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x73, 0x74, 0x41, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e,
	0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x39, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x50, 0x46, 0x49, 0x58,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x0c,
	0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x0d, 0x32, 0x72,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x63, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x10, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x1a, 0x10, 0x2e, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6c, 0x6f, 0x67, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x42, 0x49, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x72, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x6f, 0x70,
	0x73, 0x72, 0x61, 0x6d, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aflow_proto_rawDescOnce sync.Once
	file_aflow_proto_rawDescData = file_aflow_proto_rawDesc
)

func file_aflow_proto_rawDescGZIP() []byte {
	file_aflow_proto_rawDescOnce.Do(func() {
		file_aflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_aflow_proto_rawDescData)
	})
	return file_aflow_proto_rawDescData
}

var file_aflow_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_aflow_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_aflow_proto_goTypes = []interface{}{
	(Meta_AzureFlowDir)(0),    // 0: Meta.AzureFlowDir
	(Meta_AzureFlowState)(0),  // 1: Meta.AzureFlowState
	(Flow_Kind)(0),            // 2: Flow.Kind
	(*NetflowResponse)(nil),   // 3: NetflowResponse
	(*AggregatedFlows)(nil),   // 4: AggregatedFlows
	(*Collector)(nil),         // 5: Collector
	(*CollectorFlows)(nil),    // 6: CollectorFlows
	(*Exporter)(nil),          // 7: Exporter
	(*ExporterFlows)(nil),     // 8: ExporterFlows
	(*Meta)(nil),              // 9: Meta
	(*Flow)(nil),              // 10: Flow
	(*Meta_Metrics)(nil),      // 11: Meta.Metrics
	(*Meta_NativeInfo)(nil),   // 12: Meta.NativeInfo
	(*Meta_NATInfo)(nil),      // 13: Meta.NATInfo
	(*Meta_Aws)(nil),          // 14: Meta.Aws
	(*Meta_Gcp)(nil),          // 15: Meta.Gcp
	(*Meta_Azure)(nil),        // 16: Meta.Azure
	(*Meta_Gcp_Base)(nil),     // 17: Meta.Gcp.Base
	(*Meta_Gcp_Instance)(nil), // 18: Meta.Gcp.Instance
	(*Meta_Gcp_Vpc)(nil),      // 19: Meta.Gcp.Vpc
	(*Meta_Gcp_Gke)(nil),      // 20: Meta.Gcp.Gke
	(*common.KeyValue)(nil),   // 21: aflow.common.KeyValue
}
var file_aflow_proto_depIdxs = []int32{
	6,  // 0: AggregatedFlows.collector_flows:type_name -> CollectorFlows
	5,  // 1: CollectorFlows.collector:type_name -> Collector
	8,  // 2: CollectorFlows.exporter_flows:type_name -> ExporterFlows
	7,  // 3: ExporterFlows.exporter:type_name -> Exporter
	10, // 4: ExporterFlows.flows:type_name -> Flow
	11, // 5: Meta.metrics:type_name -> Meta.Metrics
	12, // 6: Meta.native:type_name -> Meta.NativeInfo
	13, // 7: Meta.natInfo:type_name -> Meta.NATInfo
	14, // 8: Meta.aws:type_name -> Meta.Aws
	15, // 9: Meta.gcp:type_name -> Meta.Gcp
	16, // 10: Meta.azure:type_name -> Meta.Azure
	2,  // 11: Flow.kind:type_name -> Flow.Kind
	9,  // 12: Flow.meta:type_name -> Meta
	21, // 13: Flow.attributes:type_name -> aflow.common.KeyValue
	17, // 14: Meta.Gcp.base:type_name -> Meta.Gcp.Base
	18, // 15: Meta.Gcp.instance:type_name -> Meta.Gcp.Instance
	19, // 16: Meta.Gcp.vpc:type_name -> Meta.Gcp.Vpc
	20, // 17: Meta.Gcp.gke:type_name -> Meta.Gcp.Gke
	0,  // 18: Meta.Azure.flow_dir:type_name -> Meta.AzureFlowDir
	1,  // 19: Meta.Azure.flow_state:type_name -> Meta.AzureFlowState
	11, // 20: Meta.Azure.to_src:type_name -> Meta.Metrics
	11, // 21: Meta.Azure.to_dst:type_name -> Meta.Metrics
	4,  // 22: NetflowLogs.AddNetflowDetails:input_type -> AggregatedFlows
	3,  // 23: NetflowLogs.AddNetflowDetails:output_type -> NetflowResponse
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_aflow_proto_init() }
func file_aflow_proto_init() {
	if File_aflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExporterFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_NativeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_NATInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Aws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Gcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Azure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Gcp_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Gcp_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Gcp_Vpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta_Gcp_Gke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aflow_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aflow_proto_goTypes,
		DependencyIndexes: file_aflow_proto_depIdxs,
		EnumInfos:         file_aflow_proto_enumTypes,
		MessageInfos:      file_aflow_proto_msgTypes,
	}.Build()
	File_aflow_proto = out.File
	file_aflow_proto_rawDesc = nil
	file_aflow_proto_goTypes = nil
	file_aflow_proto_depIdxs = nil
}

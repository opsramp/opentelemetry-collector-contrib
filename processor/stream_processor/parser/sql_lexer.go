// Code generated from sql.g4 by ANTLR 4.10.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type sqlLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var sqllexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func sqllexerLexerInit() {
	staticData := &sqllexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "", "','", "'('", "')'", "';'", "", "", "", "", "", "", "", "",
		"'='", "'>'", "'<'", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "'*'",
	}
	staticData.symbolicNames = []string{
		"", "SPACE", "COMMA", "L_BRACKET", "R_BRACKET", "EOQ", "K_SELECT", "K_WHERE",
		"K_WINDOW_TUMBLING", "K_GROUP_BY", "K_AND", "K_OR", "K_IS", "K_LIKE",
		"K_EQUAL", "K_GREATER", "K_LESS", "K_LESS_EQUAL", "K_GREATER_EQUAL",
		"K_NOT_EQUAL", "K_NULL", "K_IS_NULL", "K_IS_NOT_NULL", "K_NOT", "K_NOT_IN",
		"K_IN", "K_COUNT", "K_MIN", "K_MAX", "K_AVG", "IDENTIFIER", "NUMERIC_LITERAL",
		"STRING_LITERAL", "STAR",
	}
	staticData.ruleNames = []string{
		"SPACE", "COMMA", "L_BRACKET", "R_BRACKET", "EOQ", "K_SELECT", "K_WHERE",
		"K_WINDOW_TUMBLING", "K_GROUP_BY", "K_AND", "K_OR", "K_IS", "K_LIKE",
		"K_EQUAL", "K_GREATER", "K_LESS", "K_LESS_EQUAL", "K_GREATER_EQUAL",
		"K_NOT_EQUAL", "K_NULL", "K_IS_NULL", "K_IS_NOT_NULL", "K_NOT", "K_NOT_IN",
		"K_IN", "K_COUNT", "K_MIN", "K_MAX", "K_AVG", "IDENTIFIER", "NUMERIC_LITERAL",
		"STRING_LITERAL", "STAR", "DIGIT", "A", "B", "C", "D", "E", "F", "G",
		"H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
		"V", "W", "X", "Y", "Z",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 33, 394, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57,
		7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1,
		1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5,
		1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 17,
		1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22,
		1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1,
		24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1,
		29, 1, 29, 5, 29, 251, 8, 29, 10, 29, 12, 29, 254, 9, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 5, 29, 261, 8, 29, 10, 29, 12, 29, 264, 9, 29, 1,
		29, 1, 29, 1, 29, 5, 29, 269, 8, 29, 10, 29, 12, 29, 272, 9, 29, 1, 29,
		1, 29, 1, 29, 5, 29, 277, 8, 29, 10, 29, 12, 29, 280, 9, 29, 3, 29, 282,
		8, 29, 1, 30, 4, 30, 285, 8, 30, 11, 30, 12, 30, 286, 1, 30, 1, 30, 5,
		30, 291, 8, 30, 10, 30, 12, 30, 294, 9, 30, 3, 30, 296, 8, 30, 1, 30, 1,
		30, 3, 30, 300, 8, 30, 1, 30, 4, 30, 303, 8, 30, 11, 30, 12, 30, 304, 3,
		30, 307, 8, 30, 1, 30, 1, 30, 4, 30, 311, 8, 30, 11, 30, 12, 30, 312, 1,
		30, 1, 30, 3, 30, 317, 8, 30, 1, 30, 4, 30, 320, 8, 30, 11, 30, 12, 30,
		321, 3, 30, 324, 8, 30, 3, 30, 326, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31,
		5, 31, 332, 8, 31, 10, 31, 12, 31, 335, 9, 31, 1, 31, 1, 31, 1, 32, 1,
		32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37,
		1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1,
		43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48,
		1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1,
		53, 1, 54, 1, 54, 1, 55, 1, 55, 1, 56, 1, 56, 1, 57, 1, 57, 1, 58, 1, 58,
		1, 59, 1, 59, 0, 0, 60, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15,
		8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17,
		35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26,
		53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 0, 69, 0, 71,
		0, 73, 0, 75, 0, 77, 0, 79, 0, 81, 0, 83, 0, 85, 0, 87, 0, 89, 0, 91, 0,
		93, 0, 95, 0, 97, 0, 99, 0, 101, 0, 103, 0, 105, 0, 107, 0, 109, 0, 111,
		0, 113, 0, 115, 0, 117, 0, 119, 0, 1, 0, 35, 3, 0, 9, 11, 13, 13, 32, 32,
		1, 0, 34, 34, 1, 0, 96, 96, 1, 0, 93, 93, 3, 0, 65, 90, 95, 95, 97, 122,
		4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 2, 0, 43, 43, 45, 45, 1, 0, 39,
		39, 1, 0, 48, 57, 2, 0, 65, 65, 97, 97, 2, 0, 66, 66, 98, 98, 2, 0, 67,
		67, 99, 99, 2, 0, 68, 68, 100, 100, 2, 0, 69, 69, 101, 101, 2, 0, 70, 70,
		102, 102, 2, 0, 71, 71, 103, 103, 2, 0, 72, 72, 104, 104, 2, 0, 73, 73,
		105, 105, 2, 0, 74, 74, 106, 106, 2, 0, 75, 75, 107, 107, 2, 0, 76, 76,
		108, 108, 2, 0, 77, 77, 109, 109, 2, 0, 78, 78, 110, 110, 2, 0, 79, 79,
		111, 111, 2, 0, 80, 80, 112, 112, 2, 0, 81, 81, 113, 113, 2, 0, 82, 82,
		114, 114, 2, 0, 83, 83, 115, 115, 2, 0, 84, 84, 116, 116, 2, 0, 85, 85,
		117, 117, 2, 0, 86, 86, 118, 118, 2, 0, 87, 87, 119, 119, 2, 0, 88, 88,
		120, 120, 2, 0, 89, 89, 121, 121, 2, 0, 90, 90, 122, 122, 388, 0, 1, 1,
		0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1,
		0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17,
		1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0,
		25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0,
		0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0,
		0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0,
		0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1,
		0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63,
		1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 1, 121, 1, 0, 0, 0, 3, 125, 1, 0, 0, 0,
		5, 127, 1, 0, 0, 0, 7, 129, 1, 0, 0, 0, 9, 131, 1, 0, 0, 0, 11, 133, 1,
		0, 0, 0, 13, 140, 1, 0, 0, 0, 15, 146, 1, 0, 0, 0, 17, 162, 1, 0, 0, 0,
		19, 171, 1, 0, 0, 0, 21, 175, 1, 0, 0, 0, 23, 178, 1, 0, 0, 0, 25, 181,
		1, 0, 0, 0, 27, 186, 1, 0, 0, 0, 29, 188, 1, 0, 0, 0, 31, 190, 1, 0, 0,
		0, 33, 192, 1, 0, 0, 0, 35, 195, 1, 0, 0, 0, 37, 198, 1, 0, 0, 0, 39, 201,
		1, 0, 0, 0, 41, 206, 1, 0, 0, 0, 43, 210, 1, 0, 0, 0, 45, 216, 1, 0, 0,
		0, 47, 220, 1, 0, 0, 0, 49, 225, 1, 0, 0, 0, 51, 228, 1, 0, 0, 0, 53, 234,
		1, 0, 0, 0, 55, 238, 1, 0, 0, 0, 57, 242, 1, 0, 0, 0, 59, 281, 1, 0, 0,
		0, 61, 325, 1, 0, 0, 0, 63, 327, 1, 0, 0, 0, 65, 338, 1, 0, 0, 0, 67, 340,
		1, 0, 0, 0, 69, 342, 1, 0, 0, 0, 71, 344, 1, 0, 0, 0, 73, 346, 1, 0, 0,
		0, 75, 348, 1, 0, 0, 0, 77, 350, 1, 0, 0, 0, 79, 352, 1, 0, 0, 0, 81, 354,
		1, 0, 0, 0, 83, 356, 1, 0, 0, 0, 85, 358, 1, 0, 0, 0, 87, 360, 1, 0, 0,
		0, 89, 362, 1, 0, 0, 0, 91, 364, 1, 0, 0, 0, 93, 366, 1, 0, 0, 0, 95, 368,
		1, 0, 0, 0, 97, 370, 1, 0, 0, 0, 99, 372, 1, 0, 0, 0, 101, 374, 1, 0, 0,
		0, 103, 376, 1, 0, 0, 0, 105, 378, 1, 0, 0, 0, 107, 380, 1, 0, 0, 0, 109,
		382, 1, 0, 0, 0, 111, 384, 1, 0, 0, 0, 113, 386, 1, 0, 0, 0, 115, 388,
		1, 0, 0, 0, 117, 390, 1, 0, 0, 0, 119, 392, 1, 0, 0, 0, 121, 122, 7, 0,
		0, 0, 122, 123, 1, 0, 0, 0, 123, 124, 6, 0, 0, 0, 124, 2, 1, 0, 0, 0, 125,
		126, 5, 44, 0, 0, 126, 4, 1, 0, 0, 0, 127, 128, 5, 40, 0, 0, 128, 6, 1,
		0, 0, 0, 129, 130, 5, 41, 0, 0, 130, 8, 1, 0, 0, 0, 131, 132, 5, 59, 0,
		0, 132, 10, 1, 0, 0, 0, 133, 134, 3, 105, 52, 0, 134, 135, 3, 77, 38, 0,
		135, 136, 3, 91, 45, 0, 136, 137, 3, 77, 38, 0, 137, 138, 3, 73, 36, 0,
		138, 139, 3, 107, 53, 0, 139, 12, 1, 0, 0, 0, 140, 141, 3, 113, 56, 0,
		141, 142, 3, 83, 41, 0, 142, 143, 3, 77, 38, 0, 143, 144, 3, 103, 51, 0,
		144, 145, 3, 77, 38, 0, 145, 14, 1, 0, 0, 0, 146, 147, 3, 113, 56, 0, 147,
		148, 3, 85, 42, 0, 148, 149, 3, 95, 47, 0, 149, 150, 3, 75, 37, 0, 150,
		151, 3, 97, 48, 0, 151, 152, 3, 113, 56, 0, 152, 153, 3, 1, 0, 0, 153,
		154, 3, 107, 53, 0, 154, 155, 3, 109, 54, 0, 155, 156, 3, 93, 46, 0, 156,
		157, 3, 71, 35, 0, 157, 158, 3, 91, 45, 0, 158, 159, 3, 85, 42, 0, 159,
		160, 3, 95, 47, 0, 160, 161, 3, 81, 40, 0, 161, 16, 1, 0, 0, 0, 162, 163,
		3, 81, 40, 0, 163, 164, 3, 103, 51, 0, 164, 165, 3, 97, 48, 0, 165, 166,
		3, 109, 54, 0, 166, 167, 3, 99, 49, 0, 167, 168, 3, 1, 0, 0, 168, 169,
		3, 71, 35, 0, 169, 170, 3, 117, 58, 0, 170, 18, 1, 0, 0, 0, 171, 172, 3,
		69, 34, 0, 172, 173, 3, 95, 47, 0, 173, 174, 3, 75, 37, 0, 174, 20, 1,
		0, 0, 0, 175, 176, 3, 97, 48, 0, 176, 177, 3, 103, 51, 0, 177, 22, 1, 0,
		0, 0, 178, 179, 3, 85, 42, 0, 179, 180, 3, 105, 52, 0, 180, 24, 1, 0, 0,
		0, 181, 182, 3, 91, 45, 0, 182, 183, 3, 85, 42, 0, 183, 184, 3, 89, 44,
		0, 184, 185, 3, 77, 38, 0, 185, 26, 1, 0, 0, 0, 186, 187, 5, 61, 0, 0,
		187, 28, 1, 0, 0, 0, 188, 189, 5, 62, 0, 0, 189, 30, 1, 0, 0, 0, 190, 191,
		5, 60, 0, 0, 191, 32, 1, 0, 0, 0, 192, 193, 3, 31, 15, 0, 193, 194, 3,
		27, 13, 0, 194, 34, 1, 0, 0, 0, 195, 196, 3, 29, 14, 0, 196, 197, 3, 27,
		13, 0, 197, 36, 1, 0, 0, 0, 198, 199, 5, 33, 0, 0, 199, 200, 3, 27, 13,
		0, 200, 38, 1, 0, 0, 0, 201, 202, 3, 95, 47, 0, 202, 203, 3, 109, 54, 0,
		203, 204, 3, 91, 45, 0, 204, 205, 3, 91, 45, 0, 205, 40, 1, 0, 0, 0, 206,
		207, 3, 23, 11, 0, 207, 208, 3, 1, 0, 0, 208, 209, 3, 39, 19, 0, 209, 42,
		1, 0, 0, 0, 210, 211, 3, 23, 11, 0, 211, 212, 3, 1, 0, 0, 212, 213, 3,
		45, 22, 0, 213, 214, 3, 1, 0, 0, 214, 215, 3, 39, 19, 0, 215, 44, 1, 0,
		0, 0, 216, 217, 3, 95, 47, 0, 217, 218, 3, 97, 48, 0, 218, 219, 3, 107,
		53, 0, 219, 46, 1, 0, 0, 0, 220, 221, 3, 45, 22, 0, 221, 222, 3, 1, 0,
		0, 222, 223, 3, 85, 42, 0, 223, 224, 3, 95, 47, 0, 224, 48, 1, 0, 0, 0,
		225, 226, 3, 85, 42, 0, 226, 227, 3, 95, 47, 0, 227, 50, 1, 0, 0, 0, 228,
		229, 3, 73, 36, 0, 229, 230, 3, 97, 48, 0, 230, 231, 3, 109, 54, 0, 231,
		232, 3, 95, 47, 0, 232, 233, 3, 107, 53, 0, 233, 52, 1, 0, 0, 0, 234, 235,
		3, 93, 46, 0, 235, 236, 3, 85, 42, 0, 236, 237, 3, 95, 47, 0, 237, 54,
		1, 0, 0, 0, 238, 239, 3, 93, 46, 0, 239, 240, 3, 69, 34, 0, 240, 241, 3,
		115, 57, 0, 241, 56, 1, 0, 0, 0, 242, 243, 3, 69, 34, 0, 243, 244, 3, 111,
		55, 0, 244, 245, 3, 81, 40, 0, 245, 58, 1, 0, 0, 0, 246, 252, 5, 34, 0,
		0, 247, 251, 8, 1, 0, 0, 248, 249, 5, 34, 0, 0, 249, 251, 5, 34, 0, 0,
		250, 247, 1, 0, 0, 0, 250, 248, 1, 0, 0, 0, 251, 254, 1, 0, 0, 0, 252,
		250, 1, 0, 0, 0, 252, 253, 1, 0, 0, 0, 253, 255, 1, 0, 0, 0, 254, 252,
		1, 0, 0, 0, 255, 282, 5, 34, 0, 0, 256, 262, 5, 96, 0, 0, 257, 261, 8,
		2, 0, 0, 258, 259, 5, 96, 0, 0, 259, 261, 5, 96, 0, 0, 260, 257, 1, 0,
		0, 0, 260, 258, 1, 0, 0, 0, 261, 264, 1, 0, 0, 0, 262, 260, 1, 0, 0, 0,
		262, 263, 1, 0, 0, 0, 263, 265, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 265,
		282, 5, 96, 0, 0, 266, 270, 5, 91, 0, 0, 267, 269, 8, 3, 0, 0, 268, 267,
		1, 0, 0, 0, 269, 272, 1, 0, 0, 0, 270, 268, 1, 0, 0, 0, 270, 271, 1, 0,
		0, 0, 271, 273, 1, 0, 0, 0, 272, 270, 1, 0, 0, 0, 273, 282, 5, 93, 0, 0,
		274, 278, 7, 4, 0, 0, 275, 277, 7, 5, 0, 0, 276, 275, 1, 0, 0, 0, 277,
		280, 1, 0, 0, 0, 278, 276, 1, 0, 0, 0, 278, 279, 1, 0, 0, 0, 279, 282,
		1, 0, 0, 0, 280, 278, 1, 0, 0, 0, 281, 246, 1, 0, 0, 0, 281, 256, 1, 0,
		0, 0, 281, 266, 1, 0, 0, 0, 281, 274, 1, 0, 0, 0, 282, 60, 1, 0, 0, 0,
		283, 285, 3, 67, 33, 0, 284, 283, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0, 286,
		284, 1, 0, 0, 0, 286, 287, 1, 0, 0, 0, 287, 295, 1, 0, 0, 0, 288, 292,
		5, 46, 0, 0, 289, 291, 3, 67, 33, 0, 290, 289, 1, 0, 0, 0, 291, 294, 1,
		0, 0, 0, 292, 290, 1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 296, 1, 0, 0,
		0, 294, 292, 1, 0, 0, 0, 295, 288, 1, 0, 0, 0, 295, 296, 1, 0, 0, 0, 296,
		306, 1, 0, 0, 0, 297, 299, 3, 77, 38, 0, 298, 300, 7, 6, 0, 0, 299, 298,
		1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 302, 1, 0, 0, 0, 301, 303, 3, 67,
		33, 0, 302, 301, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0,
		304, 305, 1, 0, 0, 0, 305, 307, 1, 0, 0, 0, 306, 297, 1, 0, 0, 0, 306,
		307, 1, 0, 0, 0, 307, 326, 1, 0, 0, 0, 308, 310, 5, 46, 0, 0, 309, 311,
		3, 67, 33, 0, 310, 309, 1, 0, 0, 0, 311, 312, 1, 0, 0, 0, 312, 310, 1,
		0, 0, 0, 312, 313, 1, 0, 0, 0, 313, 323, 1, 0, 0, 0, 314, 316, 3, 77, 38,
		0, 315, 317, 7, 6, 0, 0, 316, 315, 1, 0, 0, 0, 316, 317, 1, 0, 0, 0, 317,
		319, 1, 0, 0, 0, 318, 320, 3, 67, 33, 0, 319, 318, 1, 0, 0, 0, 320, 321,
		1, 0, 0, 0, 321, 319, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 324, 1, 0,
		0, 0, 323, 314, 1, 0, 0, 0, 323, 324, 1, 0, 0, 0, 324, 326, 1, 0, 0, 0,
		325, 284, 1, 0, 0, 0, 325, 308, 1, 0, 0, 0, 326, 62, 1, 0, 0, 0, 327, 333,
		5, 39, 0, 0, 328, 332, 8, 7, 0, 0, 329, 330, 5, 39, 0, 0, 330, 332, 5,
		39, 0, 0, 331, 328, 1, 0, 0, 0, 331, 329, 1, 0, 0, 0, 332, 335, 1, 0, 0,
		0, 333, 331, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335,
		333, 1, 0, 0, 0, 336, 337, 5, 39, 0, 0, 337, 64, 1, 0, 0, 0, 338, 339,
		5, 42, 0, 0, 339, 66, 1, 0, 0, 0, 340, 341, 7, 8, 0, 0, 341, 68, 1, 0,
		0, 0, 342, 343, 7, 9, 0, 0, 343, 70, 1, 0, 0, 0, 344, 345, 7, 10, 0, 0,
		345, 72, 1, 0, 0, 0, 346, 347, 7, 11, 0, 0, 347, 74, 1, 0, 0, 0, 348, 349,
		7, 12, 0, 0, 349, 76, 1, 0, 0, 0, 350, 351, 7, 13, 0, 0, 351, 78, 1, 0,
		0, 0, 352, 353, 7, 14, 0, 0, 353, 80, 1, 0, 0, 0, 354, 355, 7, 15, 0, 0,
		355, 82, 1, 0, 0, 0, 356, 357, 7, 16, 0, 0, 357, 84, 1, 0, 0, 0, 358, 359,
		7, 17, 0, 0, 359, 86, 1, 0, 0, 0, 360, 361, 7, 18, 0, 0, 361, 88, 1, 0,
		0, 0, 362, 363, 7, 19, 0, 0, 363, 90, 1, 0, 0, 0, 364, 365, 7, 20, 0, 0,
		365, 92, 1, 0, 0, 0, 366, 367, 7, 21, 0, 0, 367, 94, 1, 0, 0, 0, 368, 369,
		7, 22, 0, 0, 369, 96, 1, 0, 0, 0, 370, 371, 7, 23, 0, 0, 371, 98, 1, 0,
		0, 0, 372, 373, 7, 24, 0, 0, 373, 100, 1, 0, 0, 0, 374, 375, 7, 25, 0,
		0, 375, 102, 1, 0, 0, 0, 376, 377, 7, 26, 0, 0, 377, 104, 1, 0, 0, 0, 378,
		379, 7, 27, 0, 0, 379, 106, 1, 0, 0, 0, 380, 381, 7, 28, 0, 0, 381, 108,
		1, 0, 0, 0, 382, 383, 7, 29, 0, 0, 383, 110, 1, 0, 0, 0, 384, 385, 7, 30,
		0, 0, 385, 112, 1, 0, 0, 0, 386, 387, 7, 31, 0, 0, 387, 114, 1, 0, 0, 0,
		388, 389, 7, 32, 0, 0, 389, 116, 1, 0, 0, 0, 390, 391, 7, 33, 0, 0, 391,
		118, 1, 0, 0, 0, 392, 393, 7, 34, 0, 0, 393, 120, 1, 0, 0, 0, 21, 0, 250,
		252, 260, 262, 270, 278, 281, 286, 292, 295, 299, 304, 306, 312, 316, 321,
		323, 325, 331, 333, 1, 0, 1, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// sqlLexerInit initializes any static state used to implement sqlLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewsqlLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func SqlLexerInit() {
	staticData := &sqllexerLexerStaticData
	staticData.once.Do(sqllexerLexerInit)
}

// NewsqlLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewsqlLexer(input antlr.CharStream) *sqlLexer {
	SqlLexerInit()
	l := new(sqlLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &sqllexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "sql.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// sqlLexer tokens.
const (
	sqlLexerSPACE             = 1
	sqlLexerCOMMA             = 2
	sqlLexerL_BRACKET         = 3
	sqlLexerR_BRACKET         = 4
	sqlLexerEOQ               = 5
	sqlLexerK_SELECT          = 6
	sqlLexerK_WHERE           = 7
	sqlLexerK_WINDOW_TUMBLING = 8
	sqlLexerK_GROUP_BY        = 9
	sqlLexerK_AND             = 10
	sqlLexerK_OR              = 11
	sqlLexerK_IS              = 12
	sqlLexerK_LIKE            = 13
	sqlLexerK_EQUAL           = 14
	sqlLexerK_GREATER         = 15
	sqlLexerK_LESS            = 16
	sqlLexerK_LESS_EQUAL      = 17
	sqlLexerK_GREATER_EQUAL   = 18
	sqlLexerK_NOT_EQUAL       = 19
	sqlLexerK_NULL            = 20
	sqlLexerK_IS_NULL         = 21
	sqlLexerK_IS_NOT_NULL     = 22
	sqlLexerK_NOT             = 23
	sqlLexerK_NOT_IN          = 24
	sqlLexerK_IN              = 25
	sqlLexerK_COUNT           = 26
	sqlLexerK_MIN             = 27
	sqlLexerK_MAX             = 28
	sqlLexerK_AVG             = 29
	sqlLexerIDENTIFIER        = 30
	sqlLexerNUMERIC_LITERAL   = 31
	sqlLexerSTRING_LITERAL    = 32
	sqlLexerSTAR              = 33
)
